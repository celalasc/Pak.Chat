#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.
–ò—Å–∫–ª—é—á–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –º—É—Å–æ—Ä.
–í–∫–ª—é—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞.
"""

import os
import sys
from pathlib import Path
from typing import Set, List

# –ü–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
IGNORE_DIRS = {
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø–∞–∫–µ—Ç—ã
    'node_modules', 'bower_components', 'jspm_packages',
    'venv', 'env', '.env', 'site-packages', '__pycache__',
    '.gradle', '.mvn', 'target', 'vendor', 'packages',
    
    # –ë–∏–ª–¥—ã –∏ –∫–µ—à–∏
    '.next', 'dist', 'build', 'out', '.output', '.nuxt',
    '.cache', '.parcel-cache', '.sass-cache', '.webpack',
    '.turbo', '.swc', 'coverage', '.nyc_output',
    
    # IDE –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ
    '.git', '.vscode', '.idea', '.DS_Store', 'Thumbs.db',
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ª–æ–≥–∏
    'logs', 'tmp', 'temp', '.tmp', '.temp',
    
    # –î–µ–ø–ª–æ–π –∏ —Å–µ—Ä–≤–µ—Ä—ã
    '.serverless', '.vercel', '.netlify',
    
    # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    '_generated', 'generated', '__generated__',
    'typings', '.docusaurus', 'storybook-static',
}

# –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å (—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
FORCE_EXCLUDE_FILES = {
    '.env', '.env.local', '.env.development', '.env.production',
    '.env.staging', '.env.test', '.env.example',
    'pnpm-lock.yaml', 'package-lock.json', 'yarn.lock',
    '.DS_Store', 'Thumbs.db',
}

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –Ω–µ –Ω—É–∂–Ω—ã
IGNORE_EXTENSIONS = {
    # –õ–æ–≥–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
    '.log', '.tmp', '.temp', '.cache', '.lock', '.lockb',
    
    # –ö–∞—Ä—Ç—ã –∏ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    '.map', '.min.js', '.min.css', '.bundle.js', '.bundle.css',
    '.chunk.js', '.chunk.css', '.d.ts.map', '.js.map', '.css.map',
    
    # –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
    '.png', '.jpg', '.jpeg', '.gif', '.svg', '.ico', '.webp', '.avif',
    '.bmp', '.tiff', '.mp4', '.webm', '.mov', '.avi', '.mkv',
    '.mp3', '.wav', '.ogg', '.flac', '.aac', '.m4a',
    
    # –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∞—Ä—Ö–∏–≤—ã
    '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx',
    '.zip', '.tar', '.gz', '.rar', '.7z', '.bz2', '.xz',
    
    # –®—Ä–∏—Ñ—Ç—ã
    '.woff', '.woff2', '.ttf', '.eot', '.otf',
    
    # –ë–∏–Ω–∞—Ä–Ω—ã–µ –∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ
    '.exe', '.dll', '.so', '.dylib', '.class', '.jar', '.war',
    '.pyc', '.pyo', '.pyd', '.deb', '.rpm', '.dmg', '.msi', '.app',
    
    # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    '.db', '.sqlite', '.sqlite3', '.dump',
    
    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    '.backup', '.bak', '.swp', '.swo', '.old',
}

# –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞)
FORCE_INCLUDE_FILES = {
    'readme.md', 'license', 'changelog.md', 'contributing.md',
    '.gitignore', '.gitattributes', 'dockerfile', 'makefile',
    'docker-compose.yml', 'docker-compose.yaml',
}

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –Ω—É–∂–Ω—ã
CODE_EXTENSIONS = {
    # –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
    '.js', '.jsx', '.ts', '.tsx', '.mjs', '.cjs',
    '.html', '.htm', '.css', '.scss', '.sass', '.less',
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    '.json', '.jsonc', '.json5', '.yaml', '.yml', '.toml',
    '.ini', '.cfg', '.conf', '.config',
    
    # –†–∞–∑–º–µ—Ç–∫–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    '.md', '.mdx', '.txt', '.rst',
    
    # –°–∫—Ä–∏–ø—Ç—ã
    '.sh', '.bash', '.zsh', '.fish', '.ps1', '.bat', '.cmd',
    
    # –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —è–∑—ã–∫–∏
    '.py', '.pyw', '.rb', '.php', '.go', '.rs', '.java', '.kt',
    '.c', '.cpp', '.h', '.hpp', '.cs', '.swift', '.dart',
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    '.sql', '.graphql', '.gql', '.prisma', '.proto',
    '.dockerfile', '.Dockerfile', '.tf', '.tfvars',
}

def should_ignore_dir(dir_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."""
    # –°–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏ (–∫—Ä–æ–º–µ .github)
    if dir_name.startswith('.') and dir_name != '.github':
        return True
    
    # –ò–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    if dir_name.lower() in IGNORE_DIRS:
        return True
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    ignore_patterns = ['cache', 'temp', 'tmp', 'build', 'dist', 'generated', 'node_modules']
    if any(pattern in dir_name.lower() for pattern in ignore_patterns):
        return True
    
    return False

def should_ignore_file(file_path: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª."""
    file_name = file_path.name
    file_name_lower = file_name.lower()
    file_extension = file_path.suffix.lower()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
    if file_name in FORCE_EXCLUDE_FILES or file_name_lower in FORCE_EXCLUDE_FILES:
        return True
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
    if file_name_lower in FORCE_INCLUDE_FILES:
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    if file_extension in IGNORE_EXTENSIONS:
        return True
    
    # –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (–±–æ–ª—å—à–µ 500KB –¥–ª—è –∫–æ–¥–∞)
    try:
        if file_path.stat().st_size > 512 * 1024:
            return True
    except:
        pass
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
    if any(pattern in file_name_lower for pattern in ['.tmp', '.temp', '.cache', '.lock', '~', '.bak', '.old', 'generated']):
        return True
    
    # –§–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–∫—Ä–æ–º–µ –≤–∞–∂–Ω—ã—Ö)
    if not file_extension:
        important_names = {'makefile', 'dockerfile', 'license', 'readme', 'changelog'}
        if file_name_lower not in important_names:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ shebang
            try:
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    first_line = f.readline().strip()
                    if not first_line.startswith('#!'):
                        return True
            except:
                return True
    
    return False

def read_file_safely(file_path: Path) -> str:
    """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫."""
    encodings = ['utf-8', 'utf-8-sig', 'cp1251', 'latin1']
    
    for encoding in encodings:
        try:
            with open(file_path, 'r', encoding=encoding, errors='ignore') as f:
                content = f.read()
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                if len(content) > 100000:  # 100KB —Ç–µ–∫—Å—Ç–∞
                    content = content[:100000] + "\n\n... (—Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω, —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)"
                return content
        except:
            continue
    
    return "// –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª"

def collect_project_files(root_dir: str = None, output_file: str = "project_code.txt") -> None:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."""
    if root_dir is None:
        root_dir = os.getcwd()
    
    root_path = Path(root_dir)
    
    if not root_path.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {root_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    collected_files = []
    total_files = 0
    skipped_files = 0
    
    print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {root_path}")
    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
    print("=" * 60)
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    for item in root_path.rglob('*'):
        if item.is_file():
            total_files += 1
            relative_path = item.relative_to(root_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç–∏
            should_skip = False
            for parent in relative_path.parents:
                if should_ignore_dir(parent.name):
                    should_skip = True
                    break
            
            if should_skip:
                skipped_files += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º —Ñ–∞–π–ª
            if should_ignore_file(item):
                skipped_files += 1
                continue
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            try:
                content = read_file_safely(item)
                collected_files.append({
                    'path': str(relative_path),
                    'content': content,
                    'size': len(content),
                    'extension': item.suffix.lower()
                })
                print(f"‚úÖ {relative_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {relative_path}: {e}")
                skipped_files += 1
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã: —Å–Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ñ–∏–≥–∏, –ø–æ—Ç–æ–º –∫–æ–¥ –ø–æ —Ç–∏–ø–∞–º
    def get_sort_priority(file_info):
        path = file_info['path'].lower()
        ext = file_info['extension']
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–≤—ã–º–∏
        if any(name in path for name in ['package.json', 'tsconfig', 'next.config', 'tailwind.config']):
            return (0, path)
        # README –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        if 'readme' in path or ext == '.md':
            return (1, path)
        # –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø–æ —Ç–∏–ø–∞–º
        if ext in ['.ts', '.tsx']:
            return (2, path)
        if ext in ['.js', '.jsx']:
            return (3, path)
        if ext in ['.css', '.scss']:
            return (4, path)
        # –û—Å—Ç–∞–ª—å–Ω–æ–µ
        return (5, path)
    
    collected_files.sort(key=get_sort_priority)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            f.write("=" * 80 + "\n")
            f.write("üìÅ –ò–°–•–û–î–ù–´–ô –ö–û–î –ü–†–û–ï–ö–¢–ê\n")
            f.write("=" * 80 + "\n")
            f.write(f"üìÇ –ü—Ä–æ–µ–∫—Ç: {root_path.name}\n")
            f.write(f"üìç –ü—É—Ç—å: {root_path}\n")
            f.write(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(collected_files)}\n")
            f.write(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {skipped_files}\n")
            f.write(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n")
            f.write("=" * 80 + "\n\n")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
            extensions_count = {}
            for file_info in collected_files:
                ext = file_info['extension'] or '–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è'
                extensions_count[ext] = extensions_count.get(ext, 0) + 1
            
            f.write("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –§–ê–ô–õ–û–í:\n")
            f.write("-" * 40 + "\n")
            for ext, count in sorted(extensions_count.items(), key=lambda x: x[1], reverse=True):
                f.write(f"{ext:20} {count:3} —Ñ–∞–π–ª(–æ–≤)\n")
            f.write("\n" + "=" * 80 + "\n\n")
            
            # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
            for i, file_info in enumerate(collected_files, 1):
                f.write(f"\n{'='*80}\n")
                f.write(f"üìÑ –§–ê–ô–õ {i}/{len(collected_files)}: {file_info['path']}\n")
                f.write(f"üìè –†–∞–∑–º–µ—Ä: {file_info['size']:,} —Å–∏–º–≤–æ–ª–æ–≤\n")
                f.write(f"üè∑Ô∏è  –¢–∏–ø: {file_info['extension'] or '–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è'}\n")
                f.write("=" * 80 + "\n")
                f.write(file_info['content'])
                f.write("\n\n")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        output_size = Path(output_file).stat().st_size
        print("=" * 60)
        print(f"üéâ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã –≤: {output_file}")
        print(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(collected_files)}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {skipped_files}")
        print(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
        
        if output_size > 1024 * 1024:
            print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {output_size / (1024 * 1024):.1f} MB")
        else:
            print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {output_size / 1024:.1f} KB")
            
        # –¢–æ–ø-5 —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
        extensions_count = {}
        for file_info in collected_files:
            ext = file_info['extension'] or '–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è'
            extensions_count[ext] = extensions_count.get(ext, 0) + 1
        
        print("\nüìà –í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤:")
        for ext, count in sorted(extensions_count.items(), key=lambda x: x[1], reverse=True)[:5]:
            print(f"   {ext}: {count} —Ñ–∞–π–ª(–æ–≤)")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="üöÄ –°–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python collect_project_files.py                       # —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞
  python collect_project_files.py -d /path/to/project   # —É–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞  
  python collect_project_files.py -o my_code.txt        # —Å–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
  python collect_project_files.py -d ~/myproject -o code.txt

üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
  - –ò—Å–∫–ª—é—á–∞–µ—Ç .env —Ñ–∞–π–ª—ã –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  - –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç node_modules –∏ –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∏ –±–∏–Ω–∞—Ä–Ω–∏–∫–∏
  - –í–∫–ª—é—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞
        """
    )
    
    parser.add_argument(
        '-d', '--directory',
        type=str,
        default=None,
        help='üìÇ –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞)'
    )
    
    parser.add_argument(
        '-o', '--output',
        type=str,
        default='project_code.txt',
        help='üìÑ –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: project_code.txt)'
    )
    
    args = parser.parse_args()
    
    collect_project_files(args.directory, args.output)

if __name__ == "__main__":
    main() 