--- PROJECT REQUIREMENTS DOCUMENT ---

## PRD: Pak.Chat — High-Performance LLM Application

## Project Goal

To create a high-performance application for working with LLMs, with the ability to log in via a Google account.

## Main Components

### Input Field

*   Send button — sends the message
*   Stop button — stops response generation
*   Model selection button — opens a modal window with LLM model options
*   Adaptive positioning:
    *   If there are no messages, the input field is centered on the screen
    *   In the centered state, the model selection modal window opens from the bottom (not the top)
*   Quoting:
    *   When quoting AI text, the input field expands
    *   The quoted text is displayed with a special background.
    *   A cross icon in the top right corner to cancel quoting. Below the cross, a tooltip "Press Esc"
    *   Quotes longer than 2 lines become scrollable
*   When the user scrolls up, an arrow should appear to the right above the input field. Clicking it scrolls down.
*   Before the button that opens the model selection window, there should be a "+" icon. Clicking it should open a small window containing buttons: [File icon] Add file, [Arrow icon] Recent, [Brush icon] Draw.

### Chat Navigation

Left navigation menu in the form of bars:

*   Each bar represents a user message
*   The length of the bar corresponds to the length of the message
*   On hover, the bar is replaced by a tile containing a short part of the user message.
*   Clicking the tile scrolls to the corresponding message in the chat.

### Chat History / New Chat

Chat history modal window (button in the top right corner):

*   Chat search field
*   Implement search by chat title and content.
*   Chat tiles with titles
*   Interactive elements:
    *   On hover: delete and pin buttons appear.
    *   Double-click on the title: rename chat
    *   On hovering over a chat, a preview appears on the right.
*   New chat button next to the history button
*   The new chat creation button comes first, followed by the button to open chat history.

### Settings

Settings modal window with tabs:

"Settings" Tab:

*   General font selection: "Proxima Vara" or "System font"
*   Code font selection: "Berkeley Mono (default)" or "System monospace font"
*   Theme selection: light or dark

"Profile" Tab:

*   User avatar, name, and email address
*   Option to blur/hide all user data, applied automatically, can be disabled.
*   Logout button.

"API Keys" Tab:

*   Input fields for provider API keys:
    *   Google API Key
    *   OpenRouter
    *   OpenAI
    *   Groq
*   Quick links for creating API keys with the respective providers
*   List of supported models for each provider
*   In the mobile version, when scrolling down, this button should smoothly "slide" to the right.

### Messages and Interaction

User Messages (on hover):

*   Copy button — copies the message text
*   Edit button — allows editing with rollback after saving
*   Regeneration system: shows the number of regenerations below the message with navigation "← 1/2 →"

AI Messages (on hover):

*   "Start New Branch" button — creates a copy of the chat starting from the message where the button was clicked, including all previous messages. In the chat history window, the icon next to such a "clone" should be the same as on the button.
*   Regenerate button — rolls back to the selected point and regenerates
*   Quoting: when text is selected, a quoting button with quotation marks appears.
    
--- END PROJECT REQUIREMENTS DOCUMENT ---

--- FILE: ./project_snapshot.txt ---


--- FILE: ./tsconfig.tsbuildinfo ---
{"fileNames":["./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es5.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2016.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2018.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2019.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2021.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2023.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.iterable.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.core.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.collection.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.generator.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.iterable.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.promise.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.proxy.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.reflect.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.symbol.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2016.array.include.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2016.intl.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.arraybuffer.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.date.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.object.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.string.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.intl.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2018.intl.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2018.promise.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2018.regexp.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2019.array.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2019.object.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2019.string.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2019.symbol.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2019.intl.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.bigint.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.date.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.promise.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.string.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.intl.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.number.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2021.promise.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2021.string.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2021.weakref.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2021.intl.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.array.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.error.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.intl.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.object.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.string.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.regexp.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2023.array.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2023.collection.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2023.intl.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.arraybuffer.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.collection.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.object.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.promise.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.regexp.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.sharedmemory.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2024.string.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.array.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.collection.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.intl.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.disposable.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.promise.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.decorators.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.iterator.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.esnext.float16.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.decorators.d.ts","./node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.decorators.legacy.d.ts","./node_modules/.pnpm/@types+react@19.1.6/node_modules/@types/react/global.d.ts","./node_modules/.pnpm/csstype@3.1.3/node_modules/csstype/index.d.ts","./node_modules/.pnpm/@types+react@19.1.6/node_modules/@types/react/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/styled-jsx/types/css.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/styled-jsx/types/macro.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/styled-jsx/types/style.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/styled-jsx/types/global.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/styled-jsx/types/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/amp.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/amp.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/get-page-files.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/compatibility/disposable.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/compatibility/indexable.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/compatibility/iterators.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/compatibility/index.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/globals.typedarray.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/buffer.buffer.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/header.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/readable.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/file.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/fetch.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/formdata.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/connector.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/client.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/errors.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/dispatcher.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/global-dispatcher.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/global-origin.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/pool-stats.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/pool.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/handlers.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/balanced-pool.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/agent.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/mock-interceptor.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/mock-agent.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/mock-client.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/mock-pool.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/mock-errors.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/proxy-agent.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/env-http-proxy-agent.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/retry-handler.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/retry-agent.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/api.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/interceptors.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/util.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/cookies.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/patch.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/websocket.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/eventsource.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/filereader.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/diagnostics-channel.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/content-type.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/cache.d.ts","./node_modules/.pnpm/undici-types@6.21.0/node_modules/undici-types/index.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/globals.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/assert.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/assert/strict.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/async_hooks.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/buffer.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/child_process.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/cluster.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/console.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/constants.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/crypto.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/dgram.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/diagnostics_channel.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/dns.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/dns/promises.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/domain.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/dom-events.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/events.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/fs.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/fs/promises.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/http.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/http2.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/https.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/inspector.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/module.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/net.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/os.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/path.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/perf_hooks.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/process.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/punycode.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/querystring.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/readline.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/readline/promises.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/repl.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/sea.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/stream.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/stream/promises.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/stream/consumers.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/stream/web.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/string_decoder.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/test.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/timers.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/timers/promises.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/tls.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/trace_events.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/tty.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/url.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/util.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/v8.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/vm.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/wasi.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/worker_threads.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/zlib.d.ts","./node_modules/.pnpm/@types+node@20.19.0/node_modules/@types/node/index.d.ts","./node_modules/.pnpm/@types+react@19.1.6/node_modules/@types/react/canary.d.ts","./node_modules/.pnpm/@types+react@19.1.6/node_modules/@types/react/experimental.d.ts","./node_modules/.pnpm/@types+react-dom@19.1.6_@types+react@19.1.6/node_modules/@types/react-dom/index.d.ts","./node_modules/.pnpm/@types+react-dom@19.1.6_@types+react@19.1.6/node_modules/@types/react-dom/canary.d.ts","./node_modules/.pnpm/@types+react-dom@19.1.6_@types+react@19.1.6/node_modules/@types/react-dom/experimental.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/fallback.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/webpack/webpack.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/config.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/load-custom-routes.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/image-config.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/plugins/subresource-integrity-plugin.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/body-streams.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/cache-control.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/setup-exception-listeners.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/worker.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/constants.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/app-router-headers.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/rendering-mode.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/router-utils/build-prefetch-segment-data-route.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/require-hook.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/experimental/ppr.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/plugins/app-build-manifest-plugin.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/page-types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/segment-config/app/app-segment-config.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/segment-config/pages/pages-segment-config.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/analysis/get-page-static-info.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/loaders/get-module-build-info.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/plugins/middleware-plugin.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/node-polyfill-crypto.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/node-environment-baseline.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/node-environment-extensions/error-inspect.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/node-environment-extensions/random.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/node-environment-extensions/date.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/node-environment-extensions/web-crypto.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/node-environment-extensions/node-crypto.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/node-environment.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/page-extensions-type.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/plugins/flight-manifest-plugin.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-kind.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-definitions/route-definition.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/route-module.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/deep-readonly.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/load-components.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-definitions/app-page-route-definition.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/cache-handlers/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/response-cache/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/resume-data-cache/cache-store.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/resume-data-cache/resume-data-cache.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/render-result.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/plugins/next-font-manifest-plugin.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/router-reducer/router-reducer-types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/flight-data-helpers.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/router-reducer/fetch-server-response.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/app-router-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/router/utils/middleware-route-matcher.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-definitions/locale-route-definition.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-definitions/pages-route-definition.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/mitt.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/with-router.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/router.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/route-loader.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/page-loader.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/bloom-filter.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/router/router.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/router-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/loadable-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/loadable.shared-runtime.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/image-config-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/hooks-client-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/head-manager-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/amp-context.shared-runtime.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/server-inserted-html.shared-runtime.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/pages/vendored/contexts/entrypoints.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/pages/module.compiled.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/templates/pages.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/pages/module.d.ts","./node_modules/.pnpm/@types+react@19.1.6/node_modules/@types/react/jsx-runtime.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/react-dev-overlay/pages/pages-dev-overlay.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/render.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/response-cache/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/plugins/pages-manifest-plugin.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-definitions/pages-api-route-definition.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-matches/pages-api-route-match.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/instrumentation/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-matchers/route-matcher.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-matcher-providers/route-matcher-provider.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/i18n-provider.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-matcher-managers/route-matcher-manager.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/normalizers/normalizer.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/normalizers/locale-route-normalizer.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/normalizers/request/pathname-normalizer.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/normalizers/request/suffix.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/normalizers/request/rsc.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/normalizers/request/prefetch-rsc.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/normalizers/request/next-data.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/after/builtin-request-context.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/normalizers/request/segment-prefix-rsc.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/base-server.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/next-url.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/@edge-runtime/cookies/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/spec-extension/cookies.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/spec-extension/request.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/spec-extension/fetch-event.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/spec-extension/response.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/segment-config/middleware/middleware-config.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/adapter.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/use-cache/cache-life.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/modern-browserslist-target.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/constants.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/loaders/metadata/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/app-dir-module.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/async-storage/draft-mode-provider.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/spec-extension/adapters/headers.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/cache-signal.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/dynamic-rendering.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/work-unit-async-storage-instance.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/request/fallback-params.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/lazy-result.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/implicit-tags.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/work-unit-async-storage.external.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/router/utils/parse-relative-url.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/clean-async-snapshot-instance.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/clean-async-snapshot.external.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/app-render.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/server-inserted-metadata.shared-runtime.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/app-page/vendored/contexts/entrypoints.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/error-boundary.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/layout-router.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/render-from-template-context.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/action-async-storage-instance.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/action-async-storage.external.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/client-page.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/client-segment.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/request/search-params.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/hooks-server-context.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/http-access-fallback/error-boundary.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/metadata/types/alternative-urls-types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/metadata/types/extra-types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/metadata/types/metadata-types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/metadata/types/manifest-types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/metadata/types/opengraph-types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/metadata/types/twitter-types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/metadata/types/metadata-interface.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/metadata/types/resolvers.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/metadata/types/icons.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/metadata/resolve-metadata.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/metadata/metadata.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/metadata/metadata-boundary.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/rsc/preloads.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/rsc/postpone.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/rsc/taint.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/collect-segment-data.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/entry-base.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/templates/app-page.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/app-page/module.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/app-page/module.compiled.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-definitions/app-route-route-definition.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/async-storage/work-store.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/http.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/app-route/shared-modules.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/redirect-status-code.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/redirect-error.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/templates/app-route.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/app-route/module.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/app-route/module.compiled.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/segment-config/app/app-segments.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/static-paths/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/utils.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/turborepo-access-trace/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/turborepo-access-trace/result.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/turborepo-access-trace/helpers.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/turborepo-access-trace/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/export/routes/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/export/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/export/worker.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/worker.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/incremental-cache/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/after/after.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/after/after-context.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/work-async-storage-instance.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/app-render/work-async-storage.external.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/request/params.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-matches/route-match.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/request-meta.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/cli/next-test.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/config-shared.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/base-http/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/api-utils/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/router/utils/parse-url.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/base-http/node.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/async-callback-set.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/router/utils/route-regex.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/router/utils/route-matcher.d.ts","./node_modules/.pnpm/sharp@0.34.2/node_modules/sharp/lib/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/image-optimizer.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/next-server.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/coalesced-function.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/router-utils/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/trace/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/trace/trace.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/trace/shared.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/trace/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/load-jsconfig.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack-config.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/swc/generated-native.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/swc/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/dev/parse-version-info.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/react-dev-overlay/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/dev/dev-indicator-server-state.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/dev/hot-reloader-types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/telemetry/storage.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/render-server.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/router-server.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/router/utils/path-match.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/router-utils/filesystem.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/router-utils/setup-dev-bundler.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/lru-cache.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/lib/dev-bundler-service.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/dev/static-paths-worker.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/dev/next-dev-server.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/next.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/html-context.shared-runtime.d.ts","./node_modules/.pnpm/@next+env@15.3.2/node_modules/@next/env/dist/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/utils.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/pages/_app.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/app.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/spec-extension/unstable-cache.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/spec-extension/revalidate.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/spec-extension/unstable-no-store.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/use-cache/cache-tag.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/cache.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/runtime-config.external.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/config.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/pages/_document.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/document.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/dynamic.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dynamic.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/pages/_error.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/error.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/head.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/head.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/request/cookies.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/request/headers.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/request/draft-mode.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/headers.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/get-img-props.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/image-component.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/image-external.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/image.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/link.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/link.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/redirect.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/not-found.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/forbidden.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/unauthorized.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/unstable-rethrow.server.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/unstable-rethrow.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/navigation.react-server.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/components/navigation.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/navigation.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/router.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/client/script.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/script.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/spec-extension/user-agent.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/@edge-runtime/primitives/url.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/web/spec-extension/image-response.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/@vercel/og/satori/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/@vercel/og/emoji/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/@vercel/og/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/after/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/request/root-params.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/request/connection.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/server.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/types/global.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/types/compiled.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/types.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/index.d.ts","./node_modules/.pnpm/next@15.3.2_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/image-types/global.d.ts","./next-env.d.ts","./next.config.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/header.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/readable.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/file.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/fetch.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/formdata.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/connector.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/client.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/errors.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/dispatcher.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/global-dispatcher.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/global-origin.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/pool-stats.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/pool.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/handlers.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/balanced-pool.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/agent.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/mock-interceptor.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/mock-agent.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/mock-client.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/mock-pool.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/mock-errors.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/proxy-agent.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/retry-handler.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/api.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/cookies.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/patch.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/filereader.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/diagnostics-channel.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/websocket.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/content-type.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/cache.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/interceptors.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/types/index.d.ts","./node_modules/.pnpm/undici@5.29.0/node_modules/undici/index.d.ts","./node_modules/.pnpm/@cspotcode+source-map-support@0.8.1/node_modules/@cspotcode/source-map-support/source-map-support.d.ts","./node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/helpers/typealiases.d.ts","./node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/helpers/util.d.ts","./node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/zoderror.d.ts","./node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/locales/en.d.ts","./node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/errors.d.ts","./node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/helpers/parseutil.d.ts","./node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/helpers/enumutil.d.ts","./node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/helpers/errorutil.d.ts","./node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/helpers/partialutil.d.ts","./node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/types.d.ts","./node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/external.d.ts","./node_modules/.pnpm/zod@3.22.3/node_modules/zod/lib/index.d.ts","./node_modules/.pnpm/zod@3.22.3/node_modules/zod/index.d.ts","./node_modules/.pnpm/miniflare@4.20250525.1/node_modules/miniflare/dist/src/index.d.ts","./node_modules/.pnpm/esbuild@0.25.4/node_modules/esbuild/lib/main.d.ts","./node_modules/.pnpm/wrangler@4.19.1/node_modules/wrangler/wrangler-dist/cli.d.ts","./node_modules/.pnpm/@opennextjs+cloudflare@1.2.1_wrangler@4.19.1/node_modules/@opennextjs/cloudflare/dist/api/durable-objects/bucket-cache-purge.d.ts","./node_modules/.pnpm/@opennextjs+aws@3.6.5/node_modules/@opennextjs/aws/dist/types/cache.d.ts","./node_modules/.pnpm/@opennextjs+aws@3.6.5/node_modules/@opennextjs/aws/dist/adapters/warmer-function.d.ts","./node_modules/.pnpm/@opennextjs+aws@3.6.5/node_modules/@opennextjs/aws/dist/types/open-next.d.ts","./node_modules/.pnpm/@opennextjs+aws@3.6.5/node_modules/@opennextjs/aws/dist/types/overrides.d.ts","./node_modules/.pnpm/@opennextjs+cloudflare@1.2.1_wrangler@4.19.1/node_modules/@opennextjs/cloudflare/dist/api/durable-objects/queue.d.ts","./node_modules/.pnpm/@opennextjs+cloudflare@1.2.1_wrangler@4.19.1/node_modules/@opennextjs/cloudflare/dist/api/durable-objects/sharded-tag-cache.d.ts","./node_modules/.pnpm/@opennextjs+cloudflare@1.2.1_wrangler@4.19.1/node_modules/@opennextjs/cloudflare/dist/api/overrides/incremental-cache/kv-incremental-cache.d.ts","./node_modules/.pnpm/@opennextjs+cloudflare@1.2.1_wrangler@4.19.1/node_modules/@opennextjs/cloudflare/dist/api/overrides/incremental-cache/r2-incremental-cache.d.ts","./node_modules/.pnpm/@opennextjs+cloudflare@1.2.1_wrangler@4.19.1/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.d.ts","./node_modules/.pnpm/@opennextjs+aws@3.6.5/node_modules/@opennextjs/aws/dist/build/helper.d.ts","./node_modules/.pnpm/@opennextjs+cloudflare@1.2.1_wrangler@4.19.1/node_modules/@opennextjs/cloudflare/dist/api/config.d.ts","./node_modules/.pnpm/@opennextjs+cloudflare@1.2.1_wrangler@4.19.1/node_modules/@opennextjs/cloudflare/dist/api/index.d.ts","./open-next.config.ts","./vitest.shims.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/v3/helpers/typealiases.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/v3/helpers/util.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/v3/zoderror.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/v3/locales/en.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/v3/errors.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/v3/helpers/parseutil.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/v3/helpers/enumutil.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/v3/helpers/errorutil.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/v3/helpers/partialutil.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/v3/standard-schema.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/v3/types.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/v3/external.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/v3/index.d.ts","./node_modules/.pnpm/zod@3.25.56/node_modules/zod/dist/types/index.d.ts","./node_modules/.pnpm/@types+json-schema@7.0.15/node_modules/@types/json-schema/index.d.ts","./node_modules/.pnpm/@ai-sdk+provider@1.1.3/node_modules/@ai-sdk/provider/dist/index.d.ts","./node_modules/.pnpm/@ai-sdk+provider-utils@2.2.8_zod@3.25.56/node_modules/@ai-sdk/provider-utils/dist/index.d.ts","./node_modules/.pnpm/@ai-sdk+google@1.2.19_zod@3.25.56/node_modules/@ai-sdk/google/dist/index.d.ts","./node_modules/.pnpm/@ai-sdk+ui-utils@1.2.11_zod@3.25.56/node_modules/@ai-sdk/ui-utils/dist/index.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/baggage/internal/symbol.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/baggage/types.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/baggage/utils.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/common/exception.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/common/time.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/common/attributes.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/context/types.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/context/context.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/api/context.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/diag/types.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/diag/consolelogger.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/api/diag.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/metrics/observableresult.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/metrics/metric.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/metrics/meter.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/metrics/noopmeter.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/metrics/meterprovider.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/api/metrics.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/propagation/textmappropagator.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/baggage/context-helpers.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/api/propagation.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/attributes.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/trace_state.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/span_context.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/link.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/status.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/span.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/span_kind.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/spanoptions.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/tracer.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/tracer_options.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/proxytracer.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/tracer_provider.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/proxytracerprovider.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/samplingresult.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/sampler.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/trace_flags.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/internal/utils.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/spancontext-utils.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/invalid-span-constants.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace/context-utils.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/api/trace.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/context-api.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/diag-api.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/metrics-api.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/propagation-api.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/trace-api.d.ts","./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/src/index.d.ts","./node_modules/.pnpm/ai@4.3.16_react@19.1.0_zod@3.25.56/node_modules/ai/dist/index.d.ts","./app/api/completion/route.ts","./node_modules/.pnpm/@ai-sdk+openai@1.3.22_zod@3.25.56/node_modules/@ai-sdk/openai/dist/index.d.ts","./node_modules/.pnpm/@ai-sdk+provider@1.0.9/node_modules/@ai-sdk/provider/dist/index.d.ts","./node_modules/.pnpm/@openrouter+ai-sdk-provider@0.4.6_zod@3.25.56/node_modules/@openrouter/ai-sdk-provider/dist/index.d.ts","./node_modules/.pnpm/zustand@5.0.5_@types+react@19.1.6_react@19.1.0_use-sync-external-store@1.5.0_react@19.1.0_/node_modules/zustand/esm/vanilla.d.mts","./node_modules/.pnpm/zustand@5.0.5_@types+react@19.1.6_react@19.1.0_use-sync-external-store@1.5.0_react@19.1.0_/node_modules/zustand/esm/react.d.mts","./node_modules/.pnpm/zustand@5.0.5_@types+react@19.1.6_react@19.1.0_use-sync-external-store@1.5.0_react@19.1.0_/node_modules/zustand/esm/index.d.mts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/values/value.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/type_utils.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/values/validators.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/values/validator.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/values/base64.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/values/errors.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/values/compare.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/values/index.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/browser/sync/function_result.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/browser/logging.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/authentication.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/data_model.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/filter_builder.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/index_range_builder.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/pagination.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/search_filter_builder.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/query.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/system_fields.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/schema.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/database.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/impl/registration_impl.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/storage.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/scheduler.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/cron.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/router.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/components/paths.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/components/index.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/vector_search.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/index.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/registration.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/server/api.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/browser/sync/optimistic_updates.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/browser/long.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/browser/sync/protocol.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/browser/sync/udf_path_utils.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/browser/sync/local_state.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/browser/sync/authentication_manager.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/browser/sync/client.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/browser/simple_client.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/browser/http_client.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/browser/index.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/react/use_paginated_query.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/react/client.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/react/queries_observer.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/react/use_queries.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/react/auth_helpers.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/react/convexauthstate.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/react/hydration.d.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/react/index.d.ts","./convex/schema.ts","./convex/_generated/datamodel.d.ts","./convex/_generated/server.d.ts","./convex/apikeys.ts","./convex/attachments.ts","./convex/http.ts","./convex/utils.ts","./convex/messages.ts","./convex/modelvisibility.ts","./convex/threads.ts","./convex/usersettings.ts","./convex/users.ts","./convex/_generated/api.d.ts","./node_modules/.pnpm/@firebase+util@1.12.0/node_modules/@firebase/util/dist/util-public.d.ts","./node_modules/.pnpm/@firebase+component@0.6.17/node_modules/@firebase/component/dist/src/provider.d.ts","./node_modules/.pnpm/@firebase+component@0.6.17/node_modules/@firebase/component/dist/src/component_container.d.ts","./node_modules/.pnpm/@firebase+component@0.6.17/node_modules/@firebase/component/dist/src/types.d.ts","./node_modules/.pnpm/@firebase+component@0.6.17/node_modules/@firebase/component/dist/src/component.d.ts","./node_modules/.pnpm/@firebase+component@0.6.17/node_modules/@firebase/component/dist/index.d.ts","./node_modules/.pnpm/@firebase+logger@0.4.4/node_modules/@firebase/logger/dist/src/logger.d.ts","./node_modules/.pnpm/@firebase+logger@0.4.4/node_modules/@firebase/logger/dist/index.d.ts","./node_modules/.pnpm/@firebase+app@0.13.1/node_modules/@firebase/app/dist/app-public.d.ts","./node_modules/.pnpm/@firebase+auth@1.10.7_@firebase+app@0.13.1/node_modules/@firebase/auth/dist/auth-public.d.ts","./node_modules/.pnpm/firebase@11.9.1/node_modules/firebase/auth/dist/auth/index.d.ts","./node_modules/.pnpm/firebase@11.9.1/node_modules/firebase/app/dist/app/index.d.ts","./firebase/config.ts","./firebase/index.ts","./node_modules/.pnpm/zustand@5.0.5_@types+react@19.1.6_react@19.1.0_use-sync-external-store@1.5.0_react@19.1.0_/node_modules/zustand/esm/middleware/redux.d.mts","./node_modules/.pnpm/zustand@5.0.5_@types+react@19.1.6_react@19.1.0_use-sync-external-store@1.5.0_react@19.1.0_/node_modules/zustand/esm/middleware/devtools.d.mts","./node_modules/.pnpm/zustand@5.0.5_@types+react@19.1.6_react@19.1.0_use-sync-external-store@1.5.0_react@19.1.0_/node_modules/zustand/esm/middleware/subscribewithselector.d.mts","./node_modules/.pnpm/zustand@5.0.5_@types+react@19.1.6_react@19.1.0_use-sync-external-store@1.5.0_react@19.1.0_/node_modules/zustand/esm/middleware/combine.d.mts","./node_modules/.pnpm/zustand@5.0.5_@types+react@19.1.6_react@19.1.0_use-sync-external-store@1.5.0_react@19.1.0_/node_modules/zustand/esm/middleware/persist.d.mts","./node_modules/.pnpm/zustand@5.0.5_@types+react@19.1.6_react@19.1.0_use-sync-external-store@1.5.0_react@19.1.0_/node_modules/zustand/esm/middleware.d.mts","./frontend/stores/settingsstore.ts","./frontend/stores/authstore.ts","./node_modules/.pnpm/sonner@2.0.5_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/sonner/dist/index.d.mts","./frontend/stores/apikeystore.ts","./lib/models.ts","./node_modules/.pnpm/convex@1.24.8_react@19.1.0/node_modules/convex/dist/esm-types/nextjs/index.d.ts","./lib/ids.ts","./node_modules/.pnpm/@types+pdf-parse@1.1.5/node_modules/@types/pdf-parse/index.d.ts","./app/api/llm/route.ts","./frontend/hooks/useconvexmessages.ts","./frontend/hooks/useconvexthreads.ts","./frontend/hooks/useismobile.ts","./frontend/hooks/usekeyboardinsets.ts","./node_modules/.pnpm/@ai-sdk+react@1.2.12_react@19.1.0_zod@3.25.56/node_modules/@ai-sdk/react/dist/index.d.ts","./frontend/hooks/usemessagesummary.ts","./frontend/stores/modelstore.ts","./frontend/stores/modelvisibilitystore.ts","./frontend/hooks/usemodelvisibilitysync.ts","./frontend/hooks/usemodelsync.ts","./frontend/stores/quotestore.ts","./frontend/hooks/usequoteshortcuts.ts","./frontend/hooks/usescrollhide.ts","./frontend/hooks/usesettings.ts","./frontend/hooks/usestreambuffer.ts","./frontend/hooks/usetextselection.ts","./frontend/hooks/useusersync.ts","./frontend/hooks/usewelcomethread.ts","./node_modules/.pnpm/@types+crypto-js@4.2.2/node_modules/@types/crypto-js/index.d.ts","./frontend/lib/crypto.ts","./frontend/lib/image.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/types.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/max.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/nil.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/parse.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/stringify.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/v1.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/v1tov6.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/v35.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/v3.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/v4.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/v5.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/v6.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/v6tov1.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/v7.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/validate.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/version.d.ts","./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/index.d.ts","./frontend/stores/attachmentsstore.ts","./frontend/stores/chatstore.ts","./frontend/stores/draftstore.ts","./node_modules/.pnpm/@types+unist@3.0.3/node_modules/@types/unist/index.d.ts","./node_modules/.pnpm/@types+hast@3.0.4/node_modules/@types/hast/index.d.ts","./node_modules/.pnpm/@shikijs+vscode-textmate@10.0.2/node_modules/@shikijs/vscode-textmate/dist/index.d.ts","./node_modules/.pnpm/@shikijs+types@3.6.0/node_modules/@shikijs/types/dist/index.d.mts","./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/format-smart.d.ts","./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/core.d.ts","./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/index.d.ts","./node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/index.d.ts","./node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/util/info.d.ts","./node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/find.d.ts","./node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/hast-to-react.d.ts","./node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/normalize.d.ts","./node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/index.d.ts","./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/index.d.ts","./node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/index.d.ts","./node_modules/.pnpm/@shikijs+core@3.6.0/node_modules/@shikijs/core/dist/index.d.mts","./node_modules/.pnpm/shiki@3.6.0/node_modules/shiki/dist/themes.d.mts","./node_modules/.pnpm/shiki@3.6.0/node_modules/shiki/dist/bundle-web.d.mts","./frontend/worker/shikiworker.ts","./frontend/worker/shikiworkerfactory.ts","./hooks/useautoresizetextarea.ts","./node_modules/.pnpm/@vitest+pretty-format@3.2.3/node_modules/@vitest/pretty-format/dist/index.d.ts","./node_modules/.pnpm/@vitest+utils@3.2.3/node_modules/@vitest/utils/dist/types.d.ts","./node_modules/.pnpm/@vitest+utils@3.2.3/node_modules/@vitest/utils/dist/helpers.d.ts","./node_modules/.pnpm/tinyrainbow@2.0.0/node_modules/tinyrainbow/dist/index-8b61d5bc.d.ts","./node_modules/.pnpm/tinyrainbow@2.0.0/node_modules/tinyrainbow/dist/node.d.ts","./node_modules/.pnpm/@vitest+utils@3.2.3/node_modules/@vitest/utils/dist/index.d.ts","./node_modules/.pnpm/@vitest+runner@3.2.3/node_modules/@vitest/runner/dist/tasks.d-cksck4of.d.ts","./node_modules/.pnpm/@vitest+utils@3.2.3/node_modules/@vitest/utils/dist/types.d-bcelap-c.d.ts","./node_modules/.pnpm/@vitest+utils@3.2.3/node_modules/@vitest/utils/dist/diff.d.ts","./node_modules/.pnpm/@vitest+runner@3.2.3/node_modules/@vitest/runner/dist/types.d.ts","./node_modules/.pnpm/@vitest+utils@3.2.3/node_modules/@vitest/utils/dist/error.d.ts","./node_modules/.pnpm/@vitest+runner@3.2.3/node_modules/@vitest/runner/dist/index.d.ts","./node_modules/.pnpm/vitest@3.2.3_@types+debug@4.1.12_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vitest/optional-types.d.ts","./node_modules/.pnpm/vitest@3.2.3_@types+debug@4.1.12_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vitest/dist/chunks/environment.d.cl3nlxbe.d.ts","./node_modules/.pnpm/@types+estree@1.0.7/node_modules/@types/estree/index.d.ts","./node_modules/.pnpm/rollup@4.43.0/node_modules/rollup/dist/rollup.d.ts","./node_modules/.pnpm/rollup@4.43.0/node_modules/rollup/dist/parseast.d.ts","./node_modules/.pnpm/vite@6.3.5_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite/types/hmrpayload.d.ts","./node_modules/.pnpm/vite@6.3.5_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite/types/customevent.d.ts","./node_modules/.pnpm/vite@6.3.5_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite/types/hot.d.ts","./node_modules/.pnpm/vite@6.3.5_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite/dist/node/modulerunnertransport.d-dj_me5sf.d.ts","./node_modules/.pnpm/vite@6.3.5_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite/dist/node/module-runner.d.ts","./node_modules/.pnpm/source-map-js@1.2.1/node_modules/source-map-js/source-map.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/previous-map.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/input.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/css-syntax-error.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/declaration.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/root.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/warning.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/lazy-result.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/no-work-result.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/processor.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/result.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/document.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/rule.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/node.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/comment.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/container.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/at-rule.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/list.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/postcss.d.ts","./node_modules/.pnpm/postcss@8.5.4/node_modules/postcss/lib/postcss.d.mts","./node_modules/.pnpm/lightningcss@1.30.1/node_modules/lightningcss/node/ast.d.ts","./node_modules/.pnpm/lightningcss@1.30.1/node_modules/lightningcss/node/targets.d.ts","./node_modules/.pnpm/lightningcss@1.30.1/node_modules/lightningcss/node/index.d.ts","./node_modules/.pnpm/vite@6.3.5_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite/types/internal/lightningcssoptions.d.ts","./node_modules/.pnpm/vite@6.3.5_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite/types/internal/csspreprocessoroptions.d.ts","./node_modules/.pnpm/vite@6.3.5_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite/types/importglob.d.ts","./node_modules/.pnpm/vite@6.3.5_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite/types/metadata.d.ts","./node_modules/.pnpm/vite@6.3.5_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite/dist/node/index.d.ts","./node_modules/.pnpm/@vitest+mocker@3.2.3_vite@6.3.5_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0_/node_modules/@vitest/mocker/dist/registry.d-d765pazg.d.ts","./node_modules/.pnpm/@vitest+mocker@3.2.3_vite@6.3.5_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0_/node_modules/@vitest/mocker/dist/types.d-d_arzrdy.d.ts","./node_modules/.pnpm/@vitest+mocker@3.2.3_vite@6.3.5_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0_/node_modules/@vitest/mocker/dist/index.d.ts","./node_modules/.pnpm/@vitest+utils@3.2.3/node_modules/@vitest/utils/dist/source-map.d.ts","./node_modules/.pnpm/vite-node@3.2.3_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite-node/dist/trace-mapping.d-dlvdeqop.d.ts","./node_modules/.pnpm/vite-node@3.2.3_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite-node/dist/index.d-dgmxd2u7.d.ts","./node_modules/.pnpm/vite-node@3.2.3_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite-node/dist/index.d.ts","./node_modules/.pnpm/@vitest+snapshot@3.2.3/node_modules/@vitest/snapshot/dist/environment.d-dhdq1csl.d.ts","./node_modules/.pnpm/@vitest+snapshot@3.2.3/node_modules/@vitest/snapshot/dist/rawsnapshot.d-lfsmjfud.d.ts","./node_modules/.pnpm/@vitest+snapshot@3.2.3/node_modules/@vitest/snapshot/dist/index.d.ts","./node_modules/.pnpm/@vitest+snapshot@3.2.3/node_modules/@vitest/snapshot/dist/environment.d.ts","./node_modules/.pnpm/vitest@3.2.3_@types+debug@4.1.12_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vitest/dist/chunks/config.d.d2roskhv.d.ts","./node_modules/.pnpm/vitest@3.2.3_@types+debug@4.1.12_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vitest/dist/chunks/worker.d.tqu2ejqy.d.ts","./node_modules/.pnpm/@types+deep-eql@4.0.2/node_modules/@types/deep-eql/index.d.ts","./node_modules/.pnpm/@types+chai@5.2.2/node_modules/@types/chai/index.d.ts","./node_modules/.pnpm/@vitest+runner@3.2.3/node_modules/@vitest/runner/dist/utils.d.ts","./node_modules/.pnpm/tinybench@2.9.0/node_modules/tinybench/dist/index.d.ts","./node_modules/.pnpm/vitest@3.2.3_@types+debug@4.1.12_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vitest/dist/chunks/benchmark.d.bwvbvtda.d.ts","./node_modules/.pnpm/vite-node@3.2.3_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vite-node/dist/client.d.ts","./node_modules/.pnpm/vitest@3.2.3_@types+debug@4.1.12_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vitest/dist/chunks/coverage.d.s9rmnxie.d.ts","./node_modules/.pnpm/@vitest+snapshot@3.2.3/node_modules/@vitest/snapshot/dist/manager.d.ts","./node_modules/.pnpm/vitest@3.2.3_@types+debug@4.1.12_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vitest/dist/chunks/reporters.d.dl9pg5db.d.ts","./node_modules/.pnpm/vitest@3.2.3_@types+debug@4.1.12_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vitest/dist/chunks/worker.d.dvqk5vmu.d.ts","./node_modules/.pnpm/@vitest+spy@3.2.3/node_modules/@vitest/spy/dist/index.d.ts","./node_modules/.pnpm/@vitest+expect@3.2.3/node_modules/@vitest/expect/dist/index.d.ts","./node_modules/.pnpm/vitest@3.2.3_@types+debug@4.1.12_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vitest/dist/chunks/global.d.mamajcmj.d.ts","./node_modules/.pnpm/vitest@3.2.3_@types+debug@4.1.12_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vitest/dist/chunks/vite.d.ctvoceqc.d.ts","./node_modules/.pnpm/vitest@3.2.3_@types+debug@4.1.12_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vitest/dist/chunks/mocker.d.be_2ls6u.d.ts","./node_modules/.pnpm/vitest@3.2.3_@types+debug@4.1.12_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vitest/dist/chunks/suite.d.fvehnv49.d.ts","./node_modules/.pnpm/expect-type@1.2.1/node_modules/expect-type/dist/utils.d.ts","./node_modules/.pnpm/expect-type@1.2.1/node_modules/expect-type/dist/overloads.d.ts","./node_modules/.pnpm/expect-type@1.2.1/node_modules/expect-type/dist/branding.d.ts","./node_modules/.pnpm/expect-type@1.2.1/node_modules/expect-type/dist/messages.d.ts","./node_modules/.pnpm/expect-type@1.2.1/node_modules/expect-type/dist/index.d.ts","./node_modules/.pnpm/vitest@3.2.3_@types+debug@4.1.12_@types+node@20.19.0_jiti@2.4.2_lightningcss@1.30.1_terser@5.42.0_yaml@2.8.0/node_modules/vitest/dist/index.d.ts","./lib/escapehtml.ts","./lib/escapehtml.test.ts","./lib/tools.ts","./node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/clsx.d.mts","./node_modules/.pnpm/tailwind-merge@3.3.0/node_modules/tailwind-merge/dist/types.d.ts","./lib/utils.ts","./node_modules/.pnpm/next-themes@0.4.6_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next-themes/dist/index.d.ts","./frontend/components/ui/sonner.tsx","./frontend/components/ui/themeprovider.tsx","./frontend/components/providers.tsx","./frontend/components/appshellskeleton.tsx","./frontend/components/authlistener.tsx","./frontend/components/convexclientprovider.tsx","./frontend/components/usersync.tsx","./app/layout.tsx","./node_modules/.pnpm/@radix-ui+react-slot@1.2.3_@types+react@19.1.6_react@19.1.0/node_modules/@radix-ui/react-slot/dist/index.d.mts","./node_modules/.pnpm/class-variance-authority@0.7.1/node_modules/class-variance-authority/dist/types.d.ts","./node_modules/.pnpm/class-variance-authority@0.7.1/node_modules/class-variance-authority/dist/index.d.ts","./frontend/components/ui/button.tsx","./app/page.tsx","./node_modules/.pnpm/lucide-react@0.510.0_react@19.1.0/node_modules/lucide-react/dist/lucide-react.d.ts","./node_modules/.pnpm/@radix-ui+react-context@1.1.2_@types+react@19.1.6_react@19.1.0/node_modules/@radix-ui/react-context/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-primitive@2.1.3_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react@19._5iu4xtybujtep4zwi6jviky6tu/node_modules/@radix-ui/react-primitive/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-dismissable-layer@1.1.10_@types+react-dom@19.1.6_@types+react@19.1.6__@types+_ipor64qsap4jnr6m7nflv4q5v4/node_modules/@radix-ui/react-dismissable-layer/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-arrow@1.1.7_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react@19.1.6__tqbcahbocnte57ax4r75bgnpei/node_modules/@radix-ui/react-arrow/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+rect@1.1.1/node_modules/@radix-ui/rect/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-popper@1.2.7_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react@19.1.6_2sktqq4blwmd3t7e5jqffehtuu/node_modules/@radix-ui/react-popper/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-portal@1.1.9_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react@19.1.6_sr45arufxpp6hzdn2l7kcrtvqe/node_modules/@radix-ui/react-portal/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-tooltip@1.2.7_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react@19.1._5ir5a6m3tihak5zrq6chikjyym/node_modules/@radix-ui/react-tooltip/dist/index.d.mts","./frontend/components/ui/tooltip.tsx","./frontend/components/withtooltip.tsx","./node_modules/.pnpm/@radix-ui+react-focus-scope@1.1.7_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react@1_zpdtvgogfsfavk62phevpdv4fu/node_modules/@radix-ui/react-focus-scope/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-dialog@1.1.14_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react@19.1._sjczexpvrqz6fttoobpwnns2oa/node_modules/@radix-ui/react-dialog/dist/index.d.mts","./node_modules/.pnpm/vaul@1.1.2_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react@19.1.6_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/vaul/dist/index.d.mts","./components/ui/drawer.tsx","./frontend/components/ui/dialog.tsx","./frontend/components/ui/input.tsx","./frontend/components/ui/copybutton.tsx","./node_modules/.pnpm/@radix-ui+react-switch@1.2.5_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react@19.1.6_vor7zkgzvss2tougnhfbmghpli/node_modules/@radix-ui/react-switch/dist/index.d.mts","./frontend/components/ui/switch.tsx","./node_modules/.pnpm/@radix-ui+react-label@2.1.7_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react@19.1.6__a5hm3akpfjy2hepxrptadu7t6e/node_modules/@radix-ui/react-label/dist/index.d.mts","./components/ui/label.tsx","./node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.d.ts","./node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/index.d.ts","./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/index.d.ts","./node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/index.d.ts","./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/callable-instance.d.ts","./node_modules/.pnpm/trough@2.2.0/node_modules/trough/lib/index.d.ts","./node_modules/.pnpm/trough@2.2.0/node_modules/trough/index.d.ts","./node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.d.ts","./node_modules/.pnpm/unified@11.0.5/node_modules/unified/index.d.ts","./node_modules/.pnpm/@types+mdast@4.0.4/node_modules/@types/mdast/index.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/state.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/footer.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/blockquote.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/break.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/code.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/delete.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/emphasis.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/heading.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/html.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image-reference.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/inline-code.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link-reference.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list-item.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/paragraph.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/root.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/strong.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-cell.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-row.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/text.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/index.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/index.d.ts","./node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/index.d.ts","./node_modules/.pnpm/remark-rehype@11.1.2/node_modules/remark-rehype/lib/index.d.ts","./node_modules/.pnpm/remark-rehype@11.1.2/node_modules/remark-rehype/index.d.ts","./node_modules/.pnpm/react-markdown@10.1.0_@types+react@19.1.6_react@19.1.0/node_modules/react-markdown/lib/index.d.ts","./node_modules/.pnpm/react-markdown@10.1.0_@types+react@19.1.6_react@19.1.0/node_modules/react-markdown/index.d.ts","./node_modules/.pnpm/micromark-util-types@2.0.2/node_modules/micromark-util-types/index.d.ts","./node_modules/.pnpm/micromark-extension-gfm-footnote@2.1.0/node_modules/micromark-extension-gfm-footnote/lib/html.d.ts","./node_modules/.pnpm/micromark-extension-gfm-footnote@2.1.0/node_modules/micromark-extension-gfm-footnote/lib/syntax.d.ts","./node_modules/.pnpm/micromark-extension-gfm-footnote@2.1.0/node_modules/micromark-extension-gfm-footnote/index.d.ts","./node_modules/.pnpm/micromark-extension-gfm-strikethrough@2.1.0/node_modules/micromark-extension-gfm-strikethrough/lib/html.d.ts","./node_modules/.pnpm/micromark-extension-gfm-strikethrough@2.1.0/node_modules/micromark-extension-gfm-strikethrough/lib/syntax.d.ts","./node_modules/.pnpm/micromark-extension-gfm-strikethrough@2.1.0/node_modules/micromark-extension-gfm-strikethrough/index.d.ts","./node_modules/.pnpm/micromark-extension-gfm@3.0.0/node_modules/micromark-extension-gfm/index.d.ts","./node_modules/.pnpm/mdast-util-from-markdown@2.0.2/node_modules/mdast-util-from-markdown/lib/types.d.ts","./node_modules/.pnpm/mdast-util-from-markdown@2.0.2/node_modules/mdast-util-from-markdown/lib/index.d.ts","./node_modules/.pnpm/mdast-util-from-markdown@2.0.2/node_modules/mdast-util-from-markdown/index.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/types.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/index.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/blockquote.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/break.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/code.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/definition.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/emphasis.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/heading.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/html.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/image.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/image-reference.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/inline-code.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/link.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/link-reference.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/list.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/list-item.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/paragraph.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/root.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/strong.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/text.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/index.d.ts","./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/index.d.ts","./node_modules/.pnpm/mdast-util-gfm-footnote@2.1.0/node_modules/mdast-util-gfm-footnote/lib/index.d.ts","./node_modules/.pnpm/mdast-util-gfm-footnote@2.1.0/node_modules/mdast-util-gfm-footnote/index.d.ts","./node_modules/.pnpm/markdown-table@3.0.4/node_modules/markdown-table/index.d.ts","./node_modules/.pnpm/mdast-util-gfm-table@2.0.0/node_modules/mdast-util-gfm-table/lib/index.d.ts","./node_modules/.pnpm/mdast-util-gfm-table@2.0.0/node_modules/mdast-util-gfm-table/index.d.ts","./node_modules/.pnpm/mdast-util-gfm@3.1.0/node_modules/mdast-util-gfm/lib/index.d.ts","./node_modules/.pnpm/mdast-util-gfm@3.1.0/node_modules/mdast-util-gfm/index.d.ts","./node_modules/.pnpm/remark-gfm@4.0.1/node_modules/remark-gfm/lib/index.d.ts","./node_modules/.pnpm/remark-gfm@4.0.1/node_modules/remark-gfm/index.d.ts","./node_modules/.pnpm/marked@15.0.12/node_modules/marked/lib/marked.d.ts","./node_modules/.pnpm/shiki@3.6.0/node_modules/shiki/dist/langs.d.mts","./node_modules/.pnpm/shiki@3.6.0/node_modules/shiki/dist/bundle-full.d.mts","./node_modules/.pnpm/@shikijs+core@3.6.0/node_modules/@shikijs/core/dist/types.d.mts","./node_modules/.pnpm/shiki@3.6.0/node_modules/shiki/dist/types.d.mts","./node_modules/.pnpm/oniguruma-to-es@4.3.3/node_modules/oniguruma-to-es/dist/esm/subclass.d.ts","./node_modules/.pnpm/oniguruma-to-es@4.3.3/node_modules/oniguruma-to-es/dist/esm/index.d.ts","./node_modules/.pnpm/@shikijs+engine-javascript@3.6.0/node_modules/@shikijs/engine-javascript/dist/shared/engine-javascript.cdednu-m.d.mts","./node_modules/.pnpm/@shikijs+engine-javascript@3.6.0/node_modules/@shikijs/engine-javascript/dist/engine-raw.d.mts","./node_modules/.pnpm/@shikijs+engine-javascript@3.6.0/node_modules/@shikijs/engine-javascript/dist/index.d.mts","./node_modules/.pnpm/@shikijs+engine-oniguruma@3.6.0/node_modules/@shikijs/engine-oniguruma/dist/chunk-index.d.d.mts","./node_modules/.pnpm/@shikijs+engine-oniguruma@3.6.0/node_modules/@shikijs/engine-oniguruma/dist/index.d.mts","./node_modules/.pnpm/shiki@3.6.0/node_modules/shiki/dist/index.d.mts","./node_modules/.pnpm/react-shiki@0.6.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/react-shiki/dist/index.d.ts","./node_modules/.pnpm/mdast-util-math@3.0.0/node_modules/mdast-util-math/lib/index.d.ts","./node_modules/.pnpm/mdast-util-math@3.0.0/node_modules/mdast-util-math/index.d.ts","./node_modules/.pnpm/remark-math@6.0.0/node_modules/remark-math/lib/index.d.ts","./node_modules/.pnpm/remark-math@6.0.0/node_modules/remark-math/index.d.ts","./node_modules/.pnpm/katex@0.16.22/node_modules/katex/types/katex.d.ts","./node_modules/.pnpm/rehype-katex@7.0.1/node_modules/rehype-katex/lib/index.d.ts","./node_modules/.pnpm/rehype-katex@7.0.1/node_modules/rehype-katex/index.d.ts","./frontend/components/memoizedmarkdown.tsx","./frontend/components/messagereasoning.tsx","./frontend/components/ui/messageloading.tsx","./frontend/components/quotebutton.tsx","./frontend/components/selectabletext.tsx","./frontend/components/quotedmessage.tsx","./frontend/components/chatpreview.tsx","./node_modules/.pnpm/use-debounce@10.0.5_react@19.1.0/node_modules/use-debounce/dist/usedebouncedcallback.d.ts","./node_modules/.pnpm/use-debounce@10.0.5_react@19.1.0/node_modules/use-debounce/dist/usedebounce.d.ts","./node_modules/.pnpm/use-debounce@10.0.5_react@19.1.0/node_modules/use-debounce/dist/usethrottledcallback.d.ts","./node_modules/.pnpm/use-debounce@10.0.5_react@19.1.0/node_modules/use-debounce/dist/index.d.ts","./frontend/components/chathistorydrawer.tsx","./frontend/components/chathistorybutton.tsx","./frontend/components/newchatbutton.tsx","./node_modules/.pnpm/@radix-ui+react-roving-focus@1.1.10_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react_g7ajeb2xgflky4nc3ccraxd5vi/node_modules/@radix-ui/react-roving-focus/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-tabs@1.1.12_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react@19.1.6__meefdns2wsioiw7ic3x35z3hx4/node_modules/@radix-ui/react-tabs/dist/index.d.mts","./components/ui/tabs.tsx","./node_modules/.pnpm/motion-utils@12.18.1/node_modules/motion-utils/dist/index.d.ts","./node_modules/.pnpm/motion-dom@12.18.1/node_modules/motion-dom/dist/index.d.ts","./node_modules/.pnpm/framer-motion@12.18.1_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/framer-motion/dist/types.d-b_qpevfk.d.ts","./node_modules/.pnpm/framer-motion@12.18.1_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/framer-motion/dist/types/index.d.ts","./frontend/components/ui/animated-tabs.tsx","./frontend/components/ui/card.tsx","./frontend/components/ui/badge.tsx","./frontend/components/ui/provider-icons.tsx","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/constants.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/utils/createsubject.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/types/events.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/types/path/common.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/types/path/eager.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/types/path/index.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/types/fieldarray.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/types/resolvers.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/types/form.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/types/utils.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/types/fields.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/types/errors.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/types/validator.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/types/controller.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/types/index.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/controller.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/form.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/logic/appenderrors.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/logic/createformcontrol.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/logic/index.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/usecontroller.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/usefieldarray.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/useform.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/useformcontext.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/useformstate.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/usewatch.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/utils/get.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/utils/set.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/utils/index.d.ts","./node_modules/.pnpm/react-hook-form@7.57.0_react@19.1.0/node_modules/react-hook-form/dist/index.d.ts","./node_modules/.pnpm/@hookform+resolvers@5.0.1_react-hook-form@7.57.0_react@19.1.0_/node_modules/@hookform/resolvers/zod/dist/zod.d.ts","./node_modules/.pnpm/@hookform+resolvers@5.0.1_react-hook-form@7.57.0_react@19.1.0_/node_modules/@hookform/resolvers/zod/dist/index.d.ts","./frontend/components/ui/custom-switch.tsx","./frontend/components/settingsdrawer.tsx","./frontend/components/settingsbutton.tsx","./frontend/components/dialogversionnavigation.tsx","./frontend/components/messagecontrols.tsx","./frontend/components/error.tsx","./frontend/components/errorboundary.tsx","./frontend/components/imagemodal.tsx","./frontend/components/ui/textarea.tsx","./frontend/components/messageeditor.tsx","./frontend/components/message.tsx","./node_modules/.pnpm/@types+react-window@1.8.8/node_modules/@types/react-window/index.d.ts","./node_modules/.pnpm/react-virtualized-auto-sizer@1.0.26_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/react-virtualized-auto-sizer/dist/declarations/src/vendor/detectelementresize.d.ts","./node_modules/.pnpm/react-virtualized-auto-sizer@1.0.26_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/react-virtualized-auto-sizer/dist/declarations/src/types.d.ts","./node_modules/.pnpm/react-virtualized-auto-sizer@1.0.26_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/react-virtualized-auto-sizer/dist/declarations/src/autosizer.d.ts","./node_modules/.pnpm/react-virtualized-auto-sizer@1.0.26_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/react-virtualized-auto-sizer/dist/declarations/src/index.d.ts","./node_modules/.pnpm/react-virtualized-auto-sizer@1.0.26_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/react-virtualized-auto-sizer/dist/react-virtualized-auto-sizer.cjs.default.d.ts","./node_modules/.pnpm/react-virtualized-auto-sizer@1.0.26_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/react-virtualized-auto-sizer/dist/react-virtualized-auto-sizer.cjs.d.mts","./frontend/components/virtualmessages.tsx","./node_modules/.pnpm/fast-deep-equal@3.1.3/node_modules/fast-deep-equal/index.d.ts","./frontend/components/messages.tsx","./frontend/components/scrolltobottombutton.tsx","./node_modules/.pnpm/@radix-ui+react-menu@2.1.15_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react@19.1.6__eixsjhoqggdqfq4enyvvrxu3nm/node_modules/@radix-ui/react-menu/dist/index.d.mts","./node_modules/.pnpm/@radix-ui+react-dropdown-menu@2.1.15_@types+react-dom@19.1.6_@types+react@19.1.6__@types+reac_aamgessc53ce2miagoqr7utyvy/node_modules/@radix-ui/react-dropdown-menu/dist/index.d.mts","./frontend/components/ui/dropdown-menu.tsx","./frontend/components/drawingcanvas.tsx","./frontend/components/recentfilesdropdown.tsx","./frontend/components/addactionsdropdown.tsx","./frontend/components/filepreview.tsx","./frontend/components/attachmentsbar.tsx","./frontend/components/ui/icons.tsx","./frontend/components/quotedisplay.tsx","./frontend/components/chatinput.tsx","./frontend/components/chatnavigationbars.tsx","./node_modules/.pnpm/usehooks-ts@3.1.1_react@19.1.0/node_modules/usehooks-ts/dist/index.d.ts","./frontend/components/chatview.tsx","./frontend/components/chat.tsx","./app/chat/page.tsx","./app/chat/[...slug]/page.tsx","./frontend/components/chathistorylist.tsx","./app/home/page.tsx","./app/share/[shareid]/page.tsx","./frontend/components/ui/skeleton.tsx","./frontend/components/chatinputskeleton.tsx","./frontend/components/keyprompt.tsx","./frontend/components/pageskeleton.tsx","./frontend/components/ui/themetoggler.tsx","./node_modules/.pnpm/@radix-ui+react-separator@1.1.7_@types+react-dom@19.1.6_@types+react@19.1.6__@types+react@19._v5c7fe2eicmnfbsit6liht3cja/node_modules/@radix-ui/react-separator/dist/index.d.mts","./frontend/components/ui/separator.tsx","./frontend/components/ui/sheet.tsx","./frontend/components/ui/sidebar.tsx","./node_modules/.pnpm/@types+estree@1.0.8/node_modules/@types/estree/index.d.ts","./node_modules/.pnpm/@types+eslint@9.6.1/node_modules/@types/eslint/use-at-your-own-risk.d.ts","./node_modules/.pnpm/@types+eslint@9.6.1/node_modules/@types/eslint/index.d.ts","./node_modules/.pnpm/@types+eslint-scope@3.7.7/node_modules/@types/eslint-scope/index.d.ts","./node_modules/.pnpm/@types+katex@0.16.7/node_modules/@types/katex/index.d.ts","./node_modules/.pnpm/@types+react-syntax-highlighter@15.5.13/node_modules/@types/react-syntax-highlighter/index.d.ts"],"fileIdsList":[[97,139,440,468,559,609],[97,139,468,559,609,611,613,667,678,703,704,705,706],[83,97,139,455,665,667,678,705,865,1096],[83,97,139,455,665,865,1096],[83,97,139,455,665,667,710,860,865,873,875,885,1061,1099],[83,97,139,472,862,864,865,866,867,868],[83,97,139,455,700,710,873],[83,97,139,444,455,665,678,860,873,875,1003,1007,1008,1025],[83,97,139,860,888],[83,97,139,860,895],[83,97,139,860,1018],[97,139,645,669,670,671,672,673,674,675,676,677],[97,139,624,645,666],[97,139,645,667],[97,139,624,668],[97,139,624,667,668],[97,139,645,668,678],[97,139,624,667,668,672],[97,139,624,645],[97,139,667,668],[97,139],[97,139,689,690,691],[83,97,139,746,873,875,1084,1085,1086],[83,97,139],[83,97,139,746,1087,1088],[83,97,139,700],[83,97,139,455,609,699,710,711,714,720,860,873,875,885,1015,1016,1062,1095],[83,97,139,860,873,875,885,1014],[83,97,139,455,665,667,678,699,710,860,873,875,884,889,890,891,892,894,896,1005,1009,1013],[83,97,139,455,665,667,678,710,860,873,875,884,891,1013],[83,97,139,455,609,665,667,678,701,702,703,705,712,713,714,715,716,718,728,745,746,769,860,873,875,891,1027,1068,1081,1084,1086,1089,1090,1091],[97,139,1102],[83,97,139,609,860],[83,97,139,455,665,667,678,705,860,873,875,1003,1004,1005,1007,1008],[83,97,139,609,665,667,678,702,705,710,712,714,718,746,747,860,1080,1092,1093,1094],[83,97,139,665,689,692,700],[97,139,455,665,667,678,705,860,873,875],[83,97,139,191,193,710,860,873,875],[97,139,875],[83,97,139,1065],[83,97,139,860,875],[83,97,139,875],[97,139,446,702,873,875],[83,97,139,875,938,981,982,995,999,1002],[83,97,139,432,455,609,701,702,710,712,860,873,875,891,896,1003,1004,1007,1008,1064,1066,1067,1069],[83,97,139,455,609,665,667,678,699,702,705,710,712,714,747,860,873,875,1063],[83,97,139,609,665,667,678,699,701,702,705,712,714,873,1068],[83,97,139,609,712,1005,1065,1070,1078,1079],[97,139,455,860,873,875,885],[83,97,139,699,716,717,721,863],[83,97,139,860,873,875],[83,97,139,718,860,873,875],[83,97,139,860],[83,97,139,701,746,860,873,875,1084],[83,97,139,710,718,723,745,1006],[83,97,139,860,873,875,885,1061],[83,97,139,555,699,700,701,702,703,710,715,716,860,861,873,875,889,890,891,894,896,1013,1019,1024,1025,1026,1027,1057,1059,1060],[83,97,139,860,1023],[83,97,139,860,870,872],[83,97,139,860,893],[83,97,139,860,875,887],[83,97,139,860,875,1083],[83,97,139,860,1107],[83,97,139,710,860,870,872,873,875,884,891,1102,1108,1109],[97,139,860],[97,139,701,861],[83,97,139,861],[83,97,139,861,873,875],[83,97,139,860,883],[97,139,724],[97,139,609,712,1070,1071,1077],[83,97,139,884],[97,139,665,667,678],[97,139,665,667,678,700],[97,139,665,667,678,701,702,712],[83,97,139,665,714,715,716],[83,97,139,665,678,715],[83,97,139,718],[83,97,139,699,700],[83,97,139,665,678],[83,97,139,455,665,678,702],[97,139,726],[83,97,139,616,665,678,700,701],[97,139,616,745],[97,139,616,689,692,699],[97,139,616],[97,139,616,698,703],[97,139,616,702,703],[83,97,139,616,665,678,698],[97,139,766],[97,139,854,855],[97,139,702],[97,139,555,609],[97,139,858,859],[97,139,472,473],[97,139,158],[97,139,555,557,558],[97,139,555,557],[97,139,556],[97,139,555,558,560],[97,139,555,556,557,558],[97,139,679,684,686],[97,139,679,687],[97,139,680,681,682,683],[97,139,682],[97,139,680,682,683],[97,139,681,682,683],[97,139,681],[97,139,685],[97,139,1058],[97,139,555,1057],[97,139,525,530],[97,139,173],[97,139,170,173,529,531],[97,139,170,528,530],[97,139,526,527,532,533,534,535],[97,139,530,531,537],[97,139,531],[97,139,536,538],[97,139,612],[97,139,567],[97,139,570],[97,139,575,577],[97,139,563,567,579,580],[97,139,590,593,599,601],[97,139,562,567],[97,139,561],[97,139,562],[97,139,569],[97,139,572],[97,139,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,602,603,604,605,606,607],[97,139,578],[97,139,574],[97,139,575],[97,139,566,567,573],[97,139,574,575],[97,139,581],[97,139,602],[97,139,566],[97,139,567,584,587],[97,139,583],[97,139,584],[97,139,582,584],[97,139,567,587,589,590,591],[97,139,590,591,593],[97,139,567,582,585,588,595],[97,139,582,583],[97,139,564,565,582,584,585,586],[97,139,584,587],[97,139,565,582,585,588],[97,139,567,587,589],[97,139,590,591],[83,97,139,877],[83,97,139,876,877,878,882,886],[83,97,139,876,877,1082],[83,97,139,876,877,878,881,882,886,1017],[83,97,139,876,877,879,880],[83,97,139,876,877],[83,97,139,876,877,1017],[83,97,139,876,877,878,881,882],[97,139,750,752,763,934],[97,139,751,752],[97,139,752],[97,139,751,752,988,989,990],[97,139,751,752,988],[97,139,992],[97,139,750,751,934],[97,139,833],[97,139,1111,1113],[97,139,556,1111,1112],[97,139,1113],[97,139,749],[97,136,139],[97,138,139],[139],[97,139,144,173],[97,139,140,145,151,152,159,170,181],[97,139,140,141,151,159],[92,93,94,97,139],[97,139,142,182],[97,139,143,144,152,160],[97,139,144,170,178],[97,139,145,147,151,159],[97,138,139,146],[97,139,147,148],[97,139,149,151],[97,138,139,151],[97,139,151,152,153,170,181],[97,139,151,152,153,166,170,173],[97,134,139],[97,139,147,151,154,159,170,181],[97,139,151,152,154,155,159,170,178,181],[97,139,154,156,170,178,181],[95,96,97,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187],[97,139,151,157],[97,139,158,181,186],[97,139,147,151,159,170],[97,139,160],[97,139,161],[97,138,139,162],[97,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187],[97,139,164],[97,139,165],[97,139,151,166,167],[97,139,166,168,182,184],[97,139,151,170,171,173],[97,139,172,173],[97,139,170,171],[97,139,174],[97,136,139,170],[97,139,151,176,177],[97,139,176,177],[97,139,144,159,170,178],[97,139,179],[97,139,159,180],[97,139,154,165,181],[97,139,144,182],[97,139,170,183],[97,139,158,184],[97,139,185],[97,139,151,153,162,170,173,181,184,186],[97,139,170,187],[97,139,188],[83,97,139,191,193],[83,87,97,139,189,190,191,192,416,464],[83,97,139,1116],[83,87,97,139,190,193,416,464],[83,87,97,139,189,193,416,464],[81,82,97,139],[97,139,774,775,778,843],[97,139,820,821],[97,139,775,776,778,779,780],[97,139,775],[97,139,775,776,778],[97,139,775,776],[97,139,827],[97,139,770,827,828],[97,139,770,827],[97,139,770,777],[97,139,771],[97,139,770,771,772,774],[97,139,770],[97,139,154,555,557,558,560,608],[97,139,858,871],[97,139,858],[97,139,626,647],[97,139,625,648,650,651,654,655,656],[97,139,624,625],[97,139,645,653,657],[97,139,626,650,652],[97,139,624,625,626,648,649,650,651,653],[97,139,624],[97,139,624,650,651],[97,139,624,647],[97,139,624,627,649],[97,139,645,665],[83,97,139,624,626,646,647,650,654,657],[83,97,139,654],[97,139,647],[97,139,654,658,659,661,662,663,664],[97,139,624,647,650,659],[97,139,618,624,645,647,657],[97,139,624,647,660],[97,139,618,631,646],[97,139,642,646,647],[97,139,624,639,647],[97,139,624,628,633,634,635],[97,139,624,628],[97,139,628,646],[97,139,618,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,643,644,646,647],[97,139,628],[97,139,619],[97,139,628,629,630,631,632],[97,139,617,618,619,620,628,639,644,645,647],[97,139,646],[97,139,617,647],[97,139,618,619,620,628,634],[97,139,618,624,628],[97,139,617,628],[97,139,617],[97,139,617,619,620,621,622,623],[97,139,618,619,624],[97,139,617,620,624],[97,139,849,850],[97,139,849,850,851,852],[97,139,849,851],[97,139,849],[97,139,687],[97,139,688],[83,97,139,265,1020,1021],[83,97,139,265,1020,1021,1022],[97,139,762],[97,139,750,756,761,934],[97,139,812,813],[97,139,939,942,945,947,948,949],[97,139,906,934,939,942,945,947,949,997],[97,139,906,934,939,942,945,949,997],[97,139,972,973,977,997],[97,139,949,972,974,977,997],[97,139,949,972,974,976,997],[97,139,906,934,949,972,974,975,977,997],[97,139,974,977,978],[97,139,949,972,974,977,979,997],[97,139,906,934,949,972,974,977,996,997],[97,139,750,934,949,972,974,977,997],[97,139,750,906,907,908,932,933,934,997],[97,139,750,907,934],[97,139,750,906,907,934,997],[97,139,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931],[97,139,750,900,906,908,934,997],[97,139,950,951,971],[97,139,906,934,972,974,977,997],[97,139,906,934,997],[97,139,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970],[97,139,749,906,934,997],[97,139,939,940,941,945,949],[97,139,939,942,945,949],[97,139,939,942,943,944,949],[97,139,151,154,170,173,181,509,510,523,524],[97,139,1020],[89,97,139],[97,139,420],[97,139,422,423,424,425],[97,139,427],[97,139,197,211,212,213,215,379],[97,139,197,201,203,204,205,206,207,368,379,381],[97,139,379],[97,139,212,231,348,357,375],[97,139,197],[97,139,194],[97,139,399],[97,139,379,381,398],[97,139,302,345,348,470],[97,139,312,327,357,374],[97,139,262],[97,139,362],[97,139,361,362,363],[97,139,361],[91,97,139,154,194,197,201,204,208,209,210,212,216,224,225,296,358,359,379,416],[97,139,197,214,251,299,379,395,396,470],[97,139,214,470],[97,139,225,299,300,379,470],[97,139,470],[97,139,197,214,215,470],[97,139,208,360,367],[97,139,165,265,375],[97,139,265,375],[83,97,139,265],[83,97,139,265,319],[97,139,242,260,375,453],[97,139,354,447,448,449,450,452],[97,139,265],[97,139,353],[97,139,353,354],[97,139,205,239,240,297],[97,139,241,242,297],[97,139,451],[97,139,242,297],[83,97,139,198,441],[83,97,139,181],[83,97,139,214,249],[83,97,139,214],[97,139,247,252],[83,97,139,248,419],[83,87,97,139,154,188,189,190,193,416,462,463],[97,139,154],[97,139,154,201,231,267,286,297,364,365,379,380,470],[97,139,224,366],[97,139,416],[97,139,196],[83,97,139,302,316,326,336,338,374],[97,139,165,302,316,335,336,337,374],[97,139,329,330,331,332,333,334],[97,139,331],[97,139,335],[83,97,139,248,265,419],[83,97,139,265,417,419],[83,97,139,265,419],[97,139,286,371],[97,139,371],[97,139,154,380,419],[97,139,323],[97,138,139,322],[97,139,226,230,237,268,297,309,311,312,313,315,347,374,377,380],[97,139,314],[97,139,226,242,297,309],[97,139,312,374],[97,139,312,319,320,321,323,324,325,326,327,328,339,340,341,342,343,344,374,375,470],[97,139,307],[97,139,154,165,226,230,231,236,238,242,272,286,295,296,347,370,379,380,381,416,470],[97,139,374],[97,138,139,212,230,296,309,310,370,372,373,380],[97,139,312],[97,138,139,236,268,289,303,304,305,306,307,308,311,374,375],[97,139,154,289,290,303,380,381],[97,139,212,286,296,297,309,370,374,380],[97,139,154,379,381],[97,139,154,170,377,380,381],[97,139,154,165,181,194,201,214,226,230,231,237,238,243,267,268,269,271,272,275,276,278,281,282,283,284,285,297,369,370,375,377,379,380,381],[97,139,154,170],[97,139,197,198,199,209,377,378,416,419,470],[97,139,154,170,181,228,397,399,400,401,402,470],[97,139,165,181,194,228,231,268,269,276,286,294,297,370,375,377,382,383,389,395,412,413],[97,139,208,209,224,296,359,370,379],[97,139,154,181,198,201,268,377,379,387],[97,139,301],[97,139,154,409,410,411],[97,139,377,379],[97,139,309,310],[97,139,230,268,369,419],[97,139,154,165,276,286,377,383,389,391,395,412,415],[97,139,154,208,224,395,405],[97,139,197,243,369,379,407],[97,139,154,214,243,379,390,391,403,404,406,408],[91,97,139,226,229,230,416,419],[97,139,154,165,181,201,208,216,224,231,237,238,268,269,271,272,284,286,294,297,369,370,375,376,377,382,383,384,386,388,419],[97,139,154,170,208,377,389,409,414],[97,139,219,220,221,222,223],[97,139,275,277],[97,139,279],[97,139,277],[97,139,279,280],[97,139,154,201,236,380],[97,139,154,165,196,198,226,230,231,237,238,264,266,377,381,416,419],[97,139,154,165,181,200,205,268,376,380],[97,139,303],[97,139,304],[97,139,305],[97,139,375],[97,139,227,234],[97,139,154,201,227,237],[97,139,233,234],[97,139,235],[97,139,227,228],[97,139,227,244],[97,139,227],[97,139,274,275,376],[97,139,273],[97,139,228,375,376],[97,139,270,376],[97,139,228,375],[97,139,347],[97,139,229,232,237,268,297,302,309,316,318,346,377,380],[97,139,242,253,256,257,258,259,260,317],[97,139,356],[97,139,212,229,230,290,297,312,323,327,349,350,351,352,354,355,358,369,374,379],[97,139,242],[97,139,264],[97,139,154,229,237,245,261,263,267,377,416,419],[97,139,242,253,254,255,256,257,258,259,260,417],[97,139,228],[97,139,290,291,294,370],[97,139,154,275,379],[97,139,289,312],[97,139,288],[97,139,284,290],[97,139,287,289,379],[97,139,154,200,290,291,292,293,379,380],[83,97,139,239,241,297],[97,139,298],[83,97,139,198],[83,97,139,375],[83,91,97,139,230,238,416,419],[97,139,198,441,442],[83,97,139,252],[83,97,139,165,181,196,246,248,250,251,419],[97,139,214,375,380],[97,139,375,385],[83,97,139,152,154,165,196,252,299,416,417,418],[83,97,139,189,190,193,416,464],[83,84,85,86,87,97,139],[97,139,144],[97,139,392,393,394],[97,139,392],[83,87,97,139,154,156,165,188,189,190,191,193,194,196,272,335,381,415,419,464],[97,139,429],[97,139,431],[97,139,433],[97,139,435],[97,139,437,438,439],[97,139,443],[88,90,97,139,421,426,428,430,432,434,436,440,444,446,455,456,458,468,469,470,471],[97,139,445],[97,139,454],[97,139,248],[97,139,457],[97,138,139,290,291,292,294,326,375,459,460,461,464,465,466,467],[97,139,987],[97,139,807],[97,139,805,807],[97,139,796,804,805,806,808],[97,139,794],[97,139,797,802,807,810],[97,139,793,810],[97,139,797,798,801,802,803,810],[97,139,797,798,799,801,802,810],[97,139,794,795,796,797,798,802,803,804,806,807,808,810],[97,139,810],[97,139,792,794,795,796,797,798,799,801,802,803,804,805,806,807,808,809],[97,139,792,810],[97,139,797,799,800,802,803,810],[97,139,801,810],[97,139,802,803,807,810],[97,139,795,805],[97,139,758,759,760],[97,139,757,761],[97,139,761],[83,97,139,1042],[97,139,1042,1043,1044,1047,1048,1049,1050,1051,1052,1053,1056],[97,139,1042],[97,139,1045,1046],[83,97,139,1040,1042],[97,139,1037,1038,1040],[97,139,1033,1036,1038,1040],[97,139,1037,1040],[83,97,139,1028,1029,1030,1033,1034,1035,1037,1038,1039,1040],[97,139,1030,1033,1034,1035,1036,1037,1038,1039,1040,1041],[97,139,1037],[97,139,1031,1037,1038],[97,139,1031,1032],[97,139,1036,1038,1039],[97,139,1036],[97,139,1028,1033,1038,1039],[97,139,1054,1055],[97,139,937],[83,97,139,750,905,934,936],[83,97,139,750,934,994],[83,97,139,1072,1073],[97,139,1073,1074],[97,139,1075,1076],[97,139,1075],[97,139,1001],[97,139,750,900,934,1000],[97,139,946,979,980],[97,139,981],[97,139,998],[97,139,905,906,934,997],[97,139,934,935],[97,139,750,900,905,906,934,997],[97,139,785,818,819],[97,139,784,785],[97,139,170,188],[97,139,750,752,764,765,934,983],[97,139,750,752,764,765,934],[97,139,750,752,764,765,934,983,984,985,986,991,993],[97,139,764],[97,139,752,764,765,983,985],[97,139,755],[97,139,753],[97,139,753,754],[97,139,773],[97,139,902],[97,106,110,139,181],[97,106,139,170,181],[97,101,139],[97,103,106,139,178,181],[97,139,159,178],[97,101,139,188],[97,103,106,139,159,181],[97,98,99,102,105,139,151,170,181],[97,106,113,139],[97,98,104,139],[97,106,127,128,139],[97,102,106,139,173,181,188],[97,127,139,188],[97,100,101,139,188],[97,106,139],[97,100,101,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,133,139],[97,106,121,139],[97,106,113,114,139],[97,104,106,114,115,139],[97,105,139],[97,98,101,106,139],[97,106,110,114,115,139],[97,110,139],[97,104,106,109,139,181],[97,98,103,106,113,139],[97,139,170],[97,101,106,127,139,186,188],[97,139,508],[97,139,181,484,488],[97,139,170,181,484],[97,139,479],[97,139,178,181,481,484],[97,139,188,479],[97,139,159,181,481,484],[97,139,151,170,181,476,477,480,483],[97,139,476,482],[97,139,173,181,188,480,484],[97,139,188,501],[97,139,188,478,479],[97,139,484],[97,139,478,479,480,481,482,483,484,485,486,488,489,490,491,492,493,494,495,496,497,498,499,500,502,503,504,505,506,507],[97,139,484,491,492],[97,139,482,484,492,493],[97,139,483],[97,139,476,479,484],[97,139,484,488,492,493],[97,139,488],[97,139,181,482,484,487],[97,139,476,481,482,484,488,491],[97,139,186,188,479,484,501],[97,139,900,904],[97,139,749,900,901,903,905],[97,139,1010,1011,1012],[97,139,1010],[97,139,729,730,731,732,733,734,735,737,738,739,740,741,742,743,744],[97,139,729],[97,139,729,736],[83,97,139,887],[97,139,897],[97,139,898,899],[97,139,749,898,900],[97,139,824,825],[97,139,824],[97,139,151,152,154,155,156,159,170,178,181,187,188,525,785,786,787,788,790,791,811,815,816,817,818,819],[97,139,787,788,789,790],[97,139,787],[97,139,788],[97,139,814],[97,139,785,819],[97,139,781,835,836,845],[97,139,770,778,781,829,830,845],[97,139,838],[97,139,782],[97,139,770,781,783,829,837,844,845],[97,139,822],[97,139,142,152,170,770,775,778,781,783,819,822,823,826,829,831,832,834,837,839,840,845,846],[97,139,781,835,836,837,845],[97,139,819,841,846],[97,139,186,832],[97,139,781,783,826,829,831,845],[97,139,142,152,170,186,770,775,778,781,782,783,819,822,823,826,829,830,831,832,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,853],[97,139,151,509,524,525],[97,139,522],[97,139,513,514],[97,139,511,512,513,515,516,520],[97,139,512,513],[97,139,521],[97,139,513],[97,139,511,512,513,516,517,518,519],[97,139,511,512,522],[97,139,554],[97,139,544,545],[97,139,542,543,544,546,547,552],[97,139,543,544],[97,139,552],[97,139,553],[97,139,544],[97,139,542,543,544,547,548,549,550,551],[97,139,542,543,554],[97,139,614,615,693,694,695,697],[97,139,693,694,695,696,697],[97,139,614,693,694,695,697],[97,139,539]],"fileInfos":[{"version":"69684132aeb9b5642cbcd9e22dff7818ff0ee1aa831728af0ecf97d3364d5546","affectsGlobalScope":true,"impliedFormat":1},{"version":"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","impliedFormat":1},{"version":"3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","impliedFormat":1},{"version":"e44bb8bbac7f10ecc786703fe0a6a4b952189f908707980ba8f3c8975a760962","impliedFormat":1},{"version":"5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","impliedFormat":1},{"version":"68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","impliedFormat":1},{"version":"5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","impliedFormat":1},{"version":"feecb1be483ed332fad555aff858affd90a48ab19ba7272ee084704eb7167569","impliedFormat":1},{"version":"ee7bad0c15b58988daa84371e0b89d313b762ab83cb5b31b8a2d1162e8eb41c2","impliedFormat":1},{"version":"27bdc30a0e32783366a5abeda841bc22757c1797de8681bbe81fbc735eeb1c10","impliedFormat":1},{"version":"8fd575e12870e9944c7e1d62e1f5a73fcf23dd8d3a321f2a2c74c20d022283fe","impliedFormat":1},{"version":"8bf8b5e44e3c9c36f98e1007e8b7018c0f38d8adc07aecef42f5200114547c70","impliedFormat":1},{"version":"092c2bfe125ce69dbb1223c85d68d4d2397d7d8411867b5cc03cec902c233763","affectsGlobalScope":true,"impliedFormat":1},{"version":"07f073f19d67f74d732b1adea08e1dc66b1b58d77cb5b43931dee3d798a2fd53","affectsGlobalScope":true,"impliedFormat":1},{"version":"c57796738e7f83dbc4b8e65132f11a377649c00dd3eee333f672b8f0a6bea671","affectsGlobalScope":true,"impliedFormat":1},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true,"impliedFormat":1},{"version":"515d0b7b9bea2e31ea4ec968e9edd2c39d3eebf4a2d5cbd04e88639819ae3b71","affectsGlobalScope":true,"impliedFormat":1},{"version":"0559b1f683ac7505ae451f9a96ce4c3c92bdc71411651ca6ddb0e88baaaad6a3","affectsGlobalScope":true,"impliedFormat":1},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true,"impliedFormat":1},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true,"impliedFormat":1},{"version":"936e80ad36a2ee83fc3caf008e7c4c5afe45b3cf3d5c24408f039c1d47bdc1df","affectsGlobalScope":true,"impliedFormat":1},{"version":"d15bea3d62cbbdb9797079416b8ac375ae99162a7fba5de2c6c505446486ac0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"68d18b664c9d32a7336a70235958b8997ebc1c3b8505f4f1ae2b7e7753b87618","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb3d66c8327153d8fa7dd03f9c58d351107fe824c79e9b56b462935176cdf12a","affectsGlobalScope":true,"impliedFormat":1},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true,"impliedFormat":1},{"version":"69ab18c3b76cd9b1be3d188eaf8bba06112ebbe2f47f6c322b5105a6fbc45a2e","affectsGlobalScope":true,"impliedFormat":1},{"version":"fef8cfad2e2dc5f5b3d97a6f4f2e92848eb1b88e897bb7318cef0e2820bceaab","affectsGlobalScope":true,"impliedFormat":1},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true,"impliedFormat":1},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true,"impliedFormat":1},{"version":"954296b30da6d508a104a3a0b5d96b76495c709785c1d11610908e63481ee667","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac9538681b19688c8eae65811b329d3744af679e0bdfa5d842d0e32524c73e1c","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a969edff4bd52585473d24995c5ef223f6652d6ef46193309b3921d65dd4376","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true,"impliedFormat":1},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true,"impliedFormat":1},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true,"impliedFormat":1},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true,"impliedFormat":1},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true,"impliedFormat":1},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true,"impliedFormat":1},{"version":"d6d7ae4d1f1f3772e2a3cde568ed08991a8ae34a080ff1151af28b7f798e22ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true,"impliedFormat":1},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true,"impliedFormat":1},{"version":"52ada8e0b6e0482b728070b7639ee42e83a9b1c22d205992756fe020fd9f4a47","affectsGlobalScope":true,"impliedFormat":1},{"version":"3bdefe1bfd4d6dee0e26f928f93ccc128f1b64d5d501ff4a8cf3c6371200e5e6","affectsGlobalScope":true,"impliedFormat":1},{"version":"59fb2c069260b4ba00b5643b907ef5d5341b167e7d1dbf58dfd895658bda2867","affectsGlobalScope":true,"impliedFormat":1},{"version":"639e512c0dfc3fad96a84caad71b8834d66329a1f28dc95e3946c9b58176c73a","affectsGlobalScope":true,"impliedFormat":1},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true,"impliedFormat":1},{"version":"af3dd424cf267428f30ccfc376f47a2c0114546b55c44d8c0f1d57d841e28d74","affectsGlobalScope":true,"impliedFormat":1},{"version":"995c005ab91a498455ea8dfb63aa9f83fa2ea793c3d8aa344be4a1678d06d399","affectsGlobalScope":true,"impliedFormat":1},{"version":"959d36cddf5e7d572a65045b876f2956c973a586da58e5d26cde519184fd9b8a","affectsGlobalScope":true,"impliedFormat":1},{"version":"965f36eae237dd74e6cca203a43e9ca801ce38824ead814728a2807b1910117d","affectsGlobalScope":true,"impliedFormat":1},{"version":"3925a6c820dcb1a06506c90b1577db1fdbf7705d65b62b99dce4be75c637e26b","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a3d63ef2b853447ec4f749d3f368ce642264246e02911fcb1590d8c161b8005","affectsGlobalScope":true,"impliedFormat":1},{"version":"b5ce7a470bc3628408429040c4e3a53a27755022a32fd05e2cb694e7015386c7","affectsGlobalScope":true,"impliedFormat":1},{"version":"8444af78980e3b20b49324f4a16ba35024fef3ee069a0eb67616ea6ca821c47a","affectsGlobalScope":true,"impliedFormat":1},{"version":"3287d9d085fbd618c3971944b65b4be57859f5415f495b33a6adc994edd2f004","affectsGlobalScope":true,"impliedFormat":1},{"version":"b4b67b1a91182421f5df999988c690f14d813b9850b40acd06ed44691f6727ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"df83c2a6c73228b625b0beb6669c7ee2a09c914637e2d35170723ad49c0f5cd4","affectsGlobalScope":true,"impliedFormat":1},{"version":"436aaf437562f276ec2ddbee2f2cdedac7664c1e4c1d2c36839ddd582eeb3d0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e3c06ea092138bf9fa5e874a1fdbc9d54805d074bee1de31b99a11e2fec239d","affectsGlobalScope":true,"impliedFormat":1},{"version":"87dc0f382502f5bbce5129bdc0aea21e19a3abbc19259e0b43ae038a9fc4e326","affectsGlobalScope":true,"impliedFormat":1},{"version":"b1cb28af0c891c8c96b2d6b7be76bd394fddcfdb4709a20ba05a7c1605eea0f9","affectsGlobalScope":true,"impliedFormat":1},{"version":"2fef54945a13095fdb9b84f705f2b5994597640c46afeb2ce78352fab4cb3279","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac77cb3e8c6d3565793eb90a8373ee8033146315a3dbead3bde8db5eaf5e5ec6","affectsGlobalScope":true,"impliedFormat":1},{"version":"56e4ed5aab5f5920980066a9409bfaf53e6d21d3f8d020c17e4de584d29600ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ece9f17b3866cc077099c73f4983bddbcb1dc7ddb943227f1ec070f529dedd1","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a6282c8827e4b9a95f4bf4f5c205673ada31b982f50572d27103df8ceb8013c","affectsGlobalScope":true,"impliedFormat":1},{"version":"1c9319a09485199c1f7b0498f2988d6d2249793ef67edda49d1e584746be9032","affectsGlobalScope":true,"impliedFormat":1},{"version":"e3a2a0cee0f03ffdde24d89660eba2685bfbdeae955a6c67e8c4c9fd28928eeb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811c71eee4aa0ac5f7adf713323a5c41b0cf6c4e17367a34fbce379e12bbf0a4","affectsGlobalScope":true,"impliedFormat":1},{"version":"51ad4c928303041605b4d7ae32e0c1ee387d43a24cd6f1ebf4a2699e1076d4fa","affectsGlobalScope":true,"impliedFormat":1},{"version":"60037901da1a425516449b9a20073aa03386cce92f7a1fd902d7602be3a7c2e9","affectsGlobalScope":true,"impliedFormat":1},{"version":"d4b1d2c51d058fc21ec2629fff7a76249dec2e36e12960ea056e3ef89174080f","affectsGlobalScope":true,"impliedFormat":1},{"version":"22adec94ef7047a6c9d1af3cb96be87a335908bf9ef386ae9fd50eeb37f44c47","affectsGlobalScope":true,"impliedFormat":1},{"version":"4245fee526a7d1754529d19227ecbf3be066ff79ebb6a380d78e41648f2f224d","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e7f8264d0fb4c5339605a15daadb037bf238c10b654bb3eee14208f860a32ea","affectsGlobalScope":true,"impliedFormat":1},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true,"impliedFormat":1},{"version":"170d4db14678c68178ee8a3d5a990d5afb759ecb6ec44dbd885c50f6da6204f6","affectsGlobalScope":true,"impliedFormat":1},{"version":"8a8eb4ebffd85e589a1cc7c178e291626c359543403d58c9cd22b81fab5b1fb9","impliedFormat":1},{"version":"9e83685e23baf56b50eab5f89bcc46c66ccd709c4a44d32e635040196ad96603","impliedFormat":1},{"version":"acd8fd5090ac73902278889c38336ff3f48af6ba03aa665eb34a75e7ba1dccc4","impliedFormat":1},{"version":"d6258883868fb2680d2ca96bc8b1352cab69874581493e6d52680c5ffecdb6cc","impliedFormat":1},{"version":"1b61d259de5350f8b1e5db06290d31eaebebc6baafd5f79d314b5af9256d7153","impliedFormat":1},{"version":"f258e3960f324a956fc76a3d3d9e964fff2244ff5859dcc6ce5951e5413ca826","impliedFormat":1},{"version":"643f7232d07bf75e15bd8f658f664d6183a0efaca5eb84b48201c7671a266979","impliedFormat":1},{"version":"0f6666b58e9276ac3a38fdc80993d19208442d6027ab885580d93aec76b4ef00","impliedFormat":1},{"version":"05fd364b8ef02fb1e174fbac8b825bdb1e5a36a016997c8e421f5fab0a6da0a0","impliedFormat":1},{"version":"631eff75b0e35d1b1b31081d55209abc43e16b49426546ab5a9b40bdd40b1f60","impliedFormat":1},{"version":"70521b6ab0dcba37539e5303104f29b721bfb2940b2776da4cc818c07e1fefc1","affectsGlobalScope":true,"impliedFormat":1},{"version":"ab41ef1f2cdafb8df48be20cd969d875602483859dc194e9c97c8a576892c052","affectsGlobalScope":true,"impliedFormat":1},{"version":"d153a11543fd884b596587ccd97aebbeed950b26933ee000f94009f1ab142848","affectsGlobalScope":true,"impliedFormat":1},{"version":"21d819c173c0cf7cc3ce57c3276e77fd9a8a01d35a06ad87158781515c9a438a","impliedFormat":1},{"version":"a79e62f1e20467e11a904399b8b18b18c0c6eea6b50c1168bf215356d5bebfaf","affectsGlobalScope":true,"impliedFormat":1},{"version":"49a5a44f2e68241a1d2bd9ec894535797998841c09729e506a7cbfcaa40f2180","affectsGlobalScope":true,"impliedFormat":1},{"version":"5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","impliedFormat":1},{"version":"763fe0f42b3d79b440a9b6e51e9ba3f3f91352469c1e4b3b67bfa4ff6352f3f4","impliedFormat":1},{"version":"25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","impliedFormat":1},{"version":"c464d66b20788266e5353b48dc4aa6bc0dc4a707276df1e7152ab0c9ae21fad8","impliedFormat":1},{"version":"78d0d27c130d35c60b5e5566c9f1e5be77caf39804636bc1a40133919a949f21","impliedFormat":1},{"version":"c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","impliedFormat":1},{"version":"1d6e127068ea8e104a912e42fc0a110e2aa5a66a356a917a163e8cf9a65e4a75","impliedFormat":1},{"version":"5ded6427296cdf3b9542de4471d2aa8d3983671d4cac0f4bf9c637208d1ced43","impliedFormat":1},{"version":"7f182617db458e98fc18dfb272d40aa2fff3a353c44a89b2c0ccb3937709bfb5","impliedFormat":1},{"version":"cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","impliedFormat":1},{"version":"385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","impliedFormat":1},{"version":"9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","impliedFormat":1},{"version":"0b8a9268adaf4da35e7fa830c8981cfa22adbbe5b3f6f5ab91f6658899e657a7","impliedFormat":1},{"version":"11396ed8a44c02ab9798b7dca436009f866e8dae3c9c25e8c1fbc396880bf1bb","impliedFormat":1},{"version":"ba7bc87d01492633cb5a0e5da8a4a42a1c86270e7b3d2dea5d156828a84e4882","impliedFormat":1},{"version":"4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","impliedFormat":1},{"version":"c21dc52e277bcfc75fac0436ccb75c204f9e1b3fa5e12729670910639f27343e","impliedFormat":1},{"version":"13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","impliedFormat":1},{"version":"9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","impliedFormat":1},{"version":"4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","impliedFormat":1},{"version":"24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","impliedFormat":1},{"version":"ea0148f897b45a76544ae179784c95af1bd6721b8610af9ffa467a518a086a43","impliedFormat":1},{"version":"24c6a117721e606c9984335f71711877293a9651e44f59f3d21c1ea0856f9cc9","impliedFormat":1},{"version":"dd3273ead9fbde62a72949c97dbec2247ea08e0c6952e701a483d74ef92d6a17","impliedFormat":1},{"version":"405822be75ad3e4d162e07439bac80c6bcc6dbae1929e179cf467ec0b9ee4e2e","impliedFormat":1},{"version":"0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","impliedFormat":1},{"version":"e61be3f894b41b7baa1fbd6a66893f2579bfad01d208b4ff61daef21493ef0a8","impliedFormat":1},{"version":"bd0532fd6556073727d28da0edfd1736417a3f9f394877b6d5ef6ad88fba1d1a","impliedFormat":1},{"version":"89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","impliedFormat":1},{"version":"615ba88d0128ed16bf83ef8ccbb6aff05c3ee2db1cc0f89ab50a4939bfc1943f","impliedFormat":1},{"version":"a4d551dbf8746780194d550c88f26cf937caf8d56f102969a110cfaed4b06656","impliedFormat":1},{"version":"8bd86b8e8f6a6aa6c49b71e14c4ffe1211a0e97c80f08d2c8cc98838006e4b88","impliedFormat":1},{"version":"317e63deeb21ac07f3992f5b50cdca8338f10acd4fbb7257ebf56735bf52ab00","impliedFormat":1},{"version":"4732aec92b20fb28c5fe9ad99521fb59974289ed1e45aecb282616202184064f","impliedFormat":1},{"version":"2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","impliedFormat":1},{"version":"c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","impliedFormat":1},{"version":"bf67d53d168abc1298888693338cb82854bdb2e69ef83f8a0092093c2d562107","impliedFormat":1},{"version":"1ca84b44ad1d8e4576f24904d8b95dd23b94ea67e1575f89614ac90062fc67f4","affectsGlobalScope":true,"impliedFormat":1},{"version":"6b042aa5d277ad6963e2837179fd2f8fbb01968ac67115b0833c0244e93d1d50","impliedFormat":1},{"version":"7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","impliedFormat":1},{"version":"8c0bcd6c6b67b4b503c11e91a1fb91522ed585900eab2ab1f61bba7d7caa9d6f","impliedFormat":1},{"version":"9e025aa38cad40827cc30aca974fe33fe2c4652fe8c88f48dadbbbd6300c8b07","affectsGlobalScope":true,"impliedFormat":1},{"version":"f3e58c4c18a031cbb17abec7a4ad0bd5ae9fc70c1f4ba1e7fb921ad87c504aca","impliedFormat":1},{"version":"84c1930e33d1bb12ad01bcbe11d656f9646bd21b2fb2afd96e8e10615a021aef","impliedFormat":1},{"version":"35ec8b6760fd7138bbf5809b84551e31028fb2ba7b6dc91d95d098bf212ca8b4","affectsGlobalScope":true,"impliedFormat":1},{"version":"5524481e56c48ff486f42926778c0a3cce1cc85dc46683b92b1271865bcf015a","impliedFormat":1},{"version":"4b87f767c7bc841511113c876a6b8bf1fd0cb0b718c888ad84478b372ec486b1","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d04e3640dd9eb67f7f1e5bd3d0bf96c784666f7aefc8ac1537af6f2d38d4c29","impliedFormat":1},{"version":"9d19808c8c291a9010a6c788e8532a2da70f811adb431c97520803e0ec649991","impliedFormat":1},{"version":"5a369483ac4cfbdf0331c248deeb36140e6907db5e1daed241546b4a2055f82c","impliedFormat":1},{"version":"e8f5b5cc36615c17d330eaf8eebbc0d6bdd942c25991f96ef122f246f4ff722f","impliedFormat":1},{"version":"f0bd7e6d931657b59605c44112eaf8b980ba7f957a5051ed21cb93d978cf2f45","impliedFormat":1},{"version":"71450bbc2d82821d24ca05699a533e72758964e9852062c53b30f31c36978ab8","affectsGlobalScope":true,"impliedFormat":1},{"version":"0ada07543808f3b967624645a8e1ccd446f8b01ade47842acf1328aec899fed0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4c21aaa8257d7950a5b75a251d9075b6a371208fc948c9c8402f6690ef3b5b55","impliedFormat":1},{"version":"b5895e6353a5d708f55d8685c38a235c3a6d8138e374dee8ceb8ffde5aa8002a","impliedFormat":1},{"version":"5b75ca915164e4a7ad94a60729fe45b8a62e7750ab232d0122f8ccdd768f5314","impliedFormat":1},{"version":"de735eca2c51dd8b860254e9fdb6d9ec19fe402dfe597c23090841ce3937cfc5","impliedFormat":1},{"version":"4ff41188773cbf465807dd2f7059c7494cbee5115608efc297383832a1150c43","impliedFormat":1},{"version":"5650cf3dace09e7c25d384e3e6b818b938f68f4e8de96f52d9c5a1b3db068e86","impliedFormat":1},{"version":"1354ca5c38bd3fd3836a68e0f7c9f91f172582ba30ab15bb8c075891b91502b7","affectsGlobalScope":true,"impliedFormat":1},{"version":"5155da3047ef977944d791a2188ff6e6c225f6975cc1910ab7bb6838ab84cede","impliedFormat":1},{"version":"93f437e1398a4f06a984f441f7fa7a9f0535c04399619b5c22e0b87bdee182cb","impliedFormat":1},{"version":"afbe24ab0d74694372baa632ecb28bb375be53f3be53f9b07ecd7fc994907de5","impliedFormat":1},{"version":"e16d218a30f6a6810b57f7e968124eaa08c7bb366133ea34bbf01e7cd6b8c0ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb8692dea24c27821f77e397272d9ed2eda0b95e4a75beb0fdda31081d15a8ae","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e043a1bc8fbf2a255bccf9bf27e0f1caf916c3b0518ea34aa72357c0afd42ec","impliedFormat":1},{"version":"b4f70ec656a11d570e1a9edce07d118cd58d9760239e2ece99306ee9dfe61d02","impliedFormat":1},{"version":"3bc2f1e2c95c04048212c569ed38e338873f6a8593930cf5a7ef24ffb38fc3b6","impliedFormat":1},{"version":"8145e07aad6da5f23f2fcd8c8e4c5c13fb26ee986a79d03b0829b8fce152d8b2","impliedFormat":1},{"version":"f9d9d753d430ed050dc1bf2667a1bab711ccbb1c1507183d794cc195a5b085cc","impliedFormat":1},{"version":"9eece5e586312581ccd106d4853e861aaaa1a39f8e3ea672b8c3847eedd12f6e","impliedFormat":1},{"version":"5b6844ad931dcc1d3aca53268f4bd671428421464b1286746027aede398094f2","impliedFormat":1},{"version":"37ba7b45141a45ce6e80e66f2a96c8a5ab1bcef0fc2d0f56bb58df96ec67e972","impliedFormat":1},{"version":"125d792ec6c0c0f657d758055c494301cc5fdb327d9d9d5960b3f129aff76093","impliedFormat":1},{"version":"0dbcebe2126d03936c70545e96a6e41007cf065be38a1ce4d32a39fcedefead4","affectsGlobalScope":true,"impliedFormat":1},{"version":"1851a3b4db78664f83901bb9cac9e45e03a37bb5933cc5bf37e10bb7e91ab4eb","impliedFormat":1},{"version":"46c0484bf0a50d57256a8cfb87714450c2ecd1e5d0bc29f84740f16199f47d6a","affectsGlobalScope":true,"impliedFormat":1},{"version":"12ed4559eba17cd977aa0db658d25c4047067444b51acfdcbf38470630642b23","affectsGlobalScope":true,"impliedFormat":1},{"version":"f3ffabc95802521e1e4bcba4c88d8615176dc6e09111d920c7a213bdda6e1d65","impliedFormat":1},{"version":"e31e51c55800014d926e3f74208af49cb7352803619855c89296074d1ecbb524","impliedFormat":1},{"version":"ae56f65caf3be91108707bd8dfbccc2a57a91feb5daabf7165a06a945545ed26","impliedFormat":1},{"version":"a136d5de521da20f31631a0a96bf712370779d1c05b7015d7019a9b2a0446ca9","impliedFormat":1},{"version":"dfb96ba5177b68003deec9e773c47257da5c4c8a74053d8956389d832df72002","affectsGlobalScope":true,"impliedFormat":1},{"version":"92d3070580cf72b4bb80959b7f16ede9a3f39e6f4ef2ac87cfa4561844fdc69f","affectsGlobalScope":true,"impliedFormat":1},{"version":"d3dffd70e6375b872f0b4e152de4ae682d762c61a24881ecc5eb9f04c5caf76f","impliedFormat":1},{"version":"613deebaec53731ff6b74fe1a89f094b708033db6396b601df3e6d5ab0ec0a47","impliedFormat":1},{"version":"d91a7d8b5655c42986f1bdfe2105c4408f472831c8f20cf11a8c3345b6b56c8c","impliedFormat":1},{"version":"e56eb632f0281c9f8210eb8c86cc4839a427a4ffffcfd2a5e40b956050b3e042","affectsGlobalScope":true,"impliedFormat":1},{"version":"e8a979b8af001c9fc2e774e7809d233c8ca955a28756f52ee5dee88ccb0611d2","impliedFormat":1},{"version":"cac793cc47c29e26e4ac3601dcb00b4435ebed26203485790e44f2ad8b6ad847","impliedFormat":1},{"version":"865a2612f5ec073dd48d454307ccabb04c48f8b96fda9940c5ebfe6b4b451f51","impliedFormat":1},{"version":"70f79528d7e02028b3c12dd10764893b22df4c6e2a329e66456aa11bb304cabb","impliedFormat":1},{"version":"a0acca63c9e39580f32a10945df231815f0fe554c074da96ba6564010ffbd2d8","impliedFormat":1},{"version":"1be330b3a0b00590633f04c3b35db7fa618c9ee079258e2b24c137eb4ffcd728","impliedFormat":1},{"version":"0a5ab5c020557d3ccc84b92c0ca55ff790e886d92662aae668020d6320ab1867","impliedFormat":1},{"version":"413df52d4ea14472c2fa5bee62f7a40abd1eb49be0b9722ee01ee4e52e63beb2","impliedFormat":1},{"version":"db6d2d9daad8a6d83f281af12ce4355a20b9a3e71b82b9f57cddcca0a8964a96","impliedFormat":1},{"version":"7bd32a723a12f78ed756747468f2030bdd55774c68f628de07598dba5b912b14","impliedFormat":1},{"version":"24f8562308dd8ba6013120557fa7b44950b619610b2c6cb8784c79f11e3c4f90","impliedFormat":1},{"version":"a1d3d6e9718cceaf1e4352845387af0620564d3d2dff02611a5c3276f73c26cb","impliedFormat":1},{"version":"a86f82d646a739041d6702101afa82dcb935c416dd93cbca7fd754fd0282ce1f","impliedFormat":1},{"version":"57d6ac03382e30e9213641ff4f18cf9402bb246b77c13c8e848c0b1ca2b7ef92","impliedFormat":1},{"version":"ce75b1aebb33d510ff28af960a9221410a3eaf7f18fc5f21f9404075fba77256","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"57e47d02e88abef89d214cdf52b478104dc17997015746e288cbb580beaef266","impliedFormat":1},{"version":"b1177acd771acfcc2648a03fc03ad3b3a1b1d2bdfa6769db0f669293b596ca13","impliedFormat":1},{"version":"3494c5bf00c1a40293ee5ff5128334b63d346abbf560c8987202c92dbc5bdc48","impliedFormat":1},{"version":"9e2739b32f741859263fdba0244c194ca8e96da49b430377930b8f721d77c000","impliedFormat":1},{"version":"99d62b942e98f691f508fc752637fec27661970aa3b0f5eb5a1e2775b995c273","impliedFormat":1},{"version":"a9af0e608929aaf9ce96bd7a7b99c9360636c31d73670e4af09a09950df97841","impliedFormat":1},{"version":"48d37b90a04e753a925228f50304d02c4f95d57bf682f8bb688621c3cd9d32ec","impliedFormat":1},{"version":"361e2b13c6765d7f85bb7600b48fde782b90c7c41105b7dab1f6e7871071ba20","impliedFormat":1},{"version":"c86fe861cf1b4c46a0fb7d74dffe596cf679a2e5e8b1456881313170f092e3fa","impliedFormat":1},{"version":"b6db56e4903e9c32e533b78ac85522de734b3d3a8541bf24d256058d464bf04b","impliedFormat":1},{"version":"24daa0366f837d22c94a5c0bad5bf1fd0f6b29e1fae92dc47c3072c3fdb2fbd5","impliedFormat":1},{"version":"b68c4ed987ef5693d3dccd85222d60769463aca404f2ffca1c4c42781dce388e","impliedFormat":1},{"version":"889c00f3d32091841268f0b994beba4dceaa5df7573be12c2c829d7c5fbc232c","impliedFormat":1},{"version":"65f43099ded6073336e697512d9b80f2d4fec3182b7b2316abf712e84104db00","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","impliedFormat":1},{"version":"12b8dfed70961bea1861e5d39e433580e71323abb5d33da6605182ec569db584","impliedFormat":1},{"version":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881","impliedFormat":1},{"version":"7e560f533aaf88cf9d3b427dcf6c112dd3f2ee26d610e2587583b6c354c753db","impliedFormat":1},{"version":"71e0082342008e4dfb43202df85ea0986ef8e003c921a1e49999d0234a3019da","impliedFormat":1},{"version":"27ab780875bcbb65e09da7496f2ca36288b0c541abaa75c311450a077d54ec15","impliedFormat":1},{"version":"b620391fe8060cf9bedc176a4d01366e6574d7a71e0ac0ab344a4e76576fcbb8","impliedFormat":1},{"version":"380647d8f3b7f852cca6d154a376dbf8ac620a2f12b936594504a8a852e71d2f","impliedFormat":1},{"version":"3e7efde639c6a6c3edb9847b3f61e308bf7a69685b92f665048c45132f51c218","impliedFormat":1},{"version":"df45ca1176e6ac211eae7ddf51336dc075c5314bc5c253651bae639defd5eec5","impliedFormat":1},{"version":"ef61792acbfa8c27c9bd113f02731e66229f7d3a169e3c1993b508134f1a58e0","impliedFormat":1},{"version":"9c82171d836c47486074e4ca8e059735bf97b205e70b196535b5efd40cbe1bc5","impliedFormat":1},{"version":"94fe3281392e1015b22f39535878610b4fa6f1388dc8d78746be3bc4e4bb8950","impliedFormat":1},{"version":"106c6025f1d99fd468fd8bf6e5bda724e11e5905a4076c5d29790b6c3745e50c","impliedFormat":1},{"version":"ce41407ff95aad31e28897741dfffb236d966eb38894f7a791c3a575b53f9d02","impliedFormat":1},{"version":"fac1803c07fbc9574815fdb83afddd9d0d4a2ce13f56d4e4cbb4525f8c09ee0a","impliedFormat":1},{"version":"824c76aec8d8c7e65769688cbee102238c0ef421ed6686f41b2a7d8e7e78a931","impliedFormat":1},{"version":"5eef43ef86c9c3945780211c2ce25cb9b66143a102713e56a2bea85163c5c3c7","impliedFormat":1},{"version":"a2a1cdf7273ad6641938a487ecf2fdd38f60abce41907817e44ab39e482e8739","impliedFormat":1},{"version":"c5426dbfc1cf90532f66965a7aa8c1136a78d4d0f96d8180ecbfc11d7722f1a5","impliedFormat":1},{"version":"ca921bf56756cb6fe957f6af693a35251b134fb932dc13f3dfff0bb7106f80b4","impliedFormat":1},{"version":"4548fac59ea69a3ffd6c0285a4c53e0d736d936937b74297e3b5c4dfcd902419","impliedFormat":1},{"version":"4da246ee3b860278888dd51913e6407a09ca43530db886e7bec2a592c9b9bde6","impliedFormat":1},{"version":"8c05ac9ead787bfc3e144b88bdc7d1ad8c0c7f1cd8412ab58cd3e1208d1990af","impliedFormat":1},{"version":"a23185bc5ef590c287c28a91baf280367b50ae4ea40327366ad01f6f4a8edbc5","impliedFormat":1},{"version":"65a15fc47900787c0bd18b603afb98d33ede930bed1798fc984d5ebb78b26cf9","impliedFormat":1},{"version":"9d202701f6e0744adb6314d03d2eb8fc994798fc83d91b691b75b07626a69801","impliedFormat":1},{"version":"de9d2df7663e64e3a91bf495f315a7577e23ba088f2949d5ce9ec96f44fba37d","impliedFormat":1},{"version":"c7af78a2ea7cb1cd009cfb5bdb48cd0b03dad3b54f6da7aab615c2e9e9d570c5","impliedFormat":1},{"version":"1ee45496b5f8bdee6f7abc233355898e5bf9bd51255db65f5ff7ede617ca0027","impliedFormat":1},{"version":"0c7c947ff881c4274c0800deaa0086971e0bfe51f89a33bd3048eaa3792d4876","affectsGlobalScope":true,"impliedFormat":1},{"version":"db01d18853469bcb5601b9fc9826931cc84cc1a1944b33cad76fd6f1e3d8c544","affectsGlobalScope":true,"impliedFormat":1},{"version":"dba114fb6a32b355a9cfc26ca2276834d72fe0e94cd2c3494005547025015369","impliedFormat":1},{"version":"a8f8e6ab2fa07b45251f403548b78eaf2022f3c2254df3dc186cb2671fe4996d","affectsGlobalScope":true,"impliedFormat":1},{"version":"fa6c12a7c0f6b84d512f200690bfc74819e99efae69e4c95c4cd30f6884c526e","impliedFormat":1},{"version":"f1c32f9ce9c497da4dc215c3bc84b722ea02497d35f9134db3bb40a8d918b92b","impliedFormat":1},{"version":"b73c319af2cc3ef8f6421308a250f328836531ea3761823b4cabbd133047aefa","affectsGlobalScope":true,"impliedFormat":1},{"version":"e433b0337b8106909e7953015e8fa3f2d30797cea27141d1c5b135365bb975a6","impliedFormat":1},{"version":"15b36126e0089bfef173ab61329e8286ce74af5e809d8a72edcafd0cc049057f","impliedFormat":1},{"version":"ddff7fc6edbdc5163a09e22bf8df7bef75f75369ebd7ecea95ba55c4386e2441","impliedFormat":1},{"version":"13283350547389802aa35d9f2188effaeac805499169a06ef5cd77ce2a0bd63f","impliedFormat":1},{"version":"2e4f37ffe8862b14d8e24ae8763daaa8340c0df0b859d9a9733def0eee7562d9","impliedFormat":1},{"version":"d07cbc787a997d83f7bde3877fec5fb5b12ce8c1b7047eb792996ed9726b4dde","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"8bba776476c48b0e319d243f353190f24096057acede3c2f620fee17ff885dba","impliedFormat":1},{"version":"b83cb14474fa60c5f3ec660146b97d122f0735627f80d82dd03e8caa39b4388c","impliedFormat":1},{"version":"42c169fb8c2d42f4f668c624a9a11e719d5d07dacbebb63cbcf7ef365b0a75b3","impliedFormat":1},{"version":"2b2f9dac86b659e6d5cd623bcc21519910a48114fc0cef52d8f86962c48d44e2","impliedFormat":1},{"version":"7e8b76334c75984d57a810a0652c61066ffacede59001dfc5c633565f791ee60","impliedFormat":1},{"version":"72ca9ca89ca15055cbb6ce767b6bf56615be5f1ea6a87ab432ee0603c8d19010","impliedFormat":1},{"version":"7274fbffbd7c9589d8d0ffba68157237afd5cecff1e99881ea3399127e60572f","impliedFormat":1},{"version":"b73cbf0a72c8800cf8f96a9acfe94f3ad32ca71342a8908b8ae484d61113f647","impliedFormat":1},{"version":"bae6dd176832f6423966647382c0d7ba9e63f8c167522f09a982f086cd4e8b23","impliedFormat":1},{"version":"208c9af9429dd3c76f5927b971263174aaa4bc7621ddec63f163640cbd3c473c","impliedFormat":1},{"version":"20865ac316b8893c1a0cc383ccfc1801443fbcc2a7255be166cf90d03fac88c9","impliedFormat":1},{"version":"c9958eb32126a3843deedda8c22fb97024aa5d6dd588b90af2d7f2bfac540f23","impliedFormat":1},{"version":"d682336018141807fb602709e2d95a192828fcb8d5ba06dda3833a8ea98f69e3","impliedFormat":1},{"version":"461d0ad8ae5f2ff981778af912ba71b37a8426a33301daa00f21c6ccb27f8156","impliedFormat":1},{"version":"e927c2c13c4eaf0a7f17e6022eee8519eb29ef42c4c13a31e81a611ab8c95577","impliedFormat":1},{"version":"fcafff163ca5e66d3b87126e756e1b6dfa8c526aa9cd2a2b0a9da837d81bbd72","impliedFormat":1},{"version":"70246ad95ad8a22bdfe806cb5d383a26c0c6e58e7207ab9c431f1cb175aca657","impliedFormat":1},{"version":"f00f3aa5d64ff46e600648b55a79dcd1333458f7a10da2ed594d9f0a44b76d0b","impliedFormat":1},{"version":"772d8d5eb158b6c92412c03228bd9902ccb1457d7a705b8129814a5d1a6308fc","impliedFormat":1},{"version":"45490817629431853543adcb91c0673c25af52a456479588b6486daba34f68bb","impliedFormat":1},{"version":"802e797bcab5663b2c9f63f51bdf67eff7c41bc64c0fd65e6da3e7941359e2f7","impliedFormat":1},{"version":"b01bd582a6e41457bc56e6f0f9de4cb17f33f5f3843a7cf8210ac9c18472fb0f","impliedFormat":1},{"version":"8b4327413e5af38cd8cb97c59f48c3c866015d5d642f28518e3a891c469f240e","impliedFormat":1},{"version":"cecad464ddaf764e5490018d248a8df1733f3d63435fbddac72941c1f4005b66","impliedFormat":1},{"version":"6124e973eab8c52cabf3c07575204efc1784aca6b0a30c79eb85fe240a857efa","impliedFormat":1},{"version":"0d891735a21edc75df51f3eb995e18149e119d1ce22fd40db2b260c5960b914e","impliedFormat":1},{"version":"3b414b99a73171e1c4b7b7714e26b87d6c5cb03d200352da5342ab4088a54c85","impliedFormat":1},{"version":"51b1709e7ad186919a0e30237a8607100143a86d28771b3d3f046359aca1e65c","impliedFormat":1},{"version":"0a437ae178f999b46b6153d79095b60c42c996bc0458c04955f1c996dc68b971","impliedFormat":1},{"version":"74b2a5e5197bd0f2e0077a1ea7c07455bbea67b87b0869d9786d55104006784f","impliedFormat":1},{"version":"4a7baeb6325920044f66c0f8e5e6f1f52e06e6d87588d837bdf44feb6f35c664","impliedFormat":1},{"version":"6dcf60530c25194a9ee0962230e874ff29d34c59605d8e069a49928759a17e0a","impliedFormat":1},{"version":"56013416784a6b754f3855f8f2bf6ce132320679b8a435389aca0361bce4df6b","impliedFormat":1},{"version":"43e96a3d5d1411ab40ba2f61d6a3192e58177bcf3b133a80ad2a16591611726d","impliedFormat":1},{"version":"224e9eedb2ea67e27f28d699b19b1d966e9320e9ea8ac233b2a31dbd753b0dfe","impliedFormat":1},{"version":"002eae065e6960458bda3cf695e578b0d1e2785523476f8a9170b103c709cd4f","impliedFormat":1},{"version":"c51641ab4bfa31b7a50a0ca37edff67f56fab3149881024345b13f2b48b7d2de","impliedFormat":1},{"version":"a57b1802794433adec9ff3fed12aa79d671faed86c49b09e02e1ac41b4f1d33a","impliedFormat":1},{"version":"52abbd5035a97ebfb4240ec8ade2741229a7c26450c84eb73490dc5ea048b911","impliedFormat":1},{"version":"1042064ece5bb47d6aba91648fbe0635c17c600ebdf567588b4ca715602f0a9d","impliedFormat":1},{"version":"4360ad4de54de2d5c642c4375d5eab0e7fe94ebe8adca907e6c186bbef75a54d","impliedFormat":1},{"version":"4a889f2c763edb4d55cb624257272ac10d04a1cad2ed2948b10ed4a7fda2a428","impliedFormat":1},{"version":"7bb79aa2fead87d9d56294ef71e056487e848d7b550c9a367523ee5416c44cfa","impliedFormat":1},{"version":"9c9cae45dc94c2192c7d25f80649414fa13c425d0399a2c7cb2b979e4e50af42","impliedFormat":1},{"version":"6c87b6bcf4336b29c837ea49afbdde69cc15a91cbbfd9f20c0af8694927dec08","impliedFormat":1},{"version":"27ff4196654e6373c9af16b6165120e2dd2169f9ad6abb5c935af5abd8c7938c","impliedFormat":1},{"version":"6dd9bcf10678b889842d467706836a0ab42e6c58711e33918ed127073807ee65","impliedFormat":1},{"version":"8c030e515014c10a2b98f9f48408e3ba18023dfd3f56e3312c6c2f3ae1f55a16","impliedFormat":1},{"version":"dafc31e9e8751f437122eb8582b93d477e002839864410ff782504a12f2a550c","impliedFormat":1},{"version":"ef9efc827cdad89c4ee54142164c793f530aa4d844ca9121cc35368310d5fb9c","impliedFormat":1},{"version":"643672ce383e1c58ea665a92c5481f8441edbd3e91db36e535abccbc9035adeb","impliedFormat":1},{"version":"8fa022ea514ce0ea78ac9b7092a9f97f08ead20c839c779891019e110fce8307","impliedFormat":1},{"version":"c93235337600b786fd7d0ff9c71a00f37ca65c4d63e5d695fc75153be2690f09","impliedFormat":1},{"version":"fa45f48f2def181ab2fb107a032c91b6c043ad05a179f3fbaafb8e5411fd01e4","impliedFormat":1},{"version":"a8e493c0355aabdd495e141bf1c4ec93454a0698c8675df466724adc2fcfe630","impliedFormat":1},{"version":"99702c9058170ae70ea72acbf01be3111784f06152dbf478f52c9afe423528bd","impliedFormat":1},{"version":"cf32f58a7ad3498c69c909121772971ffdee176b882f39c78532d0e0ab41a30d","impliedFormat":1},{"version":"e2bbc579a2fda9473e06b2a68d693e56928900f73ccfc03dabea789fe144e8a5","impliedFormat":1},{"version":"ce0df82a9ae6f914ba08409d4d883983cc08e6d59eb2df02d8e4d68309e7848b","impliedFormat":1},{"version":"796273b2edc72e78a04e86d7c58ae94d370ab93a0ddf40b1aa85a37a1c29ecd7","impliedFormat":1},{"version":"5df15a69187d737d6d8d066e189ae4f97e41f4d53712a46b2710ff9f8563ec9f","impliedFormat":1},{"version":"e17cd049a1448de4944800399daa4a64c5db8657cc9be7ef46be66e2a2cd0e7c","impliedFormat":1},{"version":"d05fb434f4ba073aed74b6c62eff1723c835de2a963dbb091e000a2decb5a691","impliedFormat":1},{"version":"bff8c8bffbf5f302a30ccb1c0557dae477892d50a80eecfe393bd89bac7fb41d","impliedFormat":1},{"version":"43ba4f2fa8c698f5c304d21a3ef596741e8e85a810b7c1f9b692653791d8d97a","impliedFormat":1},{"version":"4d4927cbee21750904af7acf940c5e3c491b4d5ebc676530211e389dd375607a","impliedFormat":1},{"version":"72105519d0390262cf0abe84cf41c926ade0ff475d35eb21307b2f94de985778","impliedFormat":1},{"version":"8a97e578a9bc40eb4f1b0ca78f476f2e9154ecbbfd5567ee72943bab37fc156a","impliedFormat":1},{"version":"a58abf1f5c8feb335475097abeddd32fd71c4dc2065a3d28cf15cacabad9654a","impliedFormat":1},{"version":"ccf6dd45b708fb74ba9ed0f2478d4eb9195c9dfef0ff83a6092fa3cf2ff53b4f","impliedFormat":1},{"version":"2d7db1d73456e8c5075387d4240c29a2a900847f9c1bff106a2e490da8fbd457","impliedFormat":1},{"version":"2b15c805f48e4e970f8ec0b1915f22d13ca6212375e8987663e2ef5f0205e832","impliedFormat":1},{"version":"f22d05663d873ee7a600faf78abb67f3f719d32266803440cf11d5db7ac0cab2","impliedFormat":1},{"version":"f0f05149debcf31b3a717ce8dd16e0323a789905cb9e27239167b604153b8885","impliedFormat":1},{"version":"35069c2c417bd7443ae7c7cafd1de02f665bf015479fec998985ffbbf500628c","impliedFormat":1},{"version":"b4f4d239a6632b86b315a6e4cfe0fac4e4bf6c934263bc07dd2bf5c7dbb8e6a5","impliedFormat":1},{"version":"0d44227395ae4a117dd7c8c9a048e18ade1f1f631bc5b883f9d469126e3cedab","impliedFormat":1},{"version":"9e21f8e2c0cfea713a4a372f284b60089c0841eb90bf3610539d89dbcd12d65a","impliedFormat":1},{"version":"045b752f44bf9bbdcaffd882424ab0e15cb8d11fa94e1448942e338c8ef19fba","impliedFormat":1},{"version":"2894c56cad581928bb37607810af011764a2f511f575d28c9f4af0f2ef02d1ab","impliedFormat":1},{"version":"0a72186f94215d020cb386f7dca81d7495ab6c17066eb07d0f44a5bf33c1b21a","impliedFormat":1},{"version":"a072c5f254d5cbb6522c0d4eeeb7cc4a6ce7f2f8ad84e2593d903bfe3aa44176","impliedFormat":1},{"version":"52b390f86821086a1be50100487faa9f7b23fc04343efb590f304382b4950e04","impliedFormat":1},{"version":"87122b31fe473758a5724388c93826caab566f62be2196aefc2ae8b04b814b52","impliedFormat":1},{"version":"063ab26d3488a665d2c3bc963b18ce220dad7351190629179165bc8c499c6cd9","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"2652448ac55a2010a1f71dd141f828b682298d39728f9871e1cdf8696ef443fd","impliedFormat":1},{"version":"fb400501bee56d86fa9b490e9d8b07d7df163d34d8235fcea27c3f9e8d064d1a","impliedFormat":1},{"version":"120599fd965257b1f4d0ff794bc696162832d9d8467224f4665f713a3119078b","impliedFormat":1},{"version":"5433f33b0a20300cca35d2f229a7fc20b0e8477c44be2affeb21cb464af60c76","impliedFormat":1},{"version":"db036c56f79186da50af66511d37d9fe77fa6793381927292d17f81f787bb195","impliedFormat":1},{"version":"bd4131091b773973ca5d2326c60b789ab1f5e02d8843b3587effe6e1ea7c9d86","impliedFormat":1},{"version":"794998dc1c5a19ce77a75086fe829fb9c92f2fd07b5631c7d5e0d04fd9bc540c","impliedFormat":1},{"version":"409678793827cdf5814e027b1f9e52a0445acb1c322282311c1c4e0855a0918e","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"0427df5c06fafc5fe126d14b9becd24160a288deff40e838bfbd92a35f8d0d00","impliedFormat":1},{"version":"3545dc8a9bdbd33db34462af7eed83f703083e4fee9135dadbba7edfe1e7db3c","impliedFormat":1},{"version":"7b5153a9b237898879441e5ddb576ded76ef3ab4c5baee4bb749ca5c72fc395d","impliedFormat":1},{"version":"49c346823ba6d4b12278c12c977fb3a31c06b9ca719015978cb145eb86da1c61","impliedFormat":1},{"version":"bfac6e50eaa7e73bb66b7e052c38fdc8ccfc8dbde2777648642af33cf349f7f1","impliedFormat":1},{"version":"92f7c1a4da7fbfd67a2228d1687d5c2e1faa0ba865a94d3550a3941d7527a45d","impliedFormat":1},{"version":"f53b120213a9289d9a26f5af90c4c686dd71d91487a0aa5451a38366c70dc64b","impliedFormat":1},{"version":"83fe880c090afe485a5c02262c0b7cdd76a299a50c48d9bde02be8e908fb4ae6","impliedFormat":1},{"version":"d5c2934185201f0768fb80d220f0e617cd05aa4c0c791ffcd508646c474b3c44","impliedFormat":1},{"version":"57d67b72e06059adc5e9454de26bbfe567d412b962a501d263c75c2db430f40e","impliedFormat":1},{"version":"6511e4503cf74c469c60aafd6589e4d14d5eb0a25f9bf043dcbecdf65f261972","impliedFormat":1},{"version":"e326c507507d6c6f3df4152e9e132a6189b30e14a262782796c2a627ba5d42cc","impliedFormat":1},{"version":"75efc43fb206f3825eb219c96b1e59fdabf2f2f042f424fa5f96335b99897540","impliedFormat":1},{"version":"a67b87d0281c97dfc1197ef28dfe397fc2c865ccd41f7e32b53f647184cc7307","impliedFormat":1},{"version":"771ffb773f1ddd562492a6b9aaca648192ac3f056f0e1d997678ff97dbb6bf9b","impliedFormat":1},{"version":"232f70c0cf2b432f3a6e56a8dc3417103eb162292a9fd376d51a3a9ea5fbbf6f","impliedFormat":1},{"version":"ca651584d8d718c1f0655ec4b0c340fbcd967ec1e1758807af3a3f43bc81f81e","impliedFormat":1},{"version":"cfb5f0ab72180f4e0b9ed1534847a63d5394b9a8ee685ae149d25fd53f1aec66","impliedFormat":1},{"version":"8a0e762ceb20c7e72504feef83d709468a70af4abccb304f32d6b9bac1129b2c","impliedFormat":1},{"version":"f613e4e752659ebd241be4d991c05200248b50e753fcecf50a249d30f4367794","impliedFormat":1},{"version":"9252d498a77517aab5d8d4b5eb9d71e4b225bbc7123df9713e08181de63180f6","impliedFormat":1},{"version":"de1ccef0cb3623291d55871e39eb7005cb79d8da519cb46959b0ba5e2422184f","impliedFormat":1},{"version":"35e6379c3f7cb27b111ad4c1aa69538fd8e788ab737b8ff7596a1b40e96f4f90","impliedFormat":1},{"version":"1fffe726740f9787f15b532e1dc870af3cd964dbe29e191e76121aa3dd8693f2","impliedFormat":1},{"version":"7cd657e359eac7829db5f02c856993e8945ffccc71999cdfb4ab3bf801a1bbc6","impliedFormat":1},{"version":"1a82deef4c1d39f6882f28d275cad4c01f907b9b39be9cbc472fcf2cf051e05b","impliedFormat":1},{"version":"4b20fcf10a5413680e39f5666464859fc56b1003e7dfe2405ced82371ebd49b6","impliedFormat":1},{"version":"f0f3f57e29b40e9cb0c4b155a96de2f61e51700d2c335dd547ef3c85e668c6a8","impliedFormat":1},{"version":"f7d628893c9fa52ba3ab01bcb5e79191636c4331ee5667ecc6373cbccff8ae12","impliedFormat":1},{"version":"35117a2e59d2eca30c1848c9ff328c75d131d3468f8649c9012ca885c80fe2ce","impliedFormat":1},{"version":"6a76daf108400ca1333e325772f24f40ebdde2120ef68f8c87d7a1adf0257541","impliedFormat":1},{"version":"313698394e61f0343ebf11b64e5cde7e948110eaba98e8dbd7bdd67ee8df2639","impliedFormat":1},{"version":"6459054aabb306821a043e02b89d54da508e3a6966601a41e71c166e4ea1474f","impliedFormat":1},{"version":"bb37588926aba35c9283fe8d46ebf4e79ffe976343105f5c6d45f282793352b2","impliedFormat":1},{"version":"05c97cddbaf99978f83d96de2d8af86aded9332592f08ce4a284d72d0952c391","impliedFormat":1},{"version":"72179f9dd22a86deaad4cc3490eb0fe69ee084d503b686985965654013f1391b","impliedFormat":1},{"version":"2e6114a7dd6feeef85b2c80120fdbfb59a5529c0dcc5bfa8447b6996c97a69f5","impliedFormat":1},{"version":"7b6ff760c8a240b40dab6e4419b989f06a5b782f4710d2967e67c695ef3e93c4","impliedFormat":1},{"version":"c8f004e6036aa1c764ad4ec543cf89a5c1893a9535c80ef3f2b653e370de45e6","impliedFormat":1},{"version":"91357dba2d5a7234ccfae834dc8363b5635e08f373bd18f548a9046b01864619","impliedFormat":1},{"version":"f31bbb122869d8903ff13c1036bdefc1e6a5bac9b2c3c35e42a9de84d43cd04a","impliedFormat":1},{"version":"c7fdbcfa0991e15215e2a5751676115cac943b39289791546c7197d7bb889c51","impliedFormat":1},{"version":"f974e4a06953682a2c15d5bd5114c0284d5abf8bc0fe4da25cb9159427b70072","impliedFormat":1},{"version":"50256e9c31318487f3752b7ac12ff365c8949953e04568009c8705db802776fb","impliedFormat":1},{"version":"7d73b24e7bf31dfb8a931ca6c4245f6bb0814dfae17e4b60c9e194a631fe5f7b","impliedFormat":1},{"version":"4eac446ac161245bfc6daa95f2cc64d2da4f7844e36a7a5641abfd4771ef0923","impliedFormat":1},{"version":"8de9fe97fa9e00ec00666fa77ab6e91b35d25af8ca75dabcb01e14ad3299b150","impliedFormat":1},{"version":"076527b1c2fd207de3101ba10e0c2b7d155aa8369cc7fe3eed723811e428223d","impliedFormat":1},{"version":"6c800b281b9e89e69165fd11536195488de3ff53004e55905e6c0059a2d8591e","impliedFormat":1},{"version":"7d4254b4c6c67a29d5e7f65e67d72540480ac2cfb041ca484847f5ae70480b62","impliedFormat":1},{"version":"397f568f996f8ffcf12d9156342552b0da42f6571eadba6bce61c99e1651977d","impliedFormat":1},{"version":"ff0c0d446569f8756be0882b520fd94429468de9f922ab6bf9eed4da55eb0187","impliedFormat":1},{"version":"d663134457d8d669ae0df34eabd57028bddc04fc444c4bc04bc5215afc91e1f4","impliedFormat":1},{"version":"a52674bc98da7979607e0f44d4c015c59c1b1d264c83fc50ec79ff2cfea06723","impliedFormat":1},{"version":"89b3d1b267c4380fbb8e5cadccbb284843b90066f16a2f6e8a5b3a030bb7dcfb","impliedFormat":1},{"version":"f58226e78464f9c85be6cf47c665a8e33b32121ab4cdb2670b66a06f1114a55c","impliedFormat":1},{"version":"9b06ce81ad598c9c6b011cb66182fa66575ad6bd1f8f655830a6a0223a197ab7","impliedFormat":1},{"version":"e108f38a04a607f9386d68a4c6f3fdae1b712960f11f6482c6f1769bab056c2e","impliedFormat":1},{"version":"a3128a84a9568762a2996df79717d92154d18dd894681fc0ab3a098fa7f8ee3b","affectsGlobalScope":true,"impliedFormat":1},{"version":"347791f3792f436950396dd6171d6450234358001ae7c94ca209f1406566ccbf","impliedFormat":1},{"version":"dd80b1e600d00f5c6a6ba23f455b84a7db121219e68f89f10552c54ba46e4dc9","impliedFormat":1},{"version":"2896c2e673a5d3bd9b4246811f79486a073cbb03950c3d252fba10003c57411a","impliedFormat":1},{"version":"616775f16134fa9d01fc677ad3f76e68c051a056c22ab552c64cc281a9686790","impliedFormat":1},{"version":"65c24a8baa2cca1de069a0ba9fba82a173690f52d7e2d0f1f7542d59d5eb4db0","impliedFormat":1},{"version":"f9fe6af238339a0e5f7563acee3178f51db37f32a2e7c09f85273098cee7ec49","impliedFormat":1},{"version":"51bf55bb6eb80f11b3aa59fb0a9571565a7ea304a19381f6da5630f4b2e206c4","impliedFormat":1},{"version":"77e71242e71ebf8528c5802993697878f0533db8f2299b4d36aa015bae08a79c","impliedFormat":1},{"version":"98a787be42bd92f8c2a37d7df5f13e5992da0d967fab794adbb7ee18370f9849","impliedFormat":1},{"version":"5c96bad5f78466785cdad664c056e9e2802d5482ca5f862ed19ba34ffbb7b3a4","impliedFormat":1},{"version":"b7fff2d004c5879cae335db8f954eb1d61242d9f2d28515e67902032723caeab","impliedFormat":1},{"version":"5f3dc10ae646f375776b4e028d2bed039a93eebbba105694d8b910feebbe8b9c","impliedFormat":1},{"version":"bb0cd7862b72f5eba39909c9889d566e198fcaddf7207c16737d0c2246112678","impliedFormat":1},{"version":"4545c1a1ceca170d5d83452dd7c4994644c35cf676a671412601689d9a62da35","impliedFormat":1},{"version":"320f4091e33548b554d2214ce5fc31c96631b513dffa806e2e3a60766c8c49d9","impliedFormat":1},{"version":"a2d648d333cf67b9aeac5d81a1a379d563a8ffa91ddd61c6179f68de724260ff","impliedFormat":1},{"version":"d90d5f524de38889d1e1dbc2aeef00060d779f8688c02766ddb9ca195e4a713d","impliedFormat":1},{"version":"a3f41ed1b4f2fc3049394b945a68ae4fdefd49fa1739c32f149d32c0545d67f5","impliedFormat":1},{"version":"bad68fd0401eb90fe7da408565c8aee9c7a7021c2577aec92fa1382e8876071a","impliedFormat":1},{"version":"47699512e6d8bebf7be488182427189f999affe3addc1c87c882d36b7f2d0b0e","impliedFormat":1},{"version":"fec01479923e169fb52bd4f668dbeef1d7a7ea6e6d491e15617b46f2cacfa37d","impliedFormat":1},{"version":"8a8fb3097ba52f0ae6530ec6ab34e43e316506eb1d9aa29420a4b1e92a81442d","impliedFormat":1},{"version":"44e09c831fefb6fe59b8e65ad8f68a7ecc0e708d152cfcbe7ba6d6080c31c61e","impliedFormat":1},{"version":"1c0a98de1323051010ce5b958ad47bc1c007f7921973123c999300e2b7b0ecc0","impliedFormat":1},{"version":"4655709c9cb3fd6db2b866cab7c418c40ed9533ce8ea4b66b5f17ec2feea46a9","impliedFormat":1},{"version":"87affad8e2243635d3a191fa72ef896842748d812e973b7510a55c6200b3c2a4","impliedFormat":1},{"version":"ad036a85efcd9e5b4f7dd5c1a7362c8478f9a3b6c3554654ca24a29aa850a9c5","impliedFormat":1},{"version":"fedebeae32c5cdd1a85b4e0504a01996e4a8adf3dfa72876920d3dd6e42978e7","impliedFormat":1},{"version":"22b87e96a61c525464e115db0148593a861e77806fd37ab280e1903019a6e212","impliedFormat":1},{"version":"cdf21eee8007e339b1b9945abf4a7b44930b1d695cc528459e68a3adc39a622e","impliedFormat":1},{"version":"330896c1a2b9693edd617be24fbf9e5895d6e18c7955d6c08f028f272b37314d","impliedFormat":1},{"version":"1d9c0a9a6df4e8f29dc84c25c5aa0bb1da5456ebede7a03e03df08bb8b27bae6","impliedFormat":1},{"version":"84380af21da938a567c65ef95aefb5354f676368ee1a1cbb4cae81604a4c7d17","impliedFormat":1},{"version":"1af3e1f2a5d1332e136f8b0b95c0e6c0a02aaabd5092b36b64f3042a03debf28","impliedFormat":1},{"version":"30d8da250766efa99490fc02801047c2c6d72dd0da1bba6581c7e80d1d8842a4","impliedFormat":1},{"version":"03566202f5553bd2d9de22dfab0c61aa163cabb64f0223c08431fb3fc8f70280","impliedFormat":1},{"version":"9a01f12466488eccd8d9eafc8fecb9926c175a4bf4a8f73a07c3bcf8b3363282","impliedFormat":1},{"version":"b80f624162276f24a4ec78b8e86fbee80ca255938e12f8b58e7a8f1a6937120b","impliedFormat":1},{"version":"1de80059b8078ea5749941c9f863aa970b4735bdbb003be4925c853a8b6b4450","impliedFormat":1},{"version":"1d079c37fa53e3c21ed3fa214a27507bda9991f2a41458705b19ed8c2b61173d","impliedFormat":1},{"version":"5bf5c7a44e779790d1eb54c234b668b15e34affa95e78eada73e5757f61ed76a","impliedFormat":1},{"version":"5835a6e0d7cd2738e56b671af0e561e7c1b4fb77751383672f4b009f4e161d70","impliedFormat":1},{"version":"5c634644d45a1b6bc7b05e71e05e52ec04f3d73d9ac85d5927f647a5f965181a","impliedFormat":1},{"version":"4b7f74b772140395e7af67c4841be1ab867c11b3b82a51b1aeb692822b76c872","impliedFormat":1},{"version":"27be6622e2922a1b412eb057faa854831b95db9db5035c3f6d4b677b902ab3b7","impliedFormat":1},{"version":"b95a6f019095dd1d48fd04965b50dfd63e5743a6e75478343c46d2582a5132bf","impliedFormat":99},{"version":"c2008605e78208cfa9cd70bd29856b72dda7ad89df5dc895920f8e10bcb9cd0a","impliedFormat":99},{"version":"a61e739f0b2c0165086c77a28d7e4b58a2a8703c646cd1e1641788484afc6ff2","impliedFormat":99},{"version":"63a7595a5015e65262557f883463f934904959da563b4f788306f699411e9bac","impliedFormat":1},{"version":"9e40365afca304124bc53eb03412643abf074a1580e4dc279a7a16000d11f985","impliedFormat":1},{"version":"4ba137d6553965703b6b55fd2000b4e07ba365f8caeb0359162ad7247f9707a6","impliedFormat":1},{"version":"ceec3c81b2d81f5e3b855d9367c1d4c664ab5046dff8fd56552df015b7ccbe8f","affectsGlobalScope":true,"impliedFormat":1},{"version":"4e18cfe14fa8602c7ff80cbbddb91e31608e5ae20bd361fe7e6a607706cb033c","affectsGlobalScope":true,"impliedFormat":1},{"version":"a1219ee18b9282b4c6a31f1f0bcc9255b425e99363268ba6752a932cf76662f0","impliedFormat":1},{"version":"3dc14e1ab45e497e5d5e4295271d54ff689aeae00b4277979fdd10fa563540ae","impliedFormat":1},{"version":"1d63055b690a582006435ddd3aa9c03aac16a696fac77ce2ed808f3e5a06efab","impliedFormat":1},{"version":"b789bf89eb19c777ed1e956dbad0925ca795701552d22e68fd130a032008b9f9","impliedFormat":1},"f2b3bca04d1bfe583daae1e1f798c92ec24bb6693bd88d0a09ba6802dee362a8",{"version":"a8ae6ec6c816d158be9048e6652fabfbab95dcdc52cc80c6ab58952e1ff71a4e","signature":"46a0b34e1264c4d25ca6646ff0e6cfaa7275ea1ae5a6bc23d4dfd84edf2f2b2e"},{"version":"5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","impliedFormat":1},{"version":"7180c03fd3cb6e22f911ce9ba0f8a7008b1a6ddbe88ccf16a9c8140ef9ac1686","impliedFormat":1},{"version":"25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","impliedFormat":1},{"version":"499a48bb6b59bb20f0c70345f4ccedaa7ae186d0e7e2a7424440be2c6f03a212","impliedFormat":1},{"version":"3e4825171442666d31c845aeb47fcd34b62e14041bb353ae2b874285d78482aa","impliedFormat":1},{"version":"c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","impliedFormat":1},{"version":"8702b271086074c550d51bc0fc0626403e0c27f93a69264532ae3a9d5e65b9ab","impliedFormat":1},{"version":"e9775e97ac4877aebf963a0289c81abe76d1ec9a2a7778dbe637e5151f25c5f3","impliedFormat":1},{"version":"c34ee1ea9317f8a782b45c9053a87a637af138a8b49ddba52914d8186ecf36e6","impliedFormat":1},{"version":"cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","impliedFormat":1},{"version":"385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","impliedFormat":1},{"version":"9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","impliedFormat":1},{"version":"db3435f3525cd785bf21ec6769bf8da7e8a776be1a99e2e7efb5f244a2ef5fee","impliedFormat":1},{"version":"c3b170c45fc031db31f782e612adf7314b167e60439d304b49e704010e7bafe5","impliedFormat":1},{"version":"40383ebef22b943d503c6ce2cb2e060282936b952a01bea5f9f493d5fb487cc7","impliedFormat":1},{"version":"4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","impliedFormat":1},{"version":"3a84b7cb891141824bd00ef8a50b6a44596aded4075da937f180c90e362fe5f6","impliedFormat":1},{"version":"13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","impliedFormat":1},{"version":"9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","impliedFormat":1},{"version":"4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","impliedFormat":1},{"version":"24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","impliedFormat":1},{"version":"33203609eba548914dc83ddf6cadbc0bcb6e8ef89f6d648ca0908ae887f9fcc5","impliedFormat":1},{"version":"1d150b70510edc11a33ecee95fdbc7609c5af88a40d29c3d0265f704d3cdb2e6","impliedFormat":1},{"version":"0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","impliedFormat":1},{"version":"89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","impliedFormat":1},{"version":"e53a3c2a9f624d90f24bf4588aacd223e7bec1b9d0d479b68d2f4a9e6011147f","impliedFormat":1},{"version":"339dc5265ee5ed92e536a93a04c4ebbc2128f45eeec6ed29f379e0085283542c","impliedFormat":1},{"version":"9f0a92164925aa37d4a5d9dd3e0134cff8177208dba55fd2310cd74beea40ee2","impliedFormat":1},{"version":"8bfdb79bf1a9d435ec48d9372dc93291161f152c0865b81fc0b2694aedb4578d","impliedFormat":1},{"version":"2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","impliedFormat":1},{"version":"c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","impliedFormat":1},{"version":"d32275be3546f252e3ad33976caf8c5e842c09cb87d468cb40d5f4cf092d1acc","impliedFormat":1},{"version":"5f69925a3ca4f275d26da3398a7c24ac669f099f840f89ccc64e5dc8026993dd","impliedFormat":1},{"version":"299fd0c281633d8dbfbe5f44c5f2850fe37392da6fd3b9cca3cb4e10cda16432","impliedFormat":1},{"version":"abddca426d9e96630afbe348fda5e2a1fdc5aafefaed8926c587faf7863fb230","impliedFormat":1},{"version":"5487b97cfa28b26b4a9ef0770f872bdbebd4c46124858de00f242c3eed7519f4","impliedFormat":1},{"version":"7a01f546ace66019156e4232a1bee2fabc2f8eabeb052473d926ee1693956265","impliedFormat":1},{"version":"fb53b1c6a6c799b7e3cc2de3fb5c9a1c04a1c60d4380a37792d84c5f8b33933b","impliedFormat":1},{"version":"8485b6da53ec35637d072e516631d25dae53984500de70a6989058f24354666f","impliedFormat":1},{"version":"ebe80346928736532e4a822154eb77f57ef3389dbe2b3ba4e571366a15448ef2","impliedFormat":1},{"version":"c2cb3c8ff388781258ea9ddbcd8a947f751bddd6886e1d3b3ea09ddaa895df80","impliedFormat":1},{"version":"f672c876c1a04a223cf2023b3d91e8a52bb1544c576b81bf64a8fec82be9969c","impliedFormat":1},{"version":"98a9cc18f661d28e6bd31c436e1984f3980f35e0f0aa9cf795c54f8ccb667ffe","impliedFormat":1},{"version":"c76b0c5727302341d0bdfa2cc2cee4b19ff185b554edb6e8543f0661d8487116","impliedFormat":1},{"version":"d6a6e6fcd382a05f787a81a157e66f54f360f81a405015bf07f77a622139ed90","impliedFormat":1},{"version":"f5ef066942e4f0bd98200aa6a6694b831e73200c9b3ade77ad0aa2409e8fe1b1","impliedFormat":1},{"version":"b9e99cd94f4166a245f5158f7286c05406e2a4c694619bceb7a4f3519d1d768e","impliedFormat":1},{"version":"5568d7c32e5cf5f35e092649f4e5e168c3114c800b1d7545b7ae5e0415704802","impliedFormat":1},{"version":"aea2bc6e11a0be9e36ba3560a0cd363cfbe7983144551d4f212ab0efe14803b8","impliedFormat":1},{"version":"dd7ca4f0ef3661dac7043fb2cdf1b99e008d2b6bc5cd998dd1fa5a2968034984","affectsGlobalScope":true,"impliedFormat":1},{"version":"005c4bf393e8da131246162cbd3bfbe4a8aabe827e1f1054afd6d1757f092e96","impliedFormat":1},{"version":"e578363b6a9b41dde4dadf7bcfb9310d64a3b0e1044991c1e07d58c0f5dd6116","impliedFormat":99},{"version":"d6a070b3f69e699d4df69519d44df25115b7a2d474cb7bfa15a91ce809225e6d","impliedFormat":99},{"version":"3bebc19157229a957c0c703b6db625d29be2958f7bdbfe2404d4e762e7064132","impliedFormat":99},{"version":"efce3ff39b863655b0ad6240428507e4904ddc9787c91d4898b0912ffeb5e3a9","impliedFormat":99},{"version":"be27997d00bd1654ee90d7f8cfe72c8d3cae158d206bc2d2af25d92378e94bf0","impliedFormat":99},{"version":"40e026a7ac38acae28f78da051d5ae576e1e27fce19f4093217c7d849835f768","impliedFormat":99},{"version":"3ea803919037b538a0f573ebe35c326f3bf79d4d4f0e8eaf6ceb1a02949f23e0","impliedFormat":99},{"version":"63c3bf87971f7bc149d3e0c84fd2944431db1dca9cc7a6e955ba3f0b90ab5e5f","impliedFormat":99},{"version":"ccce3c1affa7c3988375501e2ddb55c20b0c1366522af516e577da59fd375bb9","impliedFormat":99},{"version":"76356315502eb2b3adb3819568996724ac5fead7717f8eb2f1097ad2a4cc3027","affectsGlobalScope":true,"impliedFormat":99},{"version":"3fcfc60c607f90961857e511c967cf45c6a65e3b0e9c41c6804e83a21e6dafe8","impliedFormat":99},{"version":"895582220337232e514f56b23eaf1d2a9a0ed5c0b0f7609caadcf85167b98e03","impliedFormat":99},{"version":"324b9d6b3c82d4e9ea40e274ff19988759528140806161530347c22848bd2c92","impliedFormat":99},{"version":"a1c37a9dddbe36848515ae7309380bc835c0cf54001ddf33ea98442b1926f698","signature":"5834d9ad3b30d837fe0688232f9cd5c42761980289a2e6e141c88c031b43e83a"},"00334481b2ffe8a27ad27576d17cdff7efb00cdce62bc63552c1d027e96525bd",{"version":"d3cfde44f8089768ebb08098c96d01ca260b88bccf238d55eee93f1c620ff5a5","impliedFormat":1},{"version":"293eadad9dead44c6fd1db6de552663c33f215c55a1bfa2802a1bceed88ff0ec","impliedFormat":1},{"version":"54f6ec6ea75acea6eb23635617252d249145edbc7bcd9d53f2d70280d2aef953","impliedFormat":1},{"version":"c25ce98cca43a3bfa885862044be0d59557be4ecd06989b2001a83dcf69620fd","impliedFormat":1},{"version":"8e71e53b02c152a38af6aec45e288cc65bede077b92b9b43b3cb54a37978bb33","impliedFormat":1},{"version":"754a9396b14ca3a4241591afb4edc644b293ccc8a3397f49be4dfd520c08acb3","impliedFormat":1},{"version":"f672c876c1a04a223cf2023b3d91e8a52bb1544c576b81bf64a8fec82be9969c","impliedFormat":1},{"version":"e4b03ddcf8563b1c0aee782a185286ed85a255ce8a30df8453aade2188bbc904","impliedFormat":1},{"version":"de2316e90fc6d379d83002f04ad9698bc1e5285b4d52779778f454dd12ce9f44","impliedFormat":1},{"version":"25b3f581e12ede11e5739f57a86e8668fbc0124f6649506def306cad2c59d262","impliedFormat":1},{"version":"2da997a01a6aa5c5c09de5d28f0f4407b597c5e1aecfd32f1815809c532650a2","impliedFormat":1},{"version":"5d26d2e47e2352def36f89a3e8bf8581da22b7f857e07ef3114cd52cf4813445","impliedFormat":1},{"version":"3db2efd285e7328d8014b54a7fce3f4861ebcdc655df40517092ed0050983617","impliedFormat":1},{"version":"d5d39a24c759df40480a4bfc0daffd364489702fdbcbdfc1711cde34f8739995","impliedFormat":1},{"version":"f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","impliedFormat":1},{"version":"a93daf9245e2e7a8db7055312db5d9aae6d2ac69c20e433a521f69c16c04c5ae","impliedFormat":1},{"version":"e91013ea9bf651a1671f143cc1cfb805afc80e954e18168f7ca1f1f38703e187","impliedFormat":1},{"version":"43a2c79159bee2a243ffd9522203dd7311e54c6b6a2a4d8c606721450fdcffea","impliedFormat":1},{"version":"25947a3f4ce1016a8f967ccaf83a2f2229e15844bc78d4b63a4f7df9e98ecb05","impliedFormat":1},{"version":"a4e9e0d92dcad2cb387a5f1bdffe621569052f2d80186e11973aa7080260d296","impliedFormat":1},{"version":"f6380cc36fc3efc70084d288d0a05d0a2e09da012ee3853f9d62431e7216f129","impliedFormat":1},{"version":"497c3e541b4acf6c5d5ba75b03569cfe5fe25c8a87e6c87f1af98da6a3e7b918","impliedFormat":1},{"version":"d9429b81edf2fb2abf1e81e9c2e92615f596ed3166673d9b69b84c369b15fdc0","impliedFormat":1},{"version":"7e22943ae4e474854ca0695ab750a8026f55bb94278331fda02a4fb42efce063","impliedFormat":1},{"version":"7da9ff3d9a7e62ddca6393a23e67296ab88f2fcb94ee5f7fb977fa8e478852ac","impliedFormat":1},{"version":"e1b45cc21ea200308cbc8abae2fb0cfd014cb5b0e1d1643bcc50afa5959b6d83","impliedFormat":1},{"version":"c9740b0ce7533ce6ba21a7d424e38d2736acdddeab2b1a814c00396e62cc2f10","impliedFormat":1},{"version":"b3c1f6a3fdbb04c6b244de6d5772ffdd9e962a2faea1440e410049c13e874b87","impliedFormat":1},{"version":"dcaa872d9b52b9409979170734bdfd38f846c32114d05b70640fd05140b171bb","impliedFormat":1},{"version":"6c434d20da381fcd2e8b924a3ec9b8653cf8bed8e0da648e91f4c984bd2a5a91","impliedFormat":1},{"version":"992419d044caf6b14946fa7b9463819ab2eeb7af7c04919cc2087ce354c92266","impliedFormat":1},{"version":"fa9815e9ce1330289a5c0192e2e91eb6178c0caa83c19fe0c6a9f67013fe795c","impliedFormat":1},{"version":"06384a1a73fcf4524952ecd0d6b63171c5d41dd23573907a91ef0a687ddb4a8c","impliedFormat":1},{"version":"34b1594ecf1c84bcc7a04d9f583afa6345a6fea27a52cf2685f802629219de45","impliedFormat":1},{"version":"d82c9ca830d7b94b7530a2c5819064d8255b93dfeddc5b2ebb8a09316f002c89","impliedFormat":1},{"version":"7e046b9634add57e512412a7881efbc14d44d1c65eadd35432412aa564537975","impliedFormat":1},{"version":"aac9079b9e2b5180036f27ab37cb3cf4fd19955be48ccc82eab3f092ee3d4026","impliedFormat":1},{"version":"3d9c38933bc69e0a885da20f019de441a3b5433ce041ba5b9d3a541db4b568cb","impliedFormat":1},{"version":"606aa2b74372221b0f79ca8ae3568629f444cc454aa59b032e4cb602308dec94","impliedFormat":1},{"version":"50474eaea72bfda85cc37ae6cd29f0556965c0849495d96c8c04c940ef3d2f44","impliedFormat":1},{"version":"b4874382f863cf7dc82b3d15aed1e1372ac3fede462065d5bfc8510c0d8f7b19","impliedFormat":1},{"version":"df10b4f781871afb72b2d648d497671190b16b679bf7533b744cc10b3c6bf7ea","impliedFormat":1},{"version":"1fdc28754c77e852c92087c789a1461aa6eed19c335dc92ce6b16a188e7ba305","impliedFormat":1},{"version":"a656dab1d502d4ddc845b66d8735c484bfebbf0b1eda5fb29729222675759884","impliedFormat":1},{"version":"465a79505258d251068dc0047a67a3605dd26e6b15e9ad2cec297442cbb58820","impliedFormat":1},{"version":"ddae22d9329db28ce3d80a2a53f99eaed66959c1c9cd719c9b744e5470579d2f","impliedFormat":1},{"version":"d0e25feadef054c6fc6a7f55ccc3b27b7216142106b9ff50f5e7b19d85c62ca7","impliedFormat":1},{"version":"111214009193320cacbae104e8281f6cb37788b52a6a84d259f9822c8c71f6ca","impliedFormat":1},{"version":"01c8e2c8984c96b9b48be20ee396bd3689a3a3e6add8d50fe8229a7d4e62ff45","impliedFormat":1},{"version":"a4a0800b592e533897b4967b00fb00f7cd48af9714d300767cc231271aa100af","impliedFormat":1},{"version":"20aa818c3e16e40586f2fa26327ea17242c8873fe3412a69ec68846017219314","impliedFormat":1},{"version":"f498532f53d54f831851990cb4bcd96063d73e302906fa07e2df24aa5935c7d1","impliedFormat":1},{"version":"5fd19dfde8de7a0b91df6a9bbdc44b648fd1f245cae9e8b8cf210d83ee06f106","impliedFormat":1},{"version":"3b8d6638c32e63ea0679eb26d1eb78534f4cc02c27b80f1c0a19f348774f5571","impliedFormat":1},{"version":"ce0da52e69bc3d82a7b5bc40da6baad08d3790de13ad35e89148a88055b46809","impliedFormat":1},{"version":"9e01233da81bfed887f8d9a70d1a26bf11b8ddff165806cc586c84980bf8fc24","impliedFormat":1},{"version":"214a6afbab8b285fc97eb3cece36cae65ea2fca3cbd0c017a96159b14050d202","impliedFormat":1},{"version":"14beeca2944b75b229c0549e0996dc4b7863e07257e0d359d63a7be49a6b86a4","impliedFormat":1},{"version":"f7bb9adb1daa749208b47d1313a46837e4d27687f85a3af7777fc1c9b3dc06b1","impliedFormat":1},{"version":"c549fe2f52101ffe47f58107c702af7cdcd42da8c80afd79f707d1c5d77d4b6e","impliedFormat":1},{"version":"3966ea9e1c1a5f6e636606785999734988e135541b79adc6b5d00abdc0f4bf05","impliedFormat":1},{"version":"0b60b69c957adb27f990fbc27ea4ac1064249400262d7c4c1b0a1687506b3406","impliedFormat":1},{"version":"12c26e5d1befc0ded725cee4c2316f276013e6f2eb545966562ae9a0c1931357","impliedFormat":1},{"version":"27b247363f1376c12310f73ebac6debcde009c0b95b65a8207e4fa90e132b30a","impliedFormat":1},{"version":"05bd302e2249da923048c09dc684d1d74cb205551a87f22fb8badc09ec532a08","impliedFormat":1},{"version":"fe930ec064571ab3b698b13bddf60a29abf9d2f36d51ab1ca0083b087b061f3a","impliedFormat":1},{"version":"6b85c4198e4b62b0056d55135ad95909adf1b95c9a86cdbed2c0f4cc1a902d53","impliedFormat":1},{"version":"02cf6057df8dcc34b248db0534665c565bdf9b2824b1a4b30b7e47d53adc3f56","impliedFormat":1},{"version":"f3dcdc7a4cefa86c9a9a76ccddd7802a30dbd478fe2356aeea6da70499be407d","signature":"dc5ffaa3f57c16f64803d7ea69f9c41da8efa07b05121f7f494bd04bc781214d"},{"version":"5ffca3526f2d08087ae2286c1c7b6ef69a6c084e58e368b39b0df3e6ad41d12c","impliedFormat":1},{"version":"582743fbc49968a8c4cfabd3c663d47f2814579b28983d46989b20150e1a1539","impliedFormat":1},{"version":"604e24140a8629f68dd019b6d440b1fab4715b874c7d4a9d83421c9b9d7f049d","impliedFormat":1},{"version":"4d7d964609a07368d076ce943b07106c5ebee8138c307d3273ba1cf3a0c3c751","impliedFormat":99},{"version":"0e48c1354203ba2ca366b62a0f22fec9e10c251d9d6420c6d435da1d079e6126","impliedFormat":99},{"version":"0662a451f0584bb3026340c3661c3a89774182976cd373eca502a1d3b5c7b580","impliedFormat":99},{"version":"8567c4f44c0d1c40726745701a7bbd715c0e8301b6b15bc25b208cec0317bd3d","impliedFormat":99},{"version":"56c7652b9e41b2acf8fc249f13bbf293f2fd5d20a6826a779fb13f2b41310285","impliedFormat":99},{"version":"d619113674b97169b14dd63cec0cd38ca586550be0b898342d84860c6966e016","impliedFormat":99},{"version":"bfc119214b3543fbaabe2c6e1d5c1daa9c0186d4f7fc3a87d72975d2600ea0c1","impliedFormat":99},{"version":"f37104775d567bf587acc198edd4baa7222f79810463d469375c8ef0d292a157","impliedFormat":99},{"version":"c5ee44dca52898ad7262cadc354f5e6f434a007c2d904a53ecfb4ee0e419b403","impliedFormat":99},{"version":"cb44dd6fd99ade30c70496a3fa535590aed5f2bb64ba7bc92aa34156c10c0f25","impliedFormat":99},{"version":"d52cc473d0d96c4d8a8e9768846f8a38d24b053750b1a1d1c01f9d8112fe05c7","impliedFormat":99},{"version":"dcace7c8c4c75af8a905a29b71048cf4d5b162a787c7e1123ad71274e8b876a0","impliedFormat":99},{"version":"30fad3bc59dbabf88cc0fb51dcc54fabff4d12419f8def7490c9d2fded7c0fe1","impliedFormat":99},{"version":"b7867a291de5014acdf689168c09a286fe698951b09485da6ca28c7dee2632b5","impliedFormat":99},{"version":"2ad00018e95065d0b14bbd4dcc4ececec08d104860651668452f5c6305692b41","impliedFormat":99},{"version":"c4dd27a0c3897b8f1b7082f70d70f38231f0e0973813680c8ca08ddf0e7d16c1","impliedFormat":99},{"version":"b23fad2190be146426a7de0fa403e24fccbc9c985d49d22f8b9f39803db47699","impliedFormat":99},{"version":"2b972d3d61798fcef479dfc84ad519c805fcf4cdc7a5a270b698975371872614","impliedFormat":99},{"version":"895d89df016d846222abdd633b1f6e3a7f4c820f56901dbda853916d302c16f2","impliedFormat":99},{"version":"fe05dff4d835a34d8b61468deeb948abf13e77378cb2ec24607f132f2a4065f4","impliedFormat":99},{"version":"ab59a5f7526fc8309ee5a5a28e3e358f6ed457bdb599dd6542becb706c0419dc","impliedFormat":99},{"version":"2f5e26625dab50706134c929d653f6756ec1c90155a5abc2a5a6f7dbdbc42d5b","impliedFormat":99},{"version":"76c33b84606e8124aa33a2ace448ae9b035d1ad59de61e447bba7b94750f8854","impliedFormat":99},{"version":"886e27d585b99cea11db1f8ec5504e7d3da92f48fc819db0e8fc1b615a47f9b5","impliedFormat":99},{"version":"5c4621a72b5994b6c8d84ca2dc6592ab7288c70a72e86df68b89187f801ebfa7","impliedFormat":99},{"version":"0a2602130be5a581a921d84f465ce0f81e62c961b4d2ffe10e9bcd4060dd41cf","impliedFormat":99},{"version":"9f2a41d65629c9d3218d3451b5b73dd96956f9078720e5ea2acf469ea6895240","impliedFormat":99},{"version":"2d1924bb4fa9f785437228ca40cd05162795b36295b9addaed7aaef2e8e5c7e5","impliedFormat":99},{"version":"47634f6761f27d52983664d8f1367085d8885d3def57642ae7b490f0c4e4833a","impliedFormat":99},{"version":"34c57354a2a1b8e654bc730ab55aeeb857ee342ebe848660a078803e0bbd940a","impliedFormat":99},{"version":"7c1c1d4c8fe888eecca43aa8d1bb12811c4915ffd27718b939c9bb127f2225bf","impliedFormat":99},{"version":"675e46f900b0941dc2657a49ccb533c1dac12aa296fe1ac0c36285b7bf3d7b20","impliedFormat":99},{"version":"0d4079e5d31dee0ea3f724aad8ff19a01e248d5e4d234ee81dfe561731b484d9","impliedFormat":99},{"version":"64a8c0db1ac49d639d35064e7f20360b8ebb2f64266136adf94a604d698b4ff7","impliedFormat":99},{"version":"84aa893c666ccd0e5a15b3fb7fd278b10fcdc0b6e1911fb46a711e3fd649120b","impliedFormat":99},{"version":"f5c0229716cab5de0c590cd12615c347ef2a6e9793381272f1b074d67ca5d416","impliedFormat":99},{"version":"9a9079c1e601c3112be9de38b7deada169cd71a4d11dada63e2b7c9855fa820c","impliedFormat":99},{"version":"a5bfd069a7e7353c542f85dc68a48404ee92ea25113b2315546d608046070302","impliedFormat":99},{"version":"f358fc46b6ee296b7488b5eb3760d8a5286b152862b90e79060dbd467e6a127a","impliedFormat":99},{"version":"839eb99e80896f913be905508a96aca939d0c523cd55406aa274300b0f9e60d5","impliedFormat":99},{"version":"e013161f8d4e13b5d2e8219f73ffaba43a68d2f5c136813a45f2a07b51879287","impliedFormat":99},{"version":"65e1658f73581e4174ff06a4e494409c0f32188b34c93c8a50fb32cf2ee5cc2f","impliedFormat":99},{"version":"8b47b2fa9f0dfb96829c0e4b1c32098409a57b46804628be7663024e50dc48d8","impliedFormat":99},{"version":"def2ff50fcf59e5f6c2531bc0fc622baf8b009c73a648c03d2feada0039c7991","impliedFormat":99},{"version":"fe150492b61ddafa7107def7794e18c699c3251ed4bc5c396a40bb6f062caffb","impliedFormat":99},{"version":"9fa3f59576abfd060a9f93f20041f6d8c78476b249c61599073b495872739177","impliedFormat":99},{"version":"1ce6c066696877330c72b47aff7faf7411efaae19b095a0539cfa6c7e2a8f3f2","impliedFormat":99},{"version":"a772c1d8f7fc698119d0f1f959fbb156df11016290e17a39695f5bbb3988716d","impliedFormat":99},{"version":"956303bcd7c36333c6a57e35bcd68619a2e166b610f76338c02ee38e78d57a96","impliedFormat":99},{"version":"43ab6a27a66735b04194f3a06f6c290d48602bea53c3b9db12faa5d61d5b7b9d","impliedFormat":99},{"version":"4f0e1d79411d135edbc78d544b226de9e11c7ecdcf09518c5302d49517d0c4ee","impliedFormat":99},{"version":"c4742f58fa3262cd5948a49cde13928cc03dd060fa28c6a71cd94b32cc5a8aef","impliedFormat":99},{"version":"124f4f7545e38b664667f6221b661b42d69a2abd218a9f52fc3808728063944f","signature":"af8114d3343283b0a5733a79418192da47521510936154220ea850302190cf4b"},"d70591b280b4c77c0b82243785056025463e4d4b115412deb71dc443114b4d99","1f03c8b25070f951c41b3a276a968c4fcb9c5e1da6cf33541d59a7b7867ef2fd","23f318c1a63e940770f8346f77a15f14aeaeb84026fd79b90c765693b1eaadb4",{"version":"0f68b2656238df3e30dc1184e99609d4ee3ace612318224da94f03ad6307a441","signature":"c7cf3fbe9c421d379191943979f74c5c50c0b6e9461aa55a1d8dfda62add2c0f"},"d5ef7ea680bee9d446f43c3578a395d8557aa941ae80ca0bda9605e2bc165ab8","34154b1dc9a47dc722a25166574e7856fe02e11e6e6562dddba3451ed3f5d140",{"version":"14118552fa8ea7068d9df00e24bf1b61451bd523bd3d100016a7ced6eaf984e0","signature":"f804e1e4093792d3d35b7e6877bdf26dd9d31704c0e0b5d6825675726391bde6"},{"version":"3c583070c599b258682f1829929d7002772e68a961a7614d1517ad78c76917bb","signature":"557a72c46f29c2946b12c3aa1b3c6ddbb1b6f7f4d178969973e67fd2b2e0289a"},{"version":"289c14b1347fa866c12a345771c0c7b8b7e17acbf758db2b78422b4553b4cdbb","signature":"9229bb8ed73421a8ce66a24673e5f07d18dd59a1c3b7a41b2636e59382d57eb8"},{"version":"c03a9701e0a8360e9dd9509aa2311b67afae09eb5eab9deafeab5ced141c371e","signature":"e3c9e2adc695fe1674fcc4e250c935a288ee3b8b39beabf690a1fa994f123aef"},"2233c13e98f0a50b736425c49c0f6e99f1af3c33f5a451da7e5086696458aa8a","ff9b7cefad81a7f22a1d300523c4cd1f1432c47c502ba019b29c0e5da3676afd",{"version":"793cc7fa100d8c8261af66549f537060436c6fc0f70a9d2cc49558e28da6e10e","impliedFormat":1},{"version":"cdbd35458f506b843f280d695d192968af4b0f27db3d5c0707934d97e96dd88d","impliedFormat":1},{"version":"0d86e751cdf42541f9b0dc579f1fad78ba02c9b57104723187d942c53bd63092","impliedFormat":1},{"version":"dae32a2a0cc5be690082fc59bd4b16ab58fc400d8802dc3073657ff4e825c48a","impliedFormat":1},{"version":"654bbcc8726e2a7a684460eda9c7d25847716587b04a72e0b88e75d828aa3db1","impliedFormat":1},{"version":"5c252941b1299551ad4f3f44ef995ee7a79585aebe2c5318271297496f2611c6","impliedFormat":1},{"version":"84ab1b8202996d370d7580cd15c85fe5981c9fd8ce4e20019de7203c8e9b594e","impliedFormat":1},{"version":"b7b58b11be801068222c596659957f4defdeec281974feb02a28d9c9ea38cd51","impliedFormat":1},{"version":"403e071e95c87cff78762cb6d0b374f28a333fd63957d542953a93cde367675f","impliedFormat":1},{"version":"039917782bd9cdfb0be18c3ab57d7502657e2b24fe62b3621586ab3d13dd8ae8","impliedFormat":1},{"version":"898f97b7fab287b8dd26c0f8d91fafe17bec2578645a9741ce8242f3c70ae517","impliedFormat":1},{"version":"d488bd13a9d714f30014a5f8a8df1be6b11ae3411efa63ba6643af44749bc153","impliedFormat":1},{"version":"108373dfa09124518b566ff59191b3e91662e6119385a05e7f99375c11095fcb","signature":"7709e3d1c1408c9169ba30f175280672b5edcfb01f58ced3283469547d90501f"},{"version":"8bf0b50dc9ebfc215ec560a938197bce95c37645cb4ec0f3309779cf5a7a06aa","signature":"022545071c3ca9d6812f414b3275190404d8493ce5048e009ad6c2a47dcf4894"},{"version":"68219da40672405b0632a0a544d1319b5bfe3fa0401f1283d4c9854b0cc114ce","impliedFormat":99},{"version":"ee40ce45ec7c5888f0c1042abc595649d08f51e509af2c78c77403f1db75482a","impliedFormat":99},{"version":"7841bca23a8296afd82fd036fc8d3b1fed3c1e0c82ee614254693ccd47e916fc","impliedFormat":99},{"version":"b09c433ed46538d0dc7e40f49a9bf532712221219761a0f389e60349c59b3932","impliedFormat":99},{"version":"06360da67958e51b36f6f2545214dca3f1bf61c9aef6e451294fcc9aca230690","impliedFormat":99},{"version":"3672426a97d387a710aa2d0c3804024769c310ce9953771d471062cc71f47d51","impliedFormat":99},{"version":"53f6001edc7f51297d0605002ce6372d64ac5b59248c828fc5e57098ad63c7de","signature":"3c8793b0ba6d20eb8e9c1db4bf5474b4fcb639126ec39caf5e9e57ad4ccaea35"},"c8b3ac26638361925a17aea6931f1c2c4882c303f54aa8ae890c215531a8d3d1",{"version":"207764c6e73aad189cbe0662cfe9823d6532d31a4fb94adefdfe436850654327","impliedFormat":99},"5f2a1ad704932d4dcacf30ca90f9bc9a9e60a6c38ca24b24b0a9f801351a1f51",{"version":"2ecd56d1652f91af15ee9834739490790627e73b02c9642511547fa53c383bb5","signature":"e1c23740400ea2325dfa1e2efedcceef6841ac8ae77a2a3d1de99dacd1dd2291"},{"version":"9626167000b8c18a8278d60a504b64bc52a289ff8605f38be9cc8bcda79ae6fc","impliedFormat":99},{"version":"5f90f5039fed7c15395979c841bf034fd465af93640e7a00e2d438670a6781bf","signature":"d8d28f2fcbcae6f0f44dc9f69e3347762bc5f6dc52d19662919295c102f0327e"},{"version":"9df0f2ba281c306c80873282ff8993bd76198e86d478bb5ad36c80ee2b66674b","impliedFormat":1},{"version":"62eddbc455323780ab083cea732a3c183effbabd9220caa6f8b2228bc4920099","signature":"69ece6525d3729eea228dcbf3f23b3556a35fc6208778344a36f4518f75b07a4"},"bed62214d6cf0014e4755f55c86c63bb6bac9be7b1dad8e8e3158e1bad779678","11c42344657aa6ae78f9b8bb936b58a505f8e184c627110f3fd7a45bb9cb4614",{"version":"f5cdfc42b681e24ce5ec242cb74ab362efdec2feb162286e2ea678af5e4f5486","signature":"8b80293f9b6e1a1ee02b58681757fb5fa0156b1d1a7a733fbb5cbd0f59be0542"},{"version":"f7e97b6691a93f9eaadabccc067528324a6c709c59104bc7454da6129d7e6a96","signature":"256f532af900fb3b773f90749f465939b3a1af48a915d301148b85e42638b560"},{"version":"d88ced626bd310ed85d0ac8ca791eedafee719966e90a1b2f236585aa53879cd","impliedFormat":1},"51157216f8192e897c06a6e50c097e355e146a9c28e829a73a2c04a2f5315c08",{"version":"66b4e068f93e9fbd098a00b1cf08cee953f520f19bdd8b6288f72483b530ca69","signature":"f806fd6a76c74c90f3ce93541eb0ce2ca7354f0a308ead8a3108fecd91d8e7f0"},{"version":"956b40a7adda2047a826b7f3b585c8d4fcf482da4e5e2b3d7d04e30ae15ae07f","signature":"d585d4fc99662c28c0e5c3051b6520ec1cb14a446784f1f331f88cde9efc000a"},{"version":"fcd3e9649c8c1fe436f775028ef331cde276df2ac45e6a0afdc293216f504798","signature":"4308f33588c81b4e9d1666e05121f28fe9b01d77d99c2463dbd19083b3bb03c8"},{"version":"cbdd4cecb70a99e0bc07181ff40374c0b32a4e6cd60c1d953260f5b29e1cdced","signature":"c2ec53f8cb731c62de01f0b6ff22711d2948ceaef54ee2aaa8615a1e89b60a47"},{"version":"b3f432e5a819e6591a9340f6982799f180aaa96aed8ebead55b7cefda05a7b68","signature":"b749b300218bd5a6c51aeef344903ca0a1aaab39584c73a35d7940c89302a05f"},{"version":"7f1823533a78530627c6336af5a30b688984b7d2f8c6f420fa76a0a1eaffa2c4","signature":"fb375f23bd30fb10b503a3c7d153fcb89cc555698a28f470ce87639fc21e7863"},{"version":"6e1b4e2cafadda703325dfd9a7b70c8b9f89902f086d4b91e023dc1689635dd2","signature":"e4d058f82f636ca42c4f8ea501bf35583b32676678c9c361a0d16fa713bd9c4d"},"d2d354009b23c65e6ff5d43dbc1eb1939b3ac73da1985e14deef1c5a0db6356d",{"version":"7535af8bf8c2d8f83c0e341e9d6ab2c1b9869a2c2ffd2871849611d07dc18b1b","signature":"881266d816f6cf62c67d1c5bd6b6e44e00d69d77d05ad5252b763d1688c2f255"},{"version":"5aa75e28a5c06854b1cdd85dccf8039eb48ed8f836d577da150ff4dd50ee1845","signature":"43ad0e6f8da67602b1ef365a327bce5d4a71f993808f5b2f905e68bcdec9d95b"},"2fc298186d5943aa8b7627d571dcb3a56302de77a303b4795a195e632a40b486","e50cfa2f37a0a30f28e18056649974ecc7d992fab987353782be722ca3c6ed8f",{"version":"70e345d53cc00be14d6f3024838bbff3ef0613d56b71ae3f796d7b2a0d473b07","affectsGlobalScope":true,"impliedFormat":1},{"version":"a7cf18f181ffa259eee03714d06e9ca3764da7b19b1eb8614dacac00cd90e3db","signature":"4e436d839d0dee30e172ee3696a1798a197eb6e36b909b14135392b1149e4436"},{"version":"566d9faf35c12542c4830bb7b62b50d9f6d62778257aef2e579ad21f5e5ca0a9","signature":"358cf3eae8b1c322ae2069b8e2d57e943e70c05eb306adbf8286c7cbeb8dd939"},{"version":"cff399d99c68e4fafdd5835d443a980622267a39ac6f3f59b9e3d60d60c4f133","impliedFormat":99},{"version":"6ada175c0c585e89569e8feb8ff6fc9fc443d7f9ca6340b456e0f94cbef559bf","impliedFormat":99},{"version":"e56e4d95fad615c97eb0ae39c329a4cda9c0af178273a9173676cc9b14b58520","impliedFormat":99},{"version":"73e8dfd5e7d2abc18bdb5c5873e64dbdd1082408dd1921cad6ff7130d8339334","impliedFormat":99},{"version":"fc820b2f0c21501f51f79b58a21d3fa7ae5659fc1812784dbfbb72af147659ee","impliedFormat":99},{"version":"4f041ef66167b5f9c73101e5fd8468774b09429932067926f9b2960cc3e4f99d","impliedFormat":99},{"version":"31501b8fc4279e78f6a05ca35e365e73c0b0c57d06dbe8faecb10c7254ce7714","impliedFormat":99},{"version":"7bc76e7d4bbe3764abaf054aed3a622c5cdbac694e474050d71ce9d4ab93ea4b","impliedFormat":99},{"version":"ff4e9db3eb1e95d7ba4b5765e4dc7f512b90fb3b588adfd5ca9b0d9d7a56a1ae","impliedFormat":99},{"version":"f205fd03cd15ea054f7006b7ef8378ef29c315149da0726f4928d291e7dce7b9","impliedFormat":99},{"version":"d683908557d53abeb1b94747e764b3bd6b6226273514b96a942340e9ce4b7be7","impliedFormat":99},{"version":"7c6d5704e2f236fddaf8dbe9131d998a4f5132609ef795b78c3b63f46317f88a","impliedFormat":99},{"version":"d05bd4d28c12545827349b0ac3a79c50658d68147dad38d13e97e22353544496","impliedFormat":99},{"version":"b6436d90a5487d9b3c3916b939f68e43f7eaca4b0bb305d897d5124180a122b9","impliedFormat":99},{"version":"04ace6bedd6f59c30ea6df1f0f8d432c728c8bc5c5fd0c5c1c80242d3ab51977","impliedFormat":99},{"version":"57a8a7772769c35ba7b4b1ba125f0812deec5c7102a0d04d9e15b1d22880c9e8","impliedFormat":99},{"version":"badcc9d59770b91987e962f8e3ddfa1e06671b0e4c5e2738bbd002255cad3f38","impliedFormat":99},{"version":"56f7acff2c78cc48ea650f9ca73502c5c6c4535240f0e010c6b6e6868a1252b4","signature":"0911df077be53eeb3bcc36b49961227b9a8b53e2fe2ee7281a77c8baf41f2aac"},{"version":"cc0f00efa12cf87d9114b80e7bd624ad73be0ca1056453246a10acaf998aa271","signature":"f12f69bed16c4c6e24f8e2e062742cab5c50c0181408e3b75da31416c3a80e38"},{"version":"3e38128ed6e868afd274c27743579d360088e11be10f0f9abbbf70737aac9172","signature":"87a9665c0378ba1f06e5a2e4cba654a86764ad2021e7e413513f8ae22d6b8da1"},{"version":"89121c1bf2990f5219bfd802a3e7fc557de447c62058d6af68d6b6348d64499a","impliedFormat":1},{"version":"79b4369233a12c6fa4a07301ecb7085802c98f3a77cf9ab97eee27e1656f82e6","impliedFormat":1},{"version":"6c3741e44c9b0ebd563c8c74dcfb2f593190dfd939266c07874dc093ecb4aa0e","impliedFormat":99},{"version":"dd879365b83adc753046cd9dc0ff42892af5976d591f43366d7ca8ccd71d637b","impliedFormat":99},{"version":"a65735a086ae8b401c1c41b51b41546532670c919fd2cedc1606fd186fcee2d7","impliedFormat":99},{"version":"fe021dbde66bd0d6195d4116dcb4c257966ebc8cfba0f34441839415e9e913e1","impliedFormat":99},{"version":"d52a4b1cabee2c94ed18c741c480a45dd9fed32477dd94a9cc8630a8bc263426","impliedFormat":99},{"version":"d059a52684789e6ef30f8052244cb7c52fb786e4066ac415c50642174cc76d14","impliedFormat":99},{"version":"2ccdfd33a753c18e8e5fe8a1eadefff968531d920bc9cdc7e4c97b0c6d3dcaf8","impliedFormat":99},{"version":"d64a434d7fb5040dbe7d5f4911145deda53e281b3f1887b9a610defd51b3c1a2","impliedFormat":99},{"version":"927f406568919fd7cd238ef7fe5e9c5e9ec826f1fff89830e480aff8cfd197da","impliedFormat":99},{"version":"a77d742410fe78bb054d325b690fda75459531db005b62ba0e9371c00163353c","impliedFormat":99},{"version":"f8de61dd3e3c4dc193bb341891d67d3979cb5523a57fcacaf46bf1e6284e6c35","impliedFormat":99},{"version":"addca1bb7478ebc3f1c67b710755acc945329875207a3c9befd6b5cbcab12574","impliedFormat":99},{"version":"50b565f4771b6b150cbf3ae31eb815c31f15e2e0f45518958a5f4348a1a01660","impliedFormat":99},{"version":"eaee342ebb3a826a48c87c1af3ec9359ee5452da6e960751fcd5c5dd8ca8d7ea","impliedFormat":99},{"version":"bc7f70d67697f70e89ef74f6620b9ac0096a3f0ee3cdf2531b4fa08d2af4219d","impliedFormat":99},{"version":"3a4cb065e59a5ad370745d4d60175f0e024cf4a7ad2d1dcf3ee7dba619ea91af","impliedFormat":99},"98b0291da3c0a861bed439bc9464a685f84f39534fa444336e021d1ffea8893e",{"version":"6032921486b0e052b143049b93f6525d2e4946b3b0f28b1130e688553bdd8738","signature":"86da36f40439ebb26a5fe5b2f5ba8829f5cefb70d70dd614368349cd72a847a3"},{"version":"d62497e13d9b8865922b589f8f1d392faca3aa24c47dcf8a86ac58f9ed72658d","signature":"29a6d00224ccd32165dc110c92f3a619b77737b104434805eac91a6a1dc73e51"},{"version":"5c54a34e3d91727f7ae840bfe4d5d1c9a2f93c54cb7b6063d06ee4a6c3322656","impliedFormat":99},{"version":"db4da53b03596668cf6cc9484834e5de3833b9e7e64620cf08399fe069cd398d","impliedFormat":99},{"version":"ac7c28f153820c10850457994db1462d8c8e462f253b828ad942a979f726f2f9","impliedFormat":99},{"version":"f9b028d3c3891dd817e24d53102132b8f696269309605e6ed4f0db2c113bbd82","impliedFormat":99},{"version":"fb7c8d90e52e2884509166f96f3d591020c7b7977ab473b746954b0c8d100960","impliedFormat":99},{"version":"0bff51d6ed0c9093f6955b9d8258ce152ddb273359d50a897d8baabcb34de2c4","impliedFormat":99},{"version":"45cec9a1ba6549060552eead8959d47226048e0b71c7d0702ae58b7e16a28912","impliedFormat":99},{"version":"ef13c73d6157a32933c612d476c1524dd674cf5b9a88571d7d6a0d147544d529","impliedFormat":99},{"version":"13918e2b81c4288695f9b1f3dcc2468caf0f848d5c1f3dc00071c619d34ff63a","impliedFormat":99},{"version":"6907b09850f86610e7a528348c15484c1e1c09a18a9c1e98861399dfe4b18b46","impliedFormat":99},{"version":"12deea8eaa7a4fc1a2908e67da99831e5c5a6b46ad4f4f948fd4759314ea2b80","impliedFormat":99},{"version":"f0a8b376568a18f9a4976ecb0855187672b16b96c4df1c183a7e52dc1b5d98e8","impliedFormat":99},{"version":"8124828a11be7db984fcdab052fd4ff756b18edcfa8d71118b55388176210923","impliedFormat":99},{"version":"092944a8c05f9b96579161e88c6f211d5304a76bd2c47f8d4c30053269146bc8","impliedFormat":99},{"version":"e2b48abff5a8adc6bb1cd13a702b9ef05e6045a98e7cfa95a8779b53b6d0e69d","impliedFormat":1},{"version":"ffb518fc55181aefd066c690dbc0f8fa6a1533c8ddac595469c8c5f7fda2d756","affectsGlobalScope":true,"impliedFormat":1},{"version":"a660aa95476042d3fdcc1343cf6bb8fdf24772d31712b1db321c5a4dcc325434","impliedFormat":1},{"version":"a7ca8df4f2931bef2aa4118078584d84a0b16539598eaadf7dce9104dfaa381c","impliedFormat":1},{"version":"11443a1dcfaaa404c68d53368b5b818712b95dd19f188cab1669c39bee8b84b3","impliedFormat":1},{"version":"36977c14a7f7bfc8c0426ae4343875689949fb699f3f84ecbe5b300ebf9a2c55","impliedFormat":1},{"version":"035d0934d304483f07148427a5bd5b98ac265dae914a6b49749fe23fbd893ec7","impliedFormat":99},{"version":"e2ed5b81cbed3a511b21a18ab2539e79ac1f4bc1d1d28f8d35d8104caa3b429f","impliedFormat":99},{"version":"402e5c534fb2b85fa771170595db3ac0dd532112c8fa44fc23f233bc6967488b","impliedFormat":1},{"version":"8885cf05f3e2abf117590bbb951dcf6359e3e5ac462af1c901cfd24c6a6472e2","impliedFormat":1},{"version":"333caa2bfff7f06017f114de738050dd99a765c7eb16571c6d25a38c0d5365dc","impliedFormat":1},{"version":"e61df3640a38d535fd4bc9f4a53aef17c296b58dc4b6394fd576b808dd2fe5e6","impliedFormat":1},{"version":"459920181700cec8cbdf2a5faca127f3f17fd8dd9d9e577ed3f5f3af5d12a2e4","impliedFormat":1},{"version":"4719c209b9c00b579553859407a7e5dcfaa1c472994bd62aa5dd3cc0757eb077","impliedFormat":1},{"version":"7ec359bbc29b69d4063fe7dad0baaf35f1856f914db16b3f4f6e3e1bca4099fa","impliedFormat":1},{"version":"70790a7f0040993ca66ab8a07a059a0f8256e7bb57d968ae945f696cbff4ac7a","impliedFormat":1},{"version":"d1b9a81e99a0050ca7f2d98d7eedc6cda768f0eb9fa90b602e7107433e64c04c","impliedFormat":1},{"version":"a022503e75d6953d0e82c2c564508a5c7f8556fad5d7f971372d2d40479e4034","impliedFormat":1},{"version":"b215c4f0096f108020f666ffcc1f072c81e9f2f95464e894a5d5f34c5ea2a8b1","impliedFormat":1},{"version":"644491cde678bd462bb922c1d0cfab8f17d626b195ccb7f008612dc31f445d2d","impliedFormat":1},{"version":"dfe54dab1fa4961a6bcfba68c4ca955f8b5bbeb5f2ab3c915aa7adaa2eabc03a","impliedFormat":1},{"version":"1251d53755b03cde02466064260bb88fd83c30006a46395b7d9167340bc59b73","impliedFormat":1},{"version":"47865c5e695a382a916b1eedda1b6523145426e48a2eae4647e96b3b5e52024f","impliedFormat":1},{"version":"e42820cd611b15910c204cd133f692dcd602532b39317d4f2a19389b27e6f03d","impliedFormat":1},{"version":"331b8f71bfae1df25d564f5ea9ee65a0d847c4a94baa45925b6f38c55c7039bf","impliedFormat":1},{"version":"2a771d907aebf9391ac1f50e4ad37952943515eeea0dcc7e78aa08f508294668","impliedFormat":1},{"version":"0146fd6262c3fd3da51cb0254bb6b9a4e42931eb2f56329edd4c199cb9aaf804","impliedFormat":1},{"version":"183f480885db5caa5a8acb833c2be04f98056bdcc5fb29e969ff86e07efe57ab","impliedFormat":99},{"version":"f7eebe1b25040d805aefe8971310b805cd49b8602ec206d25b38dc48c542f165","impliedFormat":1},{"version":"a18642ddf216f162052a16cba0944892c4c4c977d3306a87cb673d46abbb0cbf","impliedFormat":1},{"version":"509f8efdfc5f9f6b52284170e8d7413552f02d79518d1db691ee15acc0088676","impliedFormat":1},{"version":"4ec16d7a4e366c06a4573d299e15fe6207fc080f41beac5da06f4af33ea9761e","impliedFormat":1},{"version":"7870becb94cbc11d2d01b77c4422589adcba4d8e59f726246d40cd0d129784d8","affectsGlobalScope":true,"impliedFormat":1},{"version":"7f698624bbbb060ece7c0e51b7236520ebada74b747d7523c7df376453ed6fea","impliedFormat":1},{"version":"f70b8328a15ca1d10b1436b691e134a49bc30dcf3183a69bfaa7ba77e1b78ecd","impliedFormat":1},{"version":"ff3660e2664e6096196280deb4e176633b1bb1e58a7dcc9b021ec0e913a6f96f","impliedFormat":99},{"version":"b34b5f6b506abb206b1ea73c6a332b9ee9c8c98be0f6d17cdbda9430ecc1efab","impliedFormat":99},{"version":"75d4c746c3d16af0df61e7b0afe9606475a23335d9f34fcc525d388c21e9058b","impliedFormat":99},{"version":"fa959bf357232201c32566f45d97e70538c75a093c940af594865d12f31d4912","impliedFormat":99},{"version":"d2c52abd76259fc39a30dfae70a2e5ce77fd23144457a7ff1b64b03de6e3aec7","impliedFormat":99},{"version":"e6233e1c976265e85aa8ad76c3881febe6264cb06ae3136f0257e1eab4a6cc5a","impliedFormat":99},{"version":"f73e2335e568014e279927321770da6fe26facd4ac96cdc22a56687f1ecbb58e","impliedFormat":99},{"version":"317878f156f976d487e21fd1d58ad0461ee0a09185d5b0a43eedf2a56eb7e4ea","impliedFormat":99},{"version":"324ac98294dab54fbd580c7d0e707d94506d7b2c3d5efe981a8495f02cf9ad96","impliedFormat":99},{"version":"9ec72eb493ff209b470467e24264116b6a8616484bca438091433a545dfba17e","impliedFormat":99},{"version":"83ab446a053419dfd8e40526abf297c4d9d11f175b05512de1915a8ab7697b67","impliedFormat":99},{"version":"49747416f08b3ba50500a215e7a55d75268b84e31e896a40313c8053e8dec908","impliedFormat":99},{"version":"81e634f1c5e1ca309e7e3dc69e2732eea932ef07b8b34517d452e5a3e9a36fa3","impliedFormat":99},{"version":"4e238ace06d3b49ea02f6a1170259e6a803154b03bfd069e5e83d8d0053fbae7","impliedFormat":99},{"version":"427fe2004642504828c1476d0af4270e6ad4db6de78c0b5da3e4c5ca95052a99","impliedFormat":1},{"version":"c8905dbea83f3220676a669366cd8c1acef56af4d9d72a8b2241b1d044bb4302","affectsGlobalScope":true,"impliedFormat":99},{"version":"891694d3694abd66f0b8872997b85fd8e52bc51632ce0f8128c96962b443189f","impliedFormat":99},{"version":"69bf2422313487956e4dacf049f30cb91b34968912058d244cb19e4baa24da97","impliedFormat":99},{"version":"971a2c327ff166c770c5fb35699575ba2d13bba1f6d2757309c9be4b30036c8e","impliedFormat":99},{"version":"4f45e8effab83434a78d17123b01124259fbd1e335732135c213955d85222234","impliedFormat":99},{"version":"7bd51996fb7717941cbe094b05adc0d80b9503b350a77b789bbb0fc786f28053","impliedFormat":99},{"version":"b62006bbc815fe8190c7aee262aad6bff993e3f9ade70d7057dfceab6de79d2f","impliedFormat":99},{"version":"d6b4dfab234307239ca8f1329870f6c10341447fc0581388f8d99565e550ffe9","impliedFormat":99},{"version":"1f7e5e81b810bae68833b9f78c276ee929dbc7e9c4c2791bc70a257fbb9f6e78","impliedFormat":99},{"version":"04471dc55f802c29791cc75edda8c4dd2a121f71c2401059da61eff83099e8ab","impliedFormat":99},{"version":"120a80aa556732f684db3ed61aeff1d6671e1655bd6cba0aa88b22b88ac9a6b1","affectsGlobalScope":true,"impliedFormat":99},{"version":"e58c0b5226aff07b63be6ac6e1bec9d55bc3d2bda3b11b9b68cccea8c24ae839","affectsGlobalScope":true,"impliedFormat":99},{"version":"4b2bcddb85fe211e040d25623b4615abf53f11a43c2c59539a480f0ab95cdd3c","impliedFormat":99},{"version":"5a88655bf852c8cc007d6bc874ab61d1d63fba97063020458177173c454e9b4a","impliedFormat":99},{"version":"7e4dfae2da12ec71ffd9f55f4641a6e05610ce0d6784838659490e259e4eb13c","impliedFormat":99},{"version":"c30a41267fc04c6518b17e55dcb2b810f267af4314b0b6d7df1c33a76ce1b330","impliedFormat":1},{"version":"72422d0bac4076912385d0c10911b82e4694fc106e2d70added091f88f0824ba","impliedFormat":1},{"version":"da251b82c25bee1d93f9fd80c5a61d945da4f708ca21285541d7aff83ecb8200","impliedFormat":1},{"version":"4c8ca51077f382498f47074cf304d654aba5d362416d4f809dfdd5d4f6b3aaca","impliedFormat":1},{"version":"c6bddf16578495abc8b5546850b047f30c4b5a2a2b7fecefc0e11a44a6e91399","impliedFormat":1},{"version":"c6a9615d13b98f555a54aaa7850bc3d061ffbfe6e14ad9356de3b44294510344","impliedFormat":99},{"version":"5bfc76b1ae32d590caf0905be980c4eb4cf2322536a32199fc6389618a1ff773","signature":"031987dbdbc4c3aadaaa77446075e7df298e78a1d6cfdf3380c57288f5899aef"},{"version":"7543c12b2f01ed0c3ba44c04f258e0929be5ff60d59dccd6e8be4516709aa8b1","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"3dfef54f9a4fe4c187ef36775d511d213d5117a7259a3c51c23658a30bd7dca8","signature":"5be55abde0d1d9290f19b1d7dca707f2dd4ef9b1674dd96e2baead2a4b199911"},{"version":"c57b441e0c0a9cbdfa7d850dae1f8a387d6f81cbffbc3cd0465d530084c2417d","impliedFormat":99},{"version":"8b15d05f236e8537d3ecbe4422ce46bf0de4e4cd40b2f909c91c5818af4ff17a","impliedFormat":1},{"version":"7c8c3dfc0cdd370d44932828eb067ef771c8fe7996693221d5d4b90af6d54f2d","signature":"512960c0e955a2324b34354dac25e3e4d431a1af4cd33077935eda5e95c8b7e1"},{"version":"6c05d0fcee91437571513c404e62396ee798ff37a2d8bef2104accdc79deb9c0","impliedFormat":1},{"version":"958d33cd8a85293728acad21c1f3881da56b805bc11a3ec862d6aa355c152d90","signature":"8969487db9f4484b672e2d890ae89ce4404886cd9cd56f3b3ca11eca2389ec0a"},{"version":"12d276eec876ec11e68565759df5743fe4d85d89f2683cc780f83ab0600ce46e","signature":"9e035956ba24b66da875d897fb7aec5232d60f32260a55ccd387602e7694290d"},{"version":"5ad798a425a3f25162e9c5b40b10d67d423bd44f702fed6629ce9be5eada2fdc","signature":"3abb621e6779f05e661dcb37ce8733f29281ec32662d1fd77394be38a46cc0f1"},{"version":"291c3384da12bb864ad6bec02f746744c9287c29effa46103cb34217d979c7ae","signature":"9271400fff0e8e157889bb4563e6d7338614c8f31fadfbe6d053f205a6e61f2c"},"87405c4f3cb2c3f2dda6cfe531bdcec4031bd41209b754bbcd79abf6ebd5efb1","d1375988d5432fd2d96d9f1052d78cf64fe7f7cdc9ed1dc3e3b1d1cb72c1fffb","3dd552f76bb1d9335f1d0ec20ba2e4430514a5bb74978318f79a47227454daad","c29a749f67ac946cb0431f29bf52a12259854806fa9b60a95511f68cb6fcc45f",{"version":"a80ec72f5e178862476deaeed532c305bdfcd3627014ae7ac2901356d794fc93","impliedFormat":99},{"version":"2fbe402f0ee5aa8ab55367f88030f79d46211c0a0f342becaa9f648bf8534e9d","impliedFormat":1},{"version":"b94258ef37e67474ac5522e9c519489a55dcb3d4a8f645e335fc68ea2215fe88","impliedFormat":1},{"version":"8d2f8df73de6a72aac1187e91567fc2b5d656392c6081bd24ff69e98a3ee5b6e","signature":"5327ce307cda866aac537d6f4033c161490c7085cf023e1cc9842d527ea583e2"},{"version":"02eabe7cb107d32f957fdd8ded0413c0c3361be8b10b0dd09895e041047d6433","signature":"20a4889dcdfbfb38e094af503d9764d3dbb68992c42ac620abbe46849766417f"},{"version":"87fe021367e1d72ff244e9d263c87a2b83834cf685d757c913e47462a97bf64d","impliedFormat":1},{"version":"a9373d52584b48809ffd61d74f5b3dfd127da846e3c4ee3c415560386df3994b","impliedFormat":99},{"version":"caf4af98bf464ad3e10c46cf7d340556f89197aab0f87f032c7b84eb8ddb24d9","impliedFormat":99},{"version":"7ec047b73f621c526468517fea779fec2007dd05baa880989def59126c98ef79","impliedFormat":99},{"version":"6b5f886fe41e2e767168e491fe6048398ed6439d44e006d9f51cc31265f08978","impliedFormat":99},{"version":"56a87e37f91f5625eb7d5f8394904f3f1e2a90fb08f347161dc94f1ae586bdd0","impliedFormat":99},{"version":"6b863463764ae572b9ada405bf77aac37b5e5089a3ab420d0862e4471051393b","impliedFormat":99},{"version":"904d6ad970b6bd825449480488a73d9b98432357ab38cf8d31ffd651ae376ff5","impliedFormat":99},{"version":"233267a4a036c64aee95f66a0d31e3e0ef048cccc57dd66f9cf87582b38691e4","impliedFormat":99},{"version":"7ad6220dc089ac11396531ee07cb307fb49e863604001e5f6dd596c5518a7283","signature":"852f6f081c9caf94d54e81a9be58c86e2320efb1d5260c2e580d999953227cdc"},{"version":"3196a0c90baff9dab931de0580d861a74e96b83b0820cc09bd10a1a091f43ab7","signature":"238e820fa45652e52b0a8f23ce4f931b1768a684d18d524b76244f582e12ed40"},{"version":"8dd450de6d756cee0761f277c6dc58b0b5a66b8c274b980949318b8cad26d712","impliedFormat":99},{"version":"dfcf16e716338e9fe8cf790ac7756f61c85b83b699861df970661e97bf482692","impliedFormat":99},{"version":"e7441be68f390975c6155c805cea8f54cc1b7f3656b6b9440ecbbbd7753499e6","impliedFormat":99},{"version":"7207646a9aa3189266d9f68e9e6b9bce3740768756bafe4c0c4784409e2c1823","signature":"a62a952464813ad6681414a2f6708d8d8cb5ccb7ee948cef6e7f7d6f11869795"},{"version":"491a87bfae8f28773624d353bf56b9288d0852413e814d508e0d086dc7b06edb","signature":"90ada4c3ca530172af0d36a8da6ea9a1ea74d54da3bad6448982ad8674685abc"},{"version":"6628e8fde207857b9ba08910d386eeea8213d7d745b4e0ae8b95332b52730db9","signature":"fe4ceb08d9067ccba5e917a320e68f5b6c3e371eeb6cfc352a1035b278585100"},{"version":"2a94c2796ae9fb084fac01eb879eb79b1b8befd5beadc26243de7875d59a40ef","signature":"618d5ca816573adb0cf3059a11942d4ae0c1b91677a4a7c567980e6eca7217a2"},{"version":"4a5aa16151dbec524bb043a5cbce2c3fec75957d175475c115a953aca53999a9","impliedFormat":99},{"version":"3e6ed31457bb7080044792d91cb8ab3e3f91894563fa5891285e786f16770eaf","signature":"bd0b0a958a9c1be68d65f4bbae0b73b64df4c25cd7609bebd33095772b280843"},{"version":"71acd198e19fa38447a3cbc5c33f2f5a719d933fccf314aaff0e8b0593271324","impliedFormat":99},{"version":"9ec42c8a57e82311118b794318409ee02b2cebfa49ba6cce8457cff6448cd471","signature":"7711adec5eed0b4cb819cae62ea768204c4bd260fa3ee1aceb586358db5f6aa0"},{"version":"5c5d901a999dfe64746ef4244618ae0628ac8afdb07975e3d5ed66e33c767ed0","impliedFormat":99},{"version":"85d08536e6cd9787f82261674e7d566421a84d286679db1503432a6ccf9e9625","impliedFormat":99},{"version":"5702b3c2f5d248290ed99419d77ca1cc3e6c29db5847172377659c50e6303768","impliedFormat":99},{"version":"9764b2eb5b4fc0b8951468fb3dbd6cd922d7752343ef5fbf1a7cd3dfcd54a75e","impliedFormat":99},{"version":"1fc2d3fe8f31c52c802c4dee6c0157c5a1d1f6be44ece83c49174e316cf931ad","impliedFormat":99},{"version":"dc4aae103a0c812121d9db1f7a5ea98231801ed405bf577d1c9c46a893177e36","impliedFormat":99},{"version":"106d3f40907ba68d2ad8ce143a68358bad476e1cc4a5c710c11c7dbaac878308","impliedFormat":99},{"version":"42ad582d92b058b88570d5be95393cf0a6c09a29ba9aa44609465b41d39d2534","impliedFormat":99},{"version":"36e051a1e0d2f2a808dbb164d846be09b5d98e8b782b37922a3b75f57ee66698","impliedFormat":99},{"version":"d4a22007b481fe2a2e6bfd3a42c00cd62d41edb36d30fc4697df2692e9891fc8","impliedFormat":1},{"version":"a510938c29a2e04183c801a340f0bbb5a0ae091651bd659214a8587d710ddfbb","impliedFormat":99},{"version":"07bcf85b52f652572fc2a7ec58e6de5dd4fcaf9bbc6f4706b124378cedcbb95c","impliedFormat":99},{"version":"4368a800522ca3dd131d3bbc05f2c46a8b7d612eefca41d5c2e5ac0428a45582","impliedFormat":99},{"version":"720e56f06175c21512bcaeed59a4d4173cd635ea7b4df3739901791b83f835b9","impliedFormat":99},{"version":"349949a8894257122f278f418f4ee2d39752c67b1f06162bb59747d8d06bbc51","impliedFormat":99},{"version":"364832fbef8fb60e1fee868343c0b64647ab8a4e6b0421ca6dafb10dff9979ba","impliedFormat":99},{"version":"dfe4d1087854351e45109f87e322a4fb9d3d28d8bd92aa0460f3578320f024e9","impliedFormat":99},{"version":"886051ae2ccc4c5545bedb4f9af372d69c7c3844ae68833ed1fba8cae8d90ef8","impliedFormat":99},{"version":"3f4e5997cb760b0ef04a7110b4dd18407718e7502e4bf6cd8dd8aa97af8456ff","impliedFormat":99},{"version":"381b5f28b29f104bbdd130704f0a0df347f2fc6cb7bab89cfdc2ec637e613f78","impliedFormat":99},{"version":"a52baccd4bf285e633816caffe74e7928870ce064ebc2a702e54d5e908228777","impliedFormat":99},{"version":"c6120582914acd667ce268849283702a625fee9893e9cad5cd27baada5f89f50","impliedFormat":99},{"version":"da1c22fbbf43de3065d227f8acbc10b132dfa2f3c725db415adbe392f6d1359f","impliedFormat":99},{"version":"858880acbe7e15f7e4f06ac82fd8f394dfe2362687271d5860900d584856c205","impliedFormat":99},{"version":"8dfb1bf0a03e4db2371bafe9ac3c5fb2a4481c77e904d2a210f3fed7d2ad243a","impliedFormat":99},{"version":"bc840f0c5e7274e66f61212bb517fb4348d3e25ed57a27e7783fed58301591e0","impliedFormat":99},{"version":"26438d4d1fc8c9923aea60424369c6e9e13f7ce2672e31137aa3d89b7e1ba9af","impliedFormat":99},{"version":"1ace7207aa2566178c72693b145a566f1209677a2d5e9fb948c8be56a1a61ca9","impliedFormat":99},{"version":"a776df294180c0fdb62ba1c56a959b0bb1d2967d25b372abefdb13d6eba14caf","impliedFormat":99},{"version":"6c88ea4c3b86430dd03de268fd178803d22dc6aa85f954f41b1a27c6bb6227f2","impliedFormat":99},{"version":"11e17a3addf249ae2d884b35543d2b40fabf55ddcbc04f8ee3dcdae8a0ce61eb","impliedFormat":99},{"version":"4fd8aac8f684ee9b1a61807c65ee48f217bf12c77eb169a84a3ba8ddf7335a86","impliedFormat":99},{"version":"1d0736a4bfcb9f32de29d6b15ac2fa0049fd447980cf1159d219543aa5266426","impliedFormat":99},{"version":"11083c0a8f45d2ec174df1cb565c7ba9770878d6820bf01d76d4fedb86052a77","impliedFormat":99},{"version":"d8e37104ef452b01cefe43990821adc3c6987423a73a1252aa55fb1d9ebc7e6d","impliedFormat":99},{"version":"f5622423ee5642dcf2b92d71b37967b458e8df3cf90b468675ff9fddaa532a0f","impliedFormat":99},{"version":"21a942886d6b3e372db0504c5ee277285cbe4f517a27fc4763cf8c48bd0f4310","impliedFormat":99},{"version":"41a4b2454b2d3a13b4fc4ec57d6a0a639127369f87da8f28037943019705d619","impliedFormat":99},{"version":"e9b82ac7186490d18dffaafda695f5d975dfee549096c0bf883387a8b6c3ab5a","impliedFormat":99},{"version":"eed9b5f5a6998abe0b408db4b8847a46eb401c9924ddc5b24b1cede3ebf4ee8c","impliedFormat":99},{"version":"af85fde8986fdad68e96e871ae2d5278adaf2922d9879043b9313b18fae920b1","impliedFormat":99},{"version":"8a1f5d2f7cf4bf851cc9baae82056c3316d3c6d29561df28aff525556095554b","impliedFormat":99},{"version":"a5dbd4c9941b614526619bad31047ddd5f504ec4cdad88d6117b549faef34dd3","impliedFormat":99},{"version":"e87873f06fa094e76ac439c7756b264f3c76a41deb8bc7d39c1d30e0f03ef547","impliedFormat":99},{"version":"488861dc4f870c77c2f2f72c1f27a63fa2e81106f308e3fc345581938928f925","impliedFormat":99},{"version":"eff73acfacda1d3e62bb3cb5bc7200bb0257ea0c8857ce45b3fee5bfec38ad12","impliedFormat":99},{"version":"aff4ac6e11917a051b91edbb9a18735fe56bcfd8b1802ea9dbfb394ad8f6ce8e","impliedFormat":99},{"version":"1f68aed2648740ac69c6634c112fcaae4252fbae11379d6eabee09c0fbf00286","impliedFormat":99},{"version":"5e7c2eff249b4a86fb31e6b15e4353c3ddd5c8aefc253f4c3e4d9caeb4a739d4","impliedFormat":99},{"version":"14c8d1819e24a0ccb0aa64f85c61a6436c403eaf44c0e733cdaf1780fed5ec9f","impliedFormat":99},{"version":"011423c04bfafb915ceb4faec12ea882d60acbe482780a667fa5095796c320f8","impliedFormat":99},{"version":"f8eb2909590ec619643841ead2fc4b4b183fbd859848ef051295d35fef9d8469","impliedFormat":99},{"version":"fe784567dd721417e2c4c7c1d7306f4b8611a4f232f5b7ce734382cf34b417d2","impliedFormat":99},{"version":"45d1e8fb4fd3e265b15f5a77866a8e21870eae4c69c473c33289a4b971e93704","impliedFormat":99},{"version":"cd40919f70c875ca07ecc5431cc740e366c008bcbe08ba14b8c78353fb4680df","impliedFormat":99},{"version":"ddfd9196f1f83997873bbe958ce99123f11b062f8309fc09d9c9667b2c284391","impliedFormat":99},{"version":"2999ba314a310f6a333199848166d008d088c6e36d090cbdcc69db67d8ae3154","impliedFormat":99},{"version":"62c1e573cd595d3204dfc02b96eba623020b181d2aa3ce6a33e030bc83bebb41","impliedFormat":99},{"version":"ca1616999d6ded0160fea978088a57df492b6c3f8c457a5879837a7e68d69033","impliedFormat":99},{"version":"835e3d95251bbc48918bb874768c13b8986b87ea60471ad8eceb6e38ddd8845e","impliedFormat":99},{"version":"de54e18f04dbcc892a4b4241b9e4c233cfce9be02ac5f43a631bbc25f479cd84","impliedFormat":99},{"version":"453fb9934e71eb8b52347e581b36c01d7751121a75a5cd1a96e3237e3fd9fc7e","impliedFormat":99},{"version":"bc1a1d0eba489e3eb5c2a4aa8cd986c700692b07a76a60b73a3c31e52c7ef983","impliedFormat":99},{"version":"4098e612efd242b5e203c5c0b9afbf7473209905ab2830598be5c7b3942643d0","impliedFormat":99},{"version":"28410cfb9a798bd7d0327fbf0afd4c4038799b1d6a3f86116dc972e31156b6d2","impliedFormat":99},{"version":"514ae9be6724e2164eb38f2a903ef56cf1d0e6ddb62d0d40f155f32d1317c116","impliedFormat":99},{"version":"970e5e94a9071fd5b5c41e2710c0ef7d73e7f7732911681592669e3f7bd06308","impliedFormat":99},{"version":"491fb8b0e0aef777cec1339cb8f5a1a599ed4973ee22a2f02812dd0f48bd78c1","impliedFormat":99},{"version":"6acf0b3018881977d2cfe4382ac3e3db7e103904c4b634be908f1ade06eb302d","impliedFormat":99},{"version":"2dbb2e03b4b7f6524ad5683e7b5aa2e6aef9c83cab1678afd8467fde6d5a3a92","impliedFormat":99},{"version":"135b12824cd5e495ea0a8f7e29aba52e1adb4581bb1e279fb179304ba60c0a44","impliedFormat":99},{"version":"e4c784392051f4bbb80304d3a909da18c98bc58b093456a09b3e3a1b7b10937f","impliedFormat":99},{"version":"2e87c3480512f057f2e7f44f6498b7e3677196e84e0884618fc9e8b6d6228bed","impliedFormat":99},{"version":"66984309d771b6b085e3369227077da237b40e798570f0a2ddbfea383db39812","impliedFormat":99},{"version":"e41be8943835ad083a4f8a558bd2a89b7fe39619ed99f1880187c75e231d033e","impliedFormat":99},{"version":"260558fff7344e4985cfc78472ae58cbc2487e406d23c1ddaf4d484618ce4cfd","impliedFormat":99},{"version":"413d50bc66826f899c842524e5f50f42d45c8cb3b26fd478a62f26ac8da3d90e","impliedFormat":99},{"version":"d9083e10a491b6f8291c7265555ba0e9d599d1f76282812c399ab7639019f365","impliedFormat":99},{"version":"09de774ebab62974edad71cb3c7c6fa786a3fda2644e6473392bd4b600a9c79c","impliedFormat":99},{"version":"e8bcc823792be321f581fcdd8d0f2639d417894e67604d884c38b699284a1a2a","impliedFormat":99},{"version":"7c99839c518dcf5ab8a741a97c190f0703c0a71e30c6d44f0b7921b0deec9f67","impliedFormat":99},{"version":"44c14e4da99cd71f9fe4e415756585cec74b9e7dc47478a837d5bedfb7db1e04","impliedFormat":99},{"version":"1f46ee2b76d9ae1159deb43d14279d04bcebcb9b75de4012b14b1f7486e36f82","impliedFormat":99},{"version":"2838028b54b421306639f4419606306b940a5c5fcc5bc485954cbb0ab84d90f4","impliedFormat":99},{"version":"7116e0399952e03afe9749a77ceaca29b0e1950989375066a9ddc9cb0b7dd252","impliedFormat":99},{"version":"2f9501a28443c63187a4a868f2e33807640191569144bc65c9127ed0a6ee9f3b","impliedFormat":99},{"version":"411104404d2ef86c9bb334e193ce8475a4916407e9dd4ffb908bf503c05d17c1","impliedFormat":99},{"version":"4056a596190daaaa7268f5465b972915facc5eca90ee6432e90afa130ba2e4ee","impliedFormat":99},{"version":"aa20728bb08af6288996197b97b5ed7bcfb0b183423bb482a9b25867a5b33c57","impliedFormat":99},{"version":"5322c3686d3797d415f8570eec54e898f328e59f8271b38516b1366074b499aa","impliedFormat":99},{"version":"b0aa778c53f491350d81ec58eb3e435d34bef2ec93b496c51d9b50aa5a8a61e5","impliedFormat":99},{"version":"fa454230c32f38213198cf47db147caf4c03920b3f8904566b29a1a033341602","impliedFormat":99},{"version":"5571608cd06d2935efe2ed7ba105ec93e5c5d1e822d300e5770a1ad9a065c8b6","impliedFormat":99},{"version":"6bf8aa6ed64228b4d065f334b8fe11bc11f59952fd15015b690dfb3301c94484","impliedFormat":99},{"version":"41ae2bf47844e4643ebe68b8e0019af7a87a9daea2d38959a9f7520ada9ad3cb","impliedFormat":99},{"version":"f4498a2ac4186466abe5f9641c9279a3458fa5992dc10ed4581c265469b118d4","impliedFormat":99},{"version":"bd09a0e906dae9a9351c658e7d8d6caa9f4df2ba104df650ebca96d1c4f81c23","impliedFormat":99},{"version":"055ad004f230e10cf1099d08c6f5774c564782bd76fbefbda669ab1ad132c175","impliedFormat":99},{"version":"90b60ef1b8755f3ea9918bcd2a0a6b532cd7cd6c3505d4c9d7a039bd01aab1d8","impliedFormat":99},{"version":"347511f401eb79a6030b80f6a67d126ab41da1f663f0374c1d0a93312ae08e00","impliedFormat":99},{"version":"830c61b95e880bcd42f96d8a4181b0d84dec566ba5dd131b386dcb9608043832","impliedFormat":99},{"version":"f0eb42a134d7bb15f24aed89d8f3b5ffe6e326c74abdad75fff520c281239375","impliedFormat":99},{"version":"4e3ab6678655e507463a9bfa1aa39a4a5497fac4c75e5f7f7a16c0b7d001c34a","impliedFormat":99},{"version":"5bb37c8ed3d343ae525902e64be52edbc1ce0a5ad86ca2201118c0d8168078e5","impliedFormat":1},{"version":"61838b01af740887b4fe07d0602c2d62a66cd84cf309e4f7a5c21ec15d656510","impliedFormat":99},{"version":"15ec7a0b94628e74974c04379e20de119398638b3c70f0fa0c76ab92956be77c","impliedFormat":99},{"version":"c7127bf8fc759a15998224da4e1e3b000c5bf92ac54056e13fbbb2a452f9e866","signature":"ffa02ac525fb792992540cb40a17be68da5576ddc2cc8343703fbf1fd40e6e9f"},{"version":"7530b36ed645fce8e3b5580cf5441097b02bfdde4a55e1e81c339bd14cfb5a4e","signature":"80556459b07071a1a6ed97942d1ff31cc430ceb4c7ce06e9439fa26efb2e76d1"},{"version":"c63f453c0b246171a9d1f9e59fbcbd93d0de2d316fa19a04d57ac6a8d9f63ace","signature":"e053cf6d9b832c61965c15e3caae7df955cdd937a534c248f2401be32db47cea"},{"version":"39625af5acdc1cd4fee1badc2846bef58951edbc160f1df88f46dd8a39136fde","signature":"27fa51f2405d975be727dca01534558687fb4ec2c49bd0dad7aa70aa94ce6d2d"},{"version":"b2c1044a75902ca0b72d5646b35fc94fbf37924ed82e29c8b7c08f98136549e2","signature":"68cca24ed9ae3365aa4e2bf0067e88b21ad79af3ffc4cb42a82e90aab8aa3775"},{"version":"0b278338c0a4103ff31e1ef600410f3866f7ccdf7fedcfe1337031dc406163bb","signature":"a8ca137b90560f5e35a2ea1f34c70984464d6f25095827e07a9e73d0b1545af2"},{"version":"90bf743a2e30de0bad07606480e571a06f3d72d191d87e601529bd5b677ed10d","signature":"97491990ee7034f367fabae819b9034f501a3c9a9fd92d4c6f4afabe386084d0"},{"version":"c36c2f6e03ad9200e81664d3b97707326c64ab488bb6972c559bc8f9270c38c2","impliedFormat":1},{"version":"16f10dc2ee120d2d66fd55b11bcefc6f4e71467e038201ff14136dfaabcfbc2d","impliedFormat":1},{"version":"0b113cf0d2c4f042965b2da891ba244cde6ac29da1ac64953d62c8bf806c2ab4","impliedFormat":1},{"version":"7bbffc57d4a9d4a90db9ac537fde4b84afa05fdfe409f01d8013d38e727ecfc6","impliedFormat":1},{"version":"1a2cc1efa28bdd67e23cbbf0dacd47e569998c1de68662d476778e036d416f00","signature":"146abad6ac46fa37dd3a5a921d82efbcac1827aac208d85789254d6a119c1c43"},"f52ea918d01a050d255324aebd9fae674c147f5c2329e7cf6601f4df6d84b244",{"version":"d854b6f92b479e9fb4df4e12b95bd6210aa0e82eeb2786f8147df54f4c93492a","signature":"bc764dcaf688738aa5b2d8836d7a3b1a73fe4f36f50a366878070b7698fc4b53"},{"version":"68b6a7501a56babd7bcd840e0d638ee7ec582f1e70b3c36ebf32e5e5836913c8","impliedFormat":99},{"version":"7a14bf21ae8a29d64c42173c08f026928daf418bed1b97b37ac4bb2aa197b89b","impliedFormat":99},{"version":"e8469e599381cf021ce751c27cca3d8cb06440a45665ca9c2ef2efb0acef1fd9","signature":"20f5c6fda7d5906e7abca36cb5068de741c18155bbe26f5aca1e1c29ca5e2f42"},{"version":"2920053ac2e193a0a4384d5268540ffd54dd27769e51b68f80802ec5bba88561","impliedFormat":1},{"version":"cd7c04ad91cfa0affef6033a8b9f24ed245778e103dff67e0af6c2d101b4826a","affectsGlobalScope":true,"impliedFormat":1},{"version":"c1d9f025be462e54bc59cf051b20994050773588d05d40a5ba2a2bdc43e13f12","affectsGlobalScope":true,"impliedFormat":1},{"version":"80fc00b28b1318cf0b886d31d80a5d8b2d7c4ee7b0fbab2bcd0af4e8095d4d43","impliedFormat":1},{"version":"17e7de4973021668df8e23010b5320cc75e9eb5c2515be70049529a8046b2427","signature":"46b26b6572d4b54edc1916b6f2655e71bdfb90945a1dfceb1aac0df84834ceb4"},{"version":"78cdb63dff3ec7ef074ada630ff20a5d8004768b6cbe24ed134a8bfba12bafbb","signature":"49df9a46ebdc372b3fa4df4ccc8425c638bd56e72dee2cfff3ea1e97d2c794de"},{"version":"f41c11fc13e9a1f1b849349cb51b137ddd27de0a17c5339675c789d58f556cc4","signature":"1f8bb24b9445ba23ba7975442082768beedd19cb8e032b538ee8714acdd20108"},{"version":"4ea2f9f76f73e358cbf50ccd4698fc289591a59bd8469433aa1d3531a447b4dd","signature":"e5ea4270c63a5ab369e89c41f44d7aed9d2b372afdfe783f55b7571531c7f24f"},{"version":"91b4ce96f6ad631a0a6920eb0ab928159ff01a439ae0e266ecdc9ea83126a195","impliedFormat":1},{"version":"e3448881d526bfca052d5f9224cc772f61d9fc84d0c52eb7154b13bd4db9d8b2","impliedFormat":1},{"version":"e348f128032c4807ad9359a1fff29fcbc5f551c81be807bfa86db5a45649b7ba","impliedFormat":1},{"version":"42f4d7040a48e5b9c9b20b5f17a04c381676211bdb0b5a580a183cf5908664be","impliedFormat":1},{"version":"d4e4fbb20d20cc5b9f4c85f2357f27cb233cd01f8ca6d85dcca905ec15143e06","impliedFormat":1},{"version":"c2fc483dea0580d1266c1500f17e49a739ca6cfe408691da638ddc211dfffad0","impliedFormat":1},{"version":"dfc8ab0e4a452b8361ccf895ab998bbf27d1f7608fae372ac6aa7f089ef7f68d","impliedFormat":1},{"version":"cca630c92b5382a0677d2dedca95e4e08a0cae660181d6d0dd8fd8bdb104d745","impliedFormat":1},{"version":"2e7dc7d2f91768b5fbe31a31fc0e7e43f47f394539e5484041fd7945d2ef3216","impliedFormat":1},{"version":"c16c3b97930e8fbf05022024f049d51c998dd5eb6509047e1f841777968e85c1","impliedFormat":1},{"version":"cce15e7530c8062dea0666a174f31c1fe445a97357885480748b072778fc6f36","impliedFormat":1},{"version":"535b2fc8c89091c20124fe144699bb4a96d5db4418a1594a9a0a6a863b2195ae","impliedFormat":1},{"version":"dd5165bf834f6e784b4aad9fae6d84307c19f140829e4c6c4123b2d1a707d8bd","impliedFormat":1},{"version":"7ccf260729e19eed74c34046b38b6957bcfe4784d94f76eb830a70fc5d59cb43","impliedFormat":1},{"version":"21575cdeaca6a2c2a0beb8c2ecbc981d9deb95f879f82dc7d6e325fe8737b5ba","impliedFormat":1},{"version":"00343c2c578a0e32ecc384ed779ff39bc7ec6778ef84dc48106b602eb5598a6c","impliedFormat":1},{"version":"c333b496e7676a8b84c720bdece6c34621e3945b7d1710d6ed85d8b742852825","impliedFormat":1},{"version":"3eb7d541136cd8b66020417086e4f481fb1ae0e2b916846d43cbf0b540371954","impliedFormat":1},{"version":"b6fed756be83482969cd037fb707285d46cbb03a19dc576cff8179dc55540727","impliedFormat":1},{"version":"26602933b613e4df3868a6c82e14fffa2393a08531cb333ed27b151923462981","impliedFormat":1},{"version":"8fc19c7114cfd352ff9fb615028e6062cb9fa3cd59c4850bc6c5634b9f57ea27","impliedFormat":1},{"version":"05942150b4d7e0eb991776b1905487ecd94e7299847bb251419c99658363ff84","impliedFormat":1},{"version":"073c43eff28f369a05973364a5c466859867661670eb28e1b6f3dd0654dd0f0e","impliedFormat":1},{"version":"4a7c3274af9c78f7b4328f1e673dec81f48dd75da3bc159780fb4a13238b6684","impliedFormat":1},{"version":"1134991f69fff6f08bd44144518ae14bc294d6076dba8a09574ae918088c5737","impliedFormat":1},{"version":"259a3d89235d858b3d495dc2d1d610d6ce4ac0e91da1ae6a293f250d895d45dd","impliedFormat":1},{"version":"369b7270eeeb37982203b2cb18c7302947b89bf5818c1d3d2e95a0418f02b74e","impliedFormat":1},{"version":"f4c772371ce8ceaab394e1f8af9a6e502f0c02cbf184632dd6e64a00b8aeaf74","impliedFormat":1},{"version":"039bd8d1e0d151570b66e75ee152877fb0e2f42eca43718632ac195e6884be34","impliedFormat":1},{"version":"89fb1e22c3c98cbb86dc3e5949012bdae217f2b5d768a2cc74e1c4b413c25ad2","impliedFormat":1},{"version":"855b9b5ec5cc534fcf9c2799a2c7909b623fcb4ed1a39b51d7c9f6c38adec214","impliedFormat":1},{"version":"58da08d1fe876c79c47dcf88be37c5c3fab55d97b34c8c09a666599a2191208d","impliedFormat":1},{"version":"a050f41e0276f55620b1f1f7cf4c94bf84007fa7c83a397ab78196fda756feda","signature":"da2174d20453962a7e0001ae9ec4126376baca0da9e51c1f8fd8e3e7f32ea15d"},{"version":"9bc1793c70e178a2c96973cf0803b44297df2444ad74597158605543ac759769","signature":"b1e150099fee1051f5a6f824470a0ac4ad4f72967a18ecc9d13f0e614e455614"},"2ad1eb0f0726576901560a873aa310617b4342924e339347725c2c30fa67549c",{"version":"e8ac45f69548247a29489e9a15e1892f46a8b83c2ffa194e8f1799300dcb31aa","signature":"8b1e126581d848ab487f60e7c8166e4e6d4865d95f22d78fbe60446524dffeb8"},{"version":"20fda2846538e4f343b8fde250940de7e99082612257aa15c86f1d145ec955d0","signature":"dba8dbfab41ca80ba9af4dd912977707f182c2876f155f1c1c0b428e78c1fd12"},{"version":"f07eec1ab1529eba77f61820ed27a41407ac36f97e43bf2032456db229eaa3b3","signature":"e04a58068eef4dab6178b2333da736d65c2ddbfcdc4b2a00e6313c60515f854e"},{"version":"795805415cdad4f642b5835f4edafcf5313748d5d938f322966270ddc2c966c2","signature":"8763c06c330ba7a001347d1fbafe787f4e25fd4a0ac4b4287ed2c5502e68a603"},{"version":"b3734c45be48e400a694790c45ba466172cc6e97f085b5081207e164fc9ffbb5","signature":"bd6e8388c7a5d97e5ca446dd78ddfe0fca0b773800f41647b0a5c3b2f8c6afa9"},{"version":"0da6a090e1ac3f626b7d70d2cf7cee4b77ba4595871b2c66a5b7e3d5bf634ba2","signature":"cc6d81a5cb6f6da16b795aee1e241c49fb32d22a56b60bd092b81655461cb670"},"686b434e509d1f3a0da5e850ef24af8ecfd2e251a2dfe6a2dab3e7f6fc066a4c",{"version":"9b2e2c7a7e0ccdd109ba95bd116c22077673c88d30010508f09956ad1e1bd4ff","signature":"3155a8a0955b0ae66fa7337b36451c21e579c5981bd1402174bfade24dfc9f55"},{"version":"59859bcb84574c0f1bd8a04251054fb54f2e2d2718f1668a148e7e2f48c4980d","impliedFormat":1},{"version":"a97f6891d757661cef6af85e69707bd2be71c94f79a3caf92892300560a53c6d","impliedFormat":1},{"version":"a5e652ff1bd5fbdbcdf4658d4253774d60ed7b3aa664da760113ac5be58448e4","impliedFormat":1},{"version":"ceac9ebccb4c3912d89a4ed91f53a4c66d02a5ea66d2b946dc4714bb55a63022","impliedFormat":1},{"version":"81ce6ab82bbff003e8be9b4d846d483cd6a3be599af5f3ca33eb177accf1d39a","impliedFormat":1},{"version":"ea7b47bc357858506e6161065b1a8997cfbc5d1dcdf233966da9d01d74721ef8","impliedFormat":1},{"version":"a58c104cd2696bdd5e431f3c3201d6692aa611c0f79d517d055cdc40a441db87","impliedFormat":99},"d7a60437e764869fb12ca15da1a0677c1ca538e20d12c63d500afdee7bb8c806",{"version":"37ffe3c12813b6a6d512f7c27b71f3388d03dafa10555ad5094cea393ed3d1f6","impliedFormat":1},"6b361255fdcd19d53302ead8cc2ab8f39a5aa3ab46f32cac3a1ab4067bf47d64",{"version":"ceb87bb785600db082629d7ded894934ee7128db8340e4d5539f73ef59414a9f","signature":"d8bdb327f9db73b9d70e486be9a9abd9d09e4877d6789aba22c3a74b768929aa"},{"version":"89783bd45ab35df55203b522f8271500189c3526976af533a599a86caaf31362","impliedFormat":99},{"version":"26e6c521a290630ea31f0205a46a87cab35faac96e2b30606f37bae7bcda4f9d","impliedFormat":99},{"version":"821b3919816aa31bcc9ecdde64b06ea20722be88361030a8c7094c9cd407395b","signature":"6a1b76d142304a8d1c9081fd8d3c7535c64a8b0066d7775fdf2bb511f0734344"},{"version":"f1675e15edead039578544a14e9fd9443c86c61ed6a8a86e872bb8331e51e2ad","signature":"8678a9ce4a5e3397ac55d39f8846ec5463da2fde22c691bc79d337ed9192f01d"},{"version":"6b85cc20ff0fddf60dea5d0bc5ef2efefb8792aaf83111d82006f6900a5ee6bc","signature":"c259771fd15c384425964cf63916bf8339a3ab0d95729c29336bd07ec10eca70"},"c407ffc214599426d3b3b7f3b2e66fc0c46526b7804ff00eb920b35e26b01106",{"version":"1ef9fbb16964520bf38db1079baf4d3d3246eb70cc2d161fe8e37fb5c26c83cd","signature":"13ac48c319abe20a3b24b7fb5bbb66c216bfe872d4583e98e078ba1f14b5f8b7"},"e77d95af541baf57c4b439226d831a95812e2bacb6143f228cbcc61014c955ca",{"version":"d20b6802f21f41e09ba9a56a922578b7775384432504dbffd6023d8d758a5a59","signature":"a04a2fd79136e66c5da2305a638a6a9ded355ca85f22f6d76b178126371f099a"},{"version":"3c34f688d19ef8d0c7567fc9f811c1bb69771e051a6093b224f9d527f2e27a50","signature":"d7dd58d718a500ee8381a4eaf2eee6064603ceca11546c97660226f82b668306"},{"version":"62d633b9aa79609760608cfbf7fdec615ffe77c0ca9b5931d3cc6590e2b540c5","signature":"5d58092ae25ac6ca4088c99e69a658c8f89cfe61d5afb2005de7203020327f12"},{"version":"a9cabb5142685fe9ba354864e11c879910b09101045388ebcde823c5edd2dc86","signature":"ebd2b46242bbbeeede36480742109ffcfc6ac2ef76ea1d7a3a189656bb230180"},{"version":"4b274728b5d2b682d9ed98f0e7c227bc65ce2b58c6fe3e5437dc09ee5676e995","affectsGlobalScope":true,"impliedFormat":99},{"version":"8ce4b21c381864bf5e4146880a418aa95573606badf20366d2c38f98fc79fb15","signature":"f4f21aadac59adeee9b45cdb277177cd7599bee444da4a49af8ce07f21379530"},{"version":"b76fd1e2dd36581512f13efe91c5f21870fda39b6a8ff4f429451674678ee13f","signature":"cb85c57eadf38630e8908181e32562cd7dab21030a7cbeabb2349c6925ce66da"},"74fd2da4da659be66b16a7087f941d6a873539547a41caea868e24074d77559b",{"version":"395b7c8f83d534b93c1f6d7a02e8c2b497083d2461287a8558d47c52a9fa2ac6","signature":"cffa84bf150e8897da560dcc3489f08d6381b4cc9e6baf6a92b59b2677509ad5"},{"version":"3c594fae80aeb01a44aae08f0e49cf3dc212944129d29ac8213f01ed5c4032eb","signature":"953ea38ac4ea6452b8cb802c08a3132e3e77f18d17d2fbf6a9a82160a03df721"},{"version":"e89698e40424608a8f179f901def5cc5a3609f1381a31b722cab667153145de1","signature":"9b37defc1cf2817877d82929745263a4741c10b95e7ad1ae1b2386ec1056dc7f"},{"version":"11eefa953fa15e848966335b703c1fecbc9a37e7718e16d2bc695ff6f63f6ce1","signature":"023a3115f26abb7f0211b964332eab82b38c9944bafe819781ac7a058a9e0daa"},{"version":"f2aea81d8baf2b621945382aabac150e3db40f20d19ac1abea7aff805f1dc33c","signature":"0ac76f72a94a13f3081c41c43b58679492c219ccada653f40801a89fcd5e9d04"},{"version":"dbc993bc853a18d9f9e1c0a10cdb50e25eb0a3a4217cb77b064e69b9e57d1b82","signature":"347881dddcaabbb019e286a3c96eaba094a623f3cef0b99eeec51b9d0e3aa834"},"0cf06865b02919978b1afdd56f420753959eb702fe43697acb5ea509114f74f9",{"version":"a14c84deb144ead18cc8d700b07a49c5f4c0ca15bb7d9ff19bf50325c95406fa","signature":"1a78d306b85ad3e46be19f5d62a2e4641c60e97b95124a000b96ad478784cab4"},{"version":"a3b311d842d9a13f6d67836321f81e8c9a2f7e892f1986e58921ad7f2a44d7e8","signature":"f49f8311a6ac6c147793813e99ce383e242ee3189ff608aaa2616b0b429b9b6c"},{"version":"9c580c6eae94f8c9a38373566e59d5c3282dc194aa266b23a50686fe10560159","impliedFormat":99},{"version":"a9c10c0777c08c857c2d3e820df73c18143d5f50d08849f75bda6f489a7ad02c","signature":"d29b6c40c2dc99aa02230462eba3bae602117e46a041cd51c41d97cee65612fa"},{"version":"3d6a560c635fd91094e43191ecf73b124ccb2537e6060f85d5d31fcf68150e74","signature":"b2c7cf7f304f6ebfea4dda1e9c526a79a591fc8d3bd003af083384025da649b1"},{"version":"32a65decbb0fab4ee61d226a89368af678be1188472e6c11468cd63d7c6275ad","signature":"71aaf191cd541be293f6766d3e9bb6695bc57a2bf13507652959ac37f8ce9489"},{"version":"151ff381ef9ff8da2da9b9663ebf657eac35c4c9a19183420c05728f31a6761d","impliedFormat":1},{"version":"a4a39b5714adfcadd3bbea6698ca2e942606d833bde62ad5fb6ec55f5e438ff8","impliedFormat":1},{"version":"bbc1d029093135d7d9bfa4b38cbf8761db505026cc458b5e9c8b74f4000e5e75","impliedFormat":1},{"version":"1f68ab0e055994eb337b67aa87d2a15e0200951e9664959b3866ee6f6b11a0fe","impliedFormat":1},{"version":"8cbbb12bfb321de8bd58ba74329f683d82e4e0abb56d998c7f1eef2e764a74c8","impliedFormat":1},{"version":"3cef134032da5e1bfabba59a03a58d91ed59f302235034279bb25a5a5b65ca62","affectsGlobalScope":true,"impliedFormat":1}],"root":[474,475,540,541,610,[666,678],691,692,699,700,702,703,705,[707,711],[713,725],727,728,[746,748],[767,769],[855,857],860,[862,869],873,874,884,885,[889,892],894,896,[1003,1009],[1014,1016],1019,[1024,1027],[1060,1070],1078,1080,1081,[1084,1093],[1095,1106],[1108,1110]],"options":{"allowJs":true,"esModuleInterop":true,"jsx":1,"module":99,"skipLibCheck":true,"strict":true,"target":4},"referencedMap":[[610,1],[707,2],[1098,3],[1097,4],[1100,5],[869,6],[874,7],[1101,8],[889,9],[896,10],[1019,11],[678,12],[667,13],[668,14],[669,15],[670,16],[671,17],[673,18],[674,15],[666,19],[675,18],[677,15],[676,18],[672,20],[691,21],[692,22],[1087,23],[865,24],[1089,25],[866,26],[1096,27],[1015,28],[1014,29],[1099,30],[1092,31],[1103,32],[1093,33],[1009,34],[1095,35],[867,36],[1063,37],[1085,38],[1065,39],[1066,40],[1088,41],[1067,42],[1104,43],[1003,44],[1070,45],[1064,46],[1069,47],[1004,41],[1080,48],[1016,49],[1105,32],[864,50],[1006,51],[1091,52],[1008,53],[1086,54],[1081,51],[1007,55],[1062,56],[1061,57],[1024,58],[1026,59],[873,59],[1025,53],[892,42],[1060,60],[890,61],[1084,62],[1090,21],[891,53],[1005,21],[1027,42],[1108,63],[1109,61],[1110,64],[1102,65],[862,66],[894,60],[1068,53],[863,67],[1106,68],[884,69],[868,70],[1078,71],[885,72],[708,73],[709,74],[710,24],[711,24],[713,75],[717,76],[716,77],[719,78],[720,24],[721,79],[722,24],[723,24],[724,80],[725,81],[727,82],[728,21],[702,83],[746,84],[700,85],[747,86],[748,86],[714,87],[715,88],[718,86],[699,89],[767,90],[768,21],[769,24],[856,91],[855,21],[705,21],[703,92],[857,93],[860,94],[474,95],[475,96],[559,97],[611,97],[558,98],[612,99],[557,99],[712,100],[560,101],[510,21],[687,102],[688,103],[684,104],[683,105],[681,106],[680,107],[682,108],[686,109],[685,21],[679,21],[1059,110],[1058,111],[418,21],[529,21],[537,112],[528,113],[530,114],[531,115],[536,116],[538,117],[527,21],[532,118],[533,21],[539,119],[534,118],[535,118],[613,120],[569,121],[572,122],[578,123],[581,124],[602,125],[580,126],[561,21],[562,127],[563,128],[566,21],[564,21],[565,21],[603,129],[568,121],[567,21],[604,130],[571,122],[570,21],[608,131],[605,132],[575,133],[577,134],[574,135],[576,136],[573,133],[606,137],[579,121],[607,138],[582,139],[601,140],[598,141],[600,142],[585,143],[592,144],[594,145],[596,146],[595,147],[587,148],[584,141],[588,21],[599,149],[589,150],[586,21],[597,21],[583,21],[590,151],[591,21],[593,152],[879,153],[876,24],[887,154],[878,153],[1083,155],[886,153],[895,153],[1082,156],[881,157],[882,153],[877,24],[1017,158],[1107,153],[870,24],[893,158],[1018,159],[883,160],[880,21],[764,161],[985,162],[990,163],[991,164],[989,165],[992,21],[993,166],[752,167],[751,21],[834,168],[726,21],[833,21],[1114,169],[1113,170],[1112,171],[784,21],[1111,21],[750,172],[556,21],[1115,21],[906,172],[136,173],[137,173],[138,174],[97,175],[139,176],[140,177],[141,178],[92,21],[95,179],[93,21],[94,21],[142,180],[143,181],[144,182],[145,183],[146,184],[147,185],[148,185],[150,21],[149,186],[151,187],[152,188],[153,189],[135,190],[96,21],[154,191],[155,192],[156,193],[188,194],[157,195],[158,196],[159,197],[160,198],[161,199],[162,200],[163,201],[164,202],[165,203],[166,204],[167,204],[168,205],[169,21],[170,206],[172,207],[171,208],[173,113],[174,209],[175,210],[176,211],[177,212],[178,213],[179,214],[180,215],[181,216],[182,217],[183,218],[184,219],[185,220],[186,221],[187,222],[706,223],[192,224],[193,225],[191,24],[1116,226],[1071,24],[189,227],[190,228],[81,21],[83,229],[265,24],[749,21],[844,230],[822,231],[820,21],[821,21],[770,21],[781,232],[776,233],[779,234],[835,235],[827,21],[830,236],[829,237],[840,237],[828,238],[843,21],[778,239],[780,239],[772,240],[775,241],[823,240],[777,242],[771,21],[609,243],[872,244],[871,245],[858,21],[656,246],[657,247],[626,248],[649,21],[655,249],[653,250],[654,251],[625,252],[652,253],[648,254],[650,255],[651,252],[704,256],[662,24],[659,257],[663,258],[664,259],[665,260],[660,261],[658,262],[661,263],[647,264],[627,252],[643,265],[642,21],[640,266],[628,252],[636,267],[629,268],[637,269],[645,270],[630,271],[631,272],[633,273],[646,274],[641,275],[639,276],[635,277],[632,271],[638,252],[634,278],[644,279],[618,21],[621,21],[623,280],[622,280],[624,281],[620,282],[619,283],[617,21],[82,21],[525,21],[851,284],[853,285],[852,286],[850,287],[849,21],[1079,21],[690,288],[689,289],[1022,290],[1023,291],[763,292],[762,293],[1000,21],[812,21],[814,294],[813,21],[875,24],[975,21],[982,21],[949,295],[948,296],[947,297],[974,298],[973,299],[977,300],[976,301],[979,302],[978,303],[997,304],[996,305],[934,306],[908,307],[909,308],[910,308],[911,308],[912,308],[913,308],[914,308],[915,308],[916,308],[917,308],[918,308],[932,309],[919,308],[920,308],[921,308],[922,308],[923,308],[924,308],[925,308],[926,308],[928,308],[929,308],[927,308],[930,308],[931,308],[933,308],[907,310],[972,311],[952,312],[953,312],[954,312],[955,312],[956,312],[957,312],[958,313],[960,312],[959,312],[971,314],[961,312],[963,312],[962,312],[965,312],[964,312],[966,312],[967,312],[968,312],[969,312],[970,312],[951,312],[950,315],[942,316],[940,317],[941,317],[945,318],[943,317],[944,317],[946,317],[939,21],[524,319],[1021,320],[1020,21],[861,24],[90,321],[421,322],[426,323],[428,324],[214,325],[369,326],[396,327],[225,21],[206,21],[212,21],[358,328],[293,329],[213,21],[359,330],[398,331],[399,332],[346,333],[355,334],[263,335],[363,336],[364,337],[362,338],[361,21],[360,339],[397,340],[215,341],[300,21],[301,342],[210,21],[226,343],[216,344],[238,343],[269,343],[199,343],[368,345],[378,21],[205,21],[324,346],[325,347],[319,348],[449,21],[327,21],[328,348],[320,349],[340,24],[454,350],[453,351],[448,21],[266,352],[401,21],[354,353],[353,21],[447,354],[321,24],[241,355],[239,356],[450,21],[452,357],[451,21],[240,358],[442,359],[445,360],[250,361],[249,362],[248,363],[457,24],[247,364],[288,21],[460,21],[463,21],[462,24],[464,365],[195,21],[365,366],[366,367],[367,368],[390,21],[204,369],[194,21],[197,370],[339,371],[338,372],[329,21],[330,21],[337,21],[332,21],[335,373],[331,21],[333,374],[336,375],[334,374],[211,21],[202,21],[203,343],[420,376],[429,377],[433,378],[372,379],[371,21],[284,21],[465,380],[381,381],[322,382],[323,383],[316,384],[306,21],[314,21],[315,385],[344,386],[307,387],[345,388],[342,389],[341,21],[343,21],[297,390],[373,391],[374,392],[308,393],[312,394],[304,395],[350,396],[380,397],[383,398],[286,399],[200,400],[379,401],[196,327],[402,21],[403,402],[414,403],[400,21],[413,404],[91,21],[388,405],[272,21],[302,406],[384,21],[201,21],[233,21],[412,407],[209,21],[275,408],[311,409],[370,410],[310,21],[411,21],[405,411],[406,412],[207,21],[408,413],[409,414],[391,21],[410,400],[231,415],[389,416],[415,417],[218,21],[221,21],[219,21],[223,21],[220,21],[222,21],[224,418],[217,21],[278,419],[277,21],[283,420],[279,421],[282,422],[281,422],[285,420],[280,421],[237,423],[267,424],[377,425],[467,21],[437,426],[439,427],[309,21],[438,428],[375,391],[466,429],[326,391],[208,21],[268,430],[234,431],[235,432],[236,433],[232,434],[349,434],[244,434],[270,435],[245,435],[228,436],[227,21],[276,437],[274,438],[273,439],[271,440],[376,441],[348,442],[347,443],[318,444],[357,445],[356,446],[352,447],[262,448],[264,449],[261,450],[229,451],[296,21],[425,21],[295,452],[351,21],[287,453],[305,366],[303,454],[289,455],[291,456],[461,21],[290,457],[292,457],[423,21],[422,21],[424,21],[459,21],[294,458],[259,24],[89,21],[242,459],[251,21],[299,460],[230,21],[431,24],[441,461],[258,24],[435,348],[257,462],[417,463],[256,461],[198,21],[443,464],[254,24],[255,24],[246,21],[298,21],[253,465],[252,466],[243,467],[313,203],[382,203],[407,21],[386,468],[385,21],[427,21],[260,24],[317,24],[419,469],[84,24],[87,470],[88,471],[85,24],[86,21],[404,472],[395,473],[394,21],[393,474],[392,21],[416,475],[430,476],[432,477],[434,478],[436,479],[440,480],[473,481],[444,481],[472,482],[446,483],[455,484],[456,485],[458,486],[468,487],[471,369],[470,21],[469,223],[988,488],[987,21],[808,489],[806,490],[807,491],[795,492],[796,490],[803,493],[794,494],[799,495],[809,21],[800,496],[805,497],[811,498],[810,499],[793,500],[801,501],[802,502],[797,503],[804,489],[798,504],[761,505],[758,506],[759,21],[760,21],[757,507],[1028,21],[1043,508],[1044,508],[1057,509],[1045,510],[1046,510],[1047,511],[1041,512],[1039,513],[1030,21],[1034,514],[1038,515],[1036,516],[1042,517],[1031,518],[1032,519],[1033,520],[1035,521],[1037,522],[1040,523],[1048,510],[1049,510],[1050,510],[1051,508],[1052,510],[1053,510],[1029,510],[1054,21],[1056,524],[1055,510],[938,525],[937,526],[995,527],[1074,528],[1075,529],[1073,24],[1072,21],[1077,530],[1076,531],[1002,532],[1001,533],[981,534],[980,535],[999,536],[998,537],[936,538],[935,539],[786,540],[785,541],[387,542],[984,543],[766,544],[994,545],[983,163],[765,546],[986,547],[701,24],[792,21],[756,548],[754,549],[755,550],[753,21],[859,21],[836,21],[773,21],[774,551],[903,552],[902,21],[79,21],[80,21],[13,21],[14,21],[16,21],[15,21],[2,21],[17,21],[18,21],[19,21],[20,21],[21,21],[22,21],[23,21],[24,21],[3,21],[25,21],[26,21],[4,21],[27,21],[31,21],[28,21],[29,21],[30,21],[32,21],[33,21],[34,21],[5,21],[35,21],[36,21],[37,21],[38,21],[6,21],[42,21],[39,21],[40,21],[41,21],[43,21],[7,21],[44,21],[49,21],[50,21],[45,21],[46,21],[47,21],[48,21],[8,21],[54,21],[51,21],[52,21],[53,21],[55,21],[9,21],[56,21],[57,21],[58,21],[60,21],[59,21],[61,21],[62,21],[10,21],[63,21],[64,21],[65,21],[11,21],[66,21],[67,21],[68,21],[69,21],[70,21],[1,21],[71,21],[72,21],[12,21],[76,21],[74,21],[78,21],[73,21],[77,21],[75,21],[113,553],[123,554],[112,553],[133,555],[104,556],[103,557],[132,223],[126,558],[131,559],[106,560],[120,561],[105,562],[129,563],[101,564],[100,223],[130,565],[102,566],[107,567],[108,21],[111,567],[98,21],[134,568],[124,569],[115,570],[116,571],[118,572],[114,573],[117,574],[127,223],[109,575],[110,576],[119,577],[99,578],[122,569],[121,567],[125,21],[128,579],[509,580],[491,581],[499,582],[490,581],[506,583],[482,584],[481,557],[505,223],[500,585],[503,586],[484,587],[483,588],[479,589],[478,223],[502,590],[480,591],[485,592],[486,21],[489,592],[476,21],[508,593],[507,592],[493,594],[494,595],[496,596],[492,597],[495,598],[501,223],[487,599],[488,600],[497,601],[477,578],[498,592],[504,602],[905,603],[901,21],[904,604],[1013,605],[1011,606],[1010,24],[1012,606],[1094,24],[745,607],[730,21],[731,21],[732,21],[733,21],[729,21],[734,608],[735,21],[737,609],[736,608],[738,608],[739,609],[740,608],[741,21],[742,608],[743,21],[744,21],[888,610],[898,611],[897,172],[900,612],[899,613],[838,614],[825,615],[826,614],[824,21],[819,616],[791,617],[790,618],[788,618],[787,21],[789,619],[817,21],[816,21],[815,620],[818,621],[837,622],[831,623],[839,624],[783,625],[845,626],[847,627],[841,628],[848,629],[846,630],[842,631],[832,632],[854,633],[782,21],[526,634],[523,635],[515,636],[521,637],[517,21],[518,21],[516,638],[519,635],[511,21],[512,21],[522,639],[514,640],[520,641],[513,642],[555,643],[546,644],[553,645],[548,21],[549,21],[547,646],[550,647],[542,21],[543,21],[554,648],[545,649],[551,21],[552,650],[544,651],[616,652],[698,653],[696,654],[694,654],[697,654],[693,654],[695,654],[615,654],[614,21],[540,655],[541,21]],"affectedFilesPendingEmit":[610,707,1098,1097,1100,869,874,1101,889,896,1019,669,670,671,673,674,666,675,677,676,672,691,692,1087,865,1089,866,1096,1015,1014,1099,1092,1103,1093,1009,1095,867,1063,1085,1065,1066,1088,1067,1104,1003,1070,1064,1069,1004,1080,1016,1105,864,1006,1091,1008,1086,1081,1007,1062,1061,1024,1026,873,1025,892,1060,890,1084,1090,891,1005,1027,1108,1109,1110,1102,862,894,1068,863,1106,884,868,1078,885,708,709,710,711,713,717,716,719,720,721,722,723,724,725,727,728,702,746,700,747,748,714,715,718,699,767,768,769,856,855,705,703,857,860,475,540],"version":"5.8.3"}

--- FILE: ./package.json ---
{
  "name": "Pak.Chat",
  "version": "0.1.0",
  "private": true,
  "packageManager": "pnpm@9.0.0",
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "preview": "opennextjs-cloudflare build && opennextjs-cloudflare preview",
    "deploy": "opennextjs-cloudflare build && opennextjs-cloudflare deploy",
    "cf-typegen": "wrangler types --env-interface CloudflareEnv cloudflare-env.d.ts",
    "sprite": "node scripts/make-sprite.mjs"
  },
  "dependencies": {
    "@ai-sdk/google": "^1.2.19",
    "@ai-sdk/groq": "^1.2.9",
    "@ai-sdk/openai": "^1.3.22",
    "@ai-sdk/react": "^1.2.12",
    "@google/genai": "^1.5.1",
    "@hookform/resolvers": "^5.0.1",
    "@openrouter/ai-sdk-provider": "^0.4.6",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-tooltip": "^1.2.7",
    "ai": "^4.3.16",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "convex": "^1.24.8",
    "crypto-js": "^4.2.0",
    "fast-deep-equal": "^3.1.3",
    "firebase": "^11.9.1",
    "framer-motion": "^12.18.1",
    "katex": "^0.16.22",
    "lucide-react": "^0.510.0",
    "marked": "^15.0.12",
    "next": "15.3.2",
    "next-pwa": "^5.6.0",
    "next-themes": "^0.4.6",
    "pdf-parse": "^1.1.1",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-hook-form": "^7.57.0",
    "react-markdown": "^10.1.0",
    "react-shiki": "^0.6.0",
    "react-syntax-highlighter": "^15.6.1",
    "react-virtualized-auto-sizer": "^1.0.7",
    "react-window": "^1.8.11",
    "rehype-katex": "^7.0.1",
    "rehype-sanitize": "^6.0.0",
    "remark-gfm": "^4.0.1",
    "remark-math": "^6.0.0",
    "shiki": "^3.6.0",
    "sonner": "^2.0.5",
    "swr": "^2.3.3",
    "tailwind-merge": "^3.3.0",
    "tailwind-scrollbar": "^4.0.2",
    "use-debounce": "^10.0.5",
    "usehooks-ts": "^3.1.1",
    "uuid": "^11.1.0",
    "vaul": "^1.1.1",
    "zod": "^3.25.56",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.3.1",
    "@next/bundle-analyzer": "^15.3.3",
    "@opennextjs/cloudflare": "^1.2.1",
    "@tailwindcss/postcss": "^4.1.8",
    "@tailwindcss/typography": "^0.5.16",
    "@types/crypto-js": "^4.2.2",
    "@types/katex": "^0.16.7",
    "@types/node": "^20.19.0",
    "@types/pdf-parse": "^1.1.5",
    "@types/react": "^19.1.6",
    "@types/react-dom": "^19.1.6",
    "@types/react-syntax-highlighter": "^15.5.13",
    "@types/react-window": "^1.8.8",
    "eslint": "^9.28.0",
    "eslint-config-next": "15.3.2",
    "eslint-plugin-jsx-a11y": "^6.8.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "tailwindcss": "^4.1.8",
    "tw-animate-css": "^1.3.4",
    "typescript": "^5.8.3",
    "vitest": "^3.2.3",
    "wrangler": "^4.19.1"
  }
}


--- FILE: ./create_project_snapshot.py ---
import os

def create_project_snapshot(output_filename="project_snapshot.txt", prd_content=""):
    exclude_dirs = [".git", ".next", "node_modules", ".cursor", "public", "dist", "build"]
    exclude_files = [
        ".gitignore", "package-lock.json", "yarn.lock", "pnpm-lock.yaml",
        "components.json", "eslint.config.mjs", "next.config.ts",
        "open-next.config.ts", "postcss.config.mjs", "tsconfig.json", "wrangler.jsonc",
        "LICENSE", "next-env.d.ts"
    ]
    exclude_extensions = [".ico", ".png", ".jpg", ".jpeg", ".gif", ".bmp", ".svg", ".webp", ".pdf", ".zip", ".tar", ".gz", ".mp3", ".mp4", ".avi", ".mov", ".woff", ".woff2", ".ttf", ".otf", ".avif"]

    with open(output_filename, "w", encoding="utf-8") as outfile:
        if prd_content:
            outfile.write("--- PROJECT REQUIREMENTS DOCUMENT ---\n")
            outfile.write(prd_content)
            outfile.write("\n--- END PROJECT REQUIREMENTS DOCUMENT ---\n\n")

        for root, dirs, files in os.walk("."):
            dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('.')]
            for file in files:
                if file not in exclude_files and not file.startswith('.') and not any(file.endswith(ext) for ext in exclude_extensions):
                    filepath = os.path.join(root, file)
                    try:
                        with open(filepath, "r", encoding="utf-8") as infile:
                            outfile.write(f"--- FILE: {filepath} ---\n")
                            outfile.write(infile.read())
                            outfile.write("\n\n")
                    except Exception as e:
                        print(f"Could not read {filepath}: {e}")

if __name__ == "__main__":
    prd_text = """
## PRD: Pak.Chat — High-Performance LLM Application

## Project Goal

To create a high-performance application for working with LLMs, with the ability to log in via a Google account.

## Main Components

### Input Field

*   Send button — sends the message
*   Stop button — stops response generation
*   Model selection button — opens a modal window with LLM model options
*   Adaptive positioning:
    *   If there are no messages, the input field is centered on the screen
    *   In the centered state, the model selection modal window opens from the bottom (not the top)
*   Quoting:
    *   When quoting AI text, the input field expands
    *   The quoted text is displayed with a special background.
    *   A cross icon in the top right corner to cancel quoting. Below the cross, a tooltip "Press Esc"
    *   Quotes longer than 2 lines become scrollable
*   When the user scrolls up, an arrow should appear to the right above the input field. Clicking it scrolls down.
*   Before the button that opens the model selection window, there should be a "+" icon. Clicking it should open a small window containing buttons: [File icon] Add file, [Arrow icon] Recent, [Brush icon] Draw.

### Chat Navigation

Left navigation menu in the form of bars:

*   Each bar represents a user message
*   The length of the bar corresponds to the length of the message
*   On hover, the bar is replaced by a tile containing a short part of the user message.
*   Clicking the tile scrolls to the corresponding message in the chat.

### Chat History / New Chat

Chat history modal window (button in the top right corner):

*   Chat search field
*   Implement search by chat title and content.
*   Chat tiles with titles
*   Interactive elements:
    *   On hover: delete and pin buttons appear.
    *   Double-click on the title: rename chat
    *   On hovering over a chat, a preview appears on the right.
*   New chat button next to the history button
*   The new chat creation button comes first, followed by the button to open chat history.

### Settings

Settings modal window with tabs:

"Settings" Tab:

*   General font selection: "Proxima Vara" or "System font"
*   Code font selection: "Berkeley Mono (default)" or "System monospace font"
*   Theme selection: light or dark

"Profile" Tab:

*   User avatar, name, and email address
*   Option to blur/hide all user data, applied automatically, can be disabled.
*   Logout button.

"API Keys" Tab:

*   Input fields for provider API keys:
    *   Google API Key
    *   OpenRouter
    *   OpenAI
    *   Groq
*   Quick links for creating API keys with the respective providers
*   List of supported models for each provider
*   In the mobile version, when scrolling down, this button should smoothly "slide" to the right.

### Messages and Interaction

User Messages (on hover):

*   Copy button — copies the message text
*   Edit button — allows editing with rollback after saving
*   Regeneration system: shows the number of regenerations below the message with navigation "← 1/2 →"

AI Messages (on hover):

*   "Start New Branch" button — creates a copy of the chat starting from the message where the button was clicked, including all previous messages. In the chat history window, the icon next to such a "clone" should be the same as on the button.
*   Regenerate button — rolls back to the selected point and regenerates
*   Quoting: when text is selected, a quoting button with quotation marks appears.
    """
    create_project_snapshot(prd_content=prd_text) 

--- FILE: ./wrangler.toml ---
main = "cloudflare/worker.ts"


--- FILE: ./vitest.config.ts ---
import path from 'node:path';
import { fileURLToPath } from 'node:url';

import { defineConfig } from 'vitest/config';

import { storybookTest } from '@storybook/addon-vitest/vitest-plugin';

const dirname =
  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));

// More info at: https://storybook.js.org/docs/next/writing-tests/integrations/vitest-addon
export default defineConfig({
  test: {
    workspace: [
      {
        extends: true,
        plugins: [
          // The plugin will run tests for the stories defined in your Storybook config
          // See options at: https://storybook.js.org/docs/next/writing-tests/integrations/vitest-addon#storybooktest
          storybookTest({ configDir: path.join(dirname, '.storybook') }),
        ],
        test: {
          name: 'storybook',
          browser: {
        enabled: true,
        headless: true,
        provider: 'playwright',
        instances: [{ browser: 'chromium' }]
      },
          setupFiles: ['.storybook/vitest.setup.ts'],
        },
      },
    ],
  },
});


--- FILE: ./vitest.shims.d.ts ---
/// <reference types="@vitest/browser/providers/playwright" />

--- FILE: ./app/layout.tsx ---
import type { Metadata } from 'next';
import './globals.css';
import 'katex/dist/katex.min.css';
import { Toaster } from '@/frontend/components/ui/sonner';
import Providers from '@/frontend/components/Providers';
import AppShellSkeleton from '@/frontend/components/AppShellSkeleton';
import { Suspense } from 'react';
import AuthListener from '@/frontend/components/AuthListener';
import ConvexClientProvider from '@/frontend/components/ConvexClientProvider';
import UserSync from '@/frontend/components/UserSync';

export const dynamic = 'force-dynamic';

export const metadata: Metadata = {
  title: 'Pak.Chat',
  description: 'High-Performance LLM Application',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <meta
          httpEquiv="Cross-Origin-Opener-Policy"
          content="same-origin-allow-popups"
        />
        <link rel="manifest" href="/manifest.webmanifest" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />
      </head>
      <body suppressHydrationWarning className="antialiased font-sans font-mono">
        <Suspense fallback={<AppShellSkeleton />}>
          <ConvexClientProvider>
            <Providers>
              <AuthListener>
                <UserSync />
                {children}
              </AuthListener>
            </Providers>
            <Toaster richColors position="top-right" />
          </ConvexClientProvider>
        </Suspense>
      </body>
    </html>
  );
}


--- FILE: ./app/page.tsx ---
'use client';

import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/frontend/stores/AuthStore';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';
import { Button } from '@/frontend/components/ui/button';

export default function IndexPage() {
  const { user, loading, login } = useAuthStore();
  const router = useRouter();
  const { isMobile } = useIsMobile();

  useEffect(() => {
    if (!loading && user) {
      // ПК - сразу в чат, мобильные - в home с историей
      router.push(isMobile ? '/home' : '/chat');
    }
  }, [user, loading, router, isMobile]);

  if (loading || (!loading && user)) {
    // Показываем пустой div, чтобы избежать моргания контента при редиректе
    return <div className="w-full h-screen bg-background" />;
  }

  return (
    <main className="flex min-h-screen flex-col items-center justify-center gap-6 p-4 text-center">
      <h1 className="text-4xl font-bold tracking-tight">Welcome to Pak.Chat</h1>
      <p className="text-lg text-muted-foreground">Your high-performance LLM application.</p>
      <Button size="lg" onClick={login} disabled={loading}>
        Sign In with Google to Continue
      </Button>
    </main>
  );
}


--- FILE: ./app/globals.css ---
@import 'tailwindcss';
@import 'tw-animate-css';
@plugin '@tailwindcss/typography';
@plugin 'tailwind-scrollbar';

@custom-variant dark (&:is(.dark *));

:root {
  --shiki-color-text: #0f172a;
  --shiki-color-background: transparent;
  --shiki-token-constant: #b45309;
  --shiki-token-string: #15803d;
  --shiki-token-comment: #64748b;
  --shiki-token-keyword: #7c3aed;
  --shiki-token-parameter: #b45309;
  --shiki-token-function: #2563eb;
  --shiki-token-string-expression: #15803d;
  --shiki-token-punctuation: #334155;
  --shiki-token-link: #2563eb;
}

[data-theme='dark'] {
  --shiki-color-text: #e2e8f0;
}

/* Font faces - temporarily disabled due to corrupted font files */
/*
@font-face {
  font-family: 'Proxima Vara';
  src: url('/fonts/ProximaVara-Regular.woff2') format('woff2'),
       url('/fonts/ProximaVara-Regular.woff') format('woff');
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Proxima Vara';
  src: url('/fonts/ProximaVara-Medium.woff2') format('woff2'),
       url('/fonts/ProximaVara-Medium.woff') format('woff');
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Proxima Vara';
  src: url('/fonts/ProximaVara-Semibold.woff2') format('woff2'),
       url('/fonts/ProximaVara-Semibold.woff') format('woff');
  font-weight: 600;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Berkeley Mono';
  src: url('/fonts/BerkeleyMono-Regular.woff2') format('woff2'),
       url('/fonts/BerkeleyMono-Regular.woff') format('woff');
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Berkeley Mono';
  src: url('/fonts/BerkeleyMono-Medium.woff2') format('woff2'),
       url('/fonts/BerkeleyMono-Medium.woff') format('woff');
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Berkeley Mono';
  src: url('/fonts/BerkeleyMono-Bold.woff2') format('woff2'),
       url('/fonts/BerkeleyMono-Bold.woff') format('woff');
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}
*/

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.81 0.1 252);
  --chart-2: oklch(0.62 0.19 260);
  --chart-3: oklch(0.55 0.22 263);
  --chart-4: oklch(0.49 0.22 264);
  --chart-5: oklch(0.42 0.18 266);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
  --font-sans: Geist, sans-serif;
  --font-serif: ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif;
  --font-mono: Geist Mono, monospace;
  --radius: 0.625rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

.dark {
  --background: oklch(0.2178 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.269 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.371 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --destructive-foreground: oklch(0.985 0 0);
  --border: oklch(0.275 0 0);
  --input: oklch(0.325 0 0);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.81 0.1 252);
  --chart-2: oklch(0.62 0.19 260);
  --chart-3: oklch(0.55 0.22 263);
  --chart-4: oklch(0.49 0.22 264);
  --chart-5: oklch(0.42 0.18 266);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.275 0 0);
  --sidebar-ring: oklch(0.439 0 0);
  --font-sans: Geist, sans-serif;
  --font-serif: ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif;
  --font-mono: Geist Mono, monospace;
  --radius: 0.625rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer utilities {
  .font-mono { font-family: var(--font-mono) !important; }
  .font-sans { font-family: var(--font-sans) !important; }
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-none::-webkit-scrollbar {
    display: none;
  }
  .scrollbar-none {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  /* Улучшенная прокрутка для всех устройств */
  .enhanced-scroll {
    -webkit-overflow-scrolling: touch;
    touch-action: pan-y;
    overscroll-behavior: contain;
  }
  
  /* Стили для цитирования */
  .quote-selection {
    background-color: rgba(59, 130, 246, 0.1);
    border-radius: 4px;
    padding: 2px 4px;
  }
  
  .quote-highlight {
    animation: quote-highlight 0.3s ease-in-out;
  }
  
  @keyframes quote-highlight {
    0% {
      background-color: rgba(59, 130, 246, 0.3);
    }
    100% {
      background-color: transparent;
    }
  }
  
  /* Анимации для мобильных элементов */
  .mobile-slide-left {
    animation: slide-left 0.3s ease-in-out;
  }
  
  .mobile-slide-right {
    animation: slide-right 0.3s ease-in-out;
  }
  
  @keyframes slide-left {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(-100%);
      opacity: 0;
    }
  }
  
  @keyframes slide-right {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }
  
  /* Улучшенный блюр для мобильных устройств */
  .mobile-blur {
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    background: rgba(255, 255, 255, 0.1);
  }
  
  .dark .mobile-blur {
    background: rgba(0, 0, 0, 0.1);
  }
  
  /* Line clamp utilities */
  .line-clamp-1 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
  }
  
  .line-clamp-2 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
  
  .line-clamp-3 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
  }
  
  /* Безопасная область для мобильных устройств */
  .pb-safe {
    padding-bottom: env(safe-area-inset-bottom);
  }
  
  .pt-safe {
    padding-top: env(safe-area-inset-top);
  }
  
  /* Исправление для мобильной клавиатуры */
  @supports (-webkit-touch-callout: none) {
    .mobile-keyboard-fix {
      padding-bottom: calc(env(safe-area-inset-bottom) + env(keyboard-inset-height, 0px));
    }
  }
  
  /* Улучшенный скролл для модальных окон на мобильных */
  .mobile-modal-scroll {
    height: 100%;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
    touch-action: pan-y;
    overscroll-behavior: contain;
    scroll-behavior: smooth;
  }
  
  /* Дополнительные отступы для мобильных настроек */
  .mobile-settings-content {
    padding-bottom: calc(env(safe-area-inset-bottom) + 2rem);
  }
  
  /* Исправление для мобильных устройств - предотвращение зума при фокусе на input */
  @media screen and (max-width: 768px) {
    input[type="text"],
    input[type="email"],
    input[type="password"],
    textarea,
    select {
      font-size: 16px !important;
    }
    
    /* Улучшенная поддержка мобильной клавиатуры */
    .mobile-keyboard-fix {
      padding-bottom: calc(env(safe-area-inset-bottom) + env(keyboard-inset-height, 0px));
      transition: padding-bottom 0.3s ease;
    }
    
    /* Фиксация прыжков при появлении клавиатуры */
    .mobile-keyboard-fix input {
      transform: translateZ(0);
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
    }
  }
}

.shiki {
  @apply !bg-transparent overflow-x-auto;
}

.shiki pre {
  @apply !m-0 !p-0;
}

/* Принудительно убираем фон у SyntaxHighlighter */
div[class*="language-"] pre,
div[class*="language-"] code,
pre[class*="language-"],
code[class*="language-"] {
  background: transparent !important;
  background-color: transparent !important;
}

/* Убираем фон у всех элементов синтаксического выделения */
.token.comment,
.token.block-comment,
.token.prolog,
.token.doctype,
.token.cdata {
  background: transparent !important;
  background-color: transparent !important;
}

/* Добавить в конец файла app/globals.css */

.blur-sm {
    filter: blur(4px);
}
.blur-md {
    filter: blur(8px);
}

@keyframes fade {
  from { opacity: 0; }
  to { opacity: 1; }
}

.fade-in {
  animation: fade .2s ease-in;
}

@media (max-width: 768px) {
  .bg-background\/80 {
    backdrop-filter: none !important;
  }
  .shadow-lg,
  .ring-1 {
    box-shadow: none !important;
  }
}

.no-transition *, .no-transition {
  transition: none !important;
}

.chat-smooth {
  transition: opacity .15s ease-in;
}


@supports (padding: max(0px)) {
  input,
  textarea {
    min-width: 0 !important;
  }
}


@supports (-webkit-touch-callout: none) {
  input, textarea { font-size: 16px !important; }
}

@layer components {
  .code-block-container {
    @apply bg-secondary border border-border rounded-lg;
    max-height: 500px;
    overflow-y: auto;
  }

  .code-block-container::-webkit-scrollbar {
    height: 8px;
  }

  .code-block-container::-webkit-scrollbar-thumb {
    @apply rounded-full bg-muted;
  }

  .code-block-container:hover::-webkit-scrollbar-thumb {
    @apply bg-muted-foreground;
  }

  .code-block-container {
    scrollbar-width: thin;
    scrollbar-color: var(--tw-color-muted) transparent;
  }
}

/* Shine text animation */
.shine-text {
  background: linear-gradient(
    90deg,
    #9ca3af 0%,
    #f9fafb 20%,
    #9ca3af 40%,
    #9ca3af 60%,
    #f9fafb 80%,
    #9ca3af 100%
  );
  background-size: 200% 100%;
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: shine 2s ease-in-out infinite;
}

@keyframes shine {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

:root.dark .shine-text {
  background: linear-gradient(
    90deg,
    #6b7280 0%,
    #ffffff 20%,
    #6b7280 40%,
    #6b7280 60%,
    #ffffff 80%,
    #6b7280 100%
  );
  background-size: 200% 100%;
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: shine 2s ease-in-out infinite;
}





--- FILE: ./app/home/page.tsx ---
'use client';

import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { useConvexAuth } from 'convex/react';
import { Button } from '@/frontend/components/ui/button';
import { MessageSquare, Plus, Settings } from 'lucide-react';
import { cn } from '@/lib/utils';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';
import ChatHistoryList from '@/frontend/components/ChatHistoryList';
import SettingsDrawer from '@/frontend/components/SettingsDrawer';
import AppShellSkeleton from '@/frontend/components/AppShellSkeleton';
import { WithTooltip } from '@/frontend/components/WithTooltip';
import type { Doc, Id } from '@/convex/_generated/dataModel';

export default function HomePage() {
  const { isAuthenticated, isLoading } = useConvexAuth();
  const router = useRouter();
  const { isMobile } = useIsMobile();
  const [settingsOpen, setSettingsOpen] = useState(false);

  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      router.replace('/');
    }
  }, [isLoading, isAuthenticated, router]);

  const handleSelectThread = (threadId: Id<'threads'>) => {
    router.push(`/chat/${threadId}`);
  };

  const handleNewChat = () => {
    router.push('/chat');
  };

  if (isLoading || !isAuthenticated) {
    return <AppShellSkeleton />;
  }

  return (
    <div className="w-full min-h-screen flex flex-col overflow-hidden bg-background">
      {/* Header with logo and settings */}
      <div className="flex items-center justify-between p-4 border-b border-border/50">
        {/* Left: Settings button */}
        <SettingsDrawer isOpen={settingsOpen} setIsOpen={setSettingsOpen}>
          <WithTooltip label="Settings" side="bottom">
            <Button
              variant="ghost"
              size="icon"
              className="bg-background/80 backdrop-blur-sm border-border/50"
              aria-label="Open settings"
              onClick={() => setSettingsOpen(true)}
            >
              <Settings className="h-5 w-5" />
            </Button>
          </WithTooltip>
        </SettingsDrawer>

        {/* Center: Logo/Title */}
        <div className="flex items-center gap-2">
          <MessageSquare className="h-6 w-6 text-primary" />
          <span className="text-xl font-bold text-foreground">Pak.Chat</span>
        </div>

        {/* Right: Spacer to keep logo centered */}
        <div className="w-10" />
      </div>

      {/* Chat history list */}
      <div className="flex-1 min-h-0">
        <ChatHistoryList
          onSelectThread={handleSelectThread}
          onNewChat={handleNewChat}
          showSearch={true}
          className="h-full"
        />
      </div>

      {/* Floating Action Button for new chat (mobile) */}
      {isMobile && (
        <div className="fixed bottom-6 right-6 z-20">
          <WithTooltip label="New Chat" side="left">
            <Button
              size="lg"
              className="h-14 w-14 rounded-full shadow-lg"
              onClick={handleNewChat}
              aria-label="Start new chat"
            >
              <Plus className="h-6 w-6" />
            </Button>
          </WithTooltip>
        </div>
      )}
    </div>
  );
} 

--- FILE: ./app/chat/page.tsx ---
'use client'
import Chat from '@/frontend/components/Chat';
import { useConvexAuth } from 'convex/react';
import { useRouter } from 'next/navigation';
import { useEffect } from 'react';
import AppShellSkeleton from '@/frontend/components/AppShellSkeleton';

export default function NewChatPage() {
  const { isAuthenticated, isLoading } = useConvexAuth();
  const router = useRouter();

  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      router.replace('/');
    }
  }, [isLoading, isAuthenticated, router]);

  if (isLoading || !isAuthenticated) {
    return <AppShellSkeleton />;
  }

  // Ключ "new-draft" гарантирует, что для нового чата всегда будет чистое состояние
  return (
    <Chat
      key="new-draft"
      threadId=""
      initialMessages={[]}
    />
  );
}


--- FILE: ./app/chat/[...slug]/page.tsx ---
'use client';

import { useRouter } from 'next/navigation';
import { use, useEffect, useMemo, useState } from 'react';
import { useQuery, useConvexAuth } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { Id, Doc } from '@/convex/_generated/dataModel';
import { isConvexId } from '@/lib/ids';
import Chat from '@/frontend/components/Chat';
import AppShellSkeleton from '@/frontend/components/AppShellSkeleton';

export default function CatchAllChatPage({ params }: { params: Promise<{ slug: string[] }> }) {
  const resolvedParams = use(params);
  const chatId = resolvedParams.slug?.[0];
  
  const router = useRouter();
  const { isAuthenticated, isLoading: authLoading } = useConvexAuth();
  const [isInitialLoad, setIsInitialLoad] = useState(true);

  const isValidId = useMemo(() => isConvexId(chatId), [chatId]);

  const thread = useQuery(
    api.threads.get,
    isValidId ? { threadId: chatId as Id<'threads'> } : 'skip'
  );

  const messagesResult = useQuery(
    api.messages.get,
    isValidId ? { threadId: chatId as Id<'threads'> } : 'skip'
  );

  const attachments = useQuery(
    api.attachments.byThread,
    isValidId ? { threadId: chatId as Id<'threads'> } : 'skip'
  );
  
  const messages = useMemo(() => {
    if (!attachments || !messagesResult) return [];

    const attachmentsMap: Record<
      string,
      {
        id: Id<'attachments'>;
        messageId: Id<'messages'> | undefined;
        name: string;
        type: string;
        url: string | null;
      }[]
    > = {};

    attachments.forEach((a) => {
      if (!a.messageId) return;
      if (!attachmentsMap[a.messageId]) {
        attachmentsMap[a.messageId] = [];
      }
      attachmentsMap[a.messageId].push(a);
    });

    // Handle case where the query might still be loading.
    const rawMessages: Doc<'messages'>[] = messagesResult ?? []

    return rawMessages.map(m => ({
      id: m._id,
      role: m.role,
      content: m.content,
      createdAt: new Date(m._creationTime),
      parts: [{ type: 'text' as const, text: m.content }],
      attachments: attachmentsMap[m._id] ?? [],
      model: m.model,
    }))
  }, [messagesResult, attachments]);

  useEffect(() => {
    if (authLoading) return;
    if (!isAuthenticated) {
      router.replace('/');
      return;
    }
    if (!isValidId) {
      router.replace('/chat');
      return;
    }
    if (thread === null) {
      router.replace('/chat');
    }
  }, [authLoading, isAuthenticated, isValidId, router, chatId, thread]);
  
  const isLoading = authLoading || !isValidId || thread === undefined || messagesResult === undefined || attachments === undefined;

  useEffect(() => {
    if (!isLoading) {
      setIsInitialLoad(false);
    }
  }, [isLoading]);

  if (isInitialLoad) {
    return <AppShellSkeleton />;
  }

  if (thread === null) {
    return null;
  }

  return (
    <Chat
      key={chatId}
      threadId={chatId}
      initialMessages={messages}
    />
  )
}

--- FILE: ./app/api/llm/route.ts ---
import { createGoogleGenerativeAI } from '@ai-sdk/google';
import { createOpenAI } from '@ai-sdk/openai';
import { createOpenRouter } from '@openrouter/ai-sdk-provider';
import { streamText, convertToCoreMessages, type Message } from 'ai';
import { getModelConfig, AIModel } from '@/lib/models';
import { NextRequest, NextResponse } from 'next/server';
import { fetchQuery } from 'convex/nextjs';
import { api } from '@/convex/_generated/api';
import type { Id } from '@/convex/_generated/dataModel';
import { isConvexId } from '@/lib/ids';


interface Attachment {
  id: Id<'attachments'>;
  messageId: Id<'messages'> | undefined;
  name: string;
  type: string;
  url: string | null;
}

type ChatMessage = Omit<Message, 'id'>;

/**
 * Next.js route execution timeout. Streaming long replies or handling
 * large (but still bounded) files can easily exceed one minute, поэтому
 * увеличиваем лимит до 5 минут.
 */
export const maxDuration = 300;

// Максимальный допустимый размер загружаемого вложения (30 МБ)
const MAX_ATTACHMENT_SIZE_BYTES = 30 * 1024 * 1024;
// Мультимодели спокойно справляются с текстом, JSON, CSV и т. д.
const EXTRA_TEXT_MIME_TYPES = new Set([
  'application/json',
  'application/xml',
  'application/csv',
  'application/x-yaml',
  'application/sql',
]);

export async function POST(req: NextRequest) {
  try {
    const { messages, model, apiKeys, threadId, search } = await req.json();

    // Для нового чата threadId может быть пустым - это нормально
    // Проверяем только если есть сообщения, которые нужно сохранить в БД
    if (!threadId && messages.length > 1) {
      return NextResponse.json(
        { error: 'threadId required for existing conversations' },
        { status: 400 }
      );
    }

    const modelConfig = getModelConfig(model as AIModel);
    const apiKey = apiKeys[modelConfig.provider];
    const reasoningEffort = modelConfig.reasoningEffort;

    if (!apiKey) {
      return new NextResponse(JSON.stringify({ error: 'Missing API key' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    let aiModel;
    
    switch (modelConfig.provider) {
      case 'google':
        // Для Google моделей настраиваем Search Grounding согласно документации AI SDK
        if (search) {
          aiModel = createGoogleGenerativeAI({ apiKey })(modelConfig.modelId, {
            useSearchGrounding: true
          });
        } else {
          aiModel = createGoogleGenerativeAI({ apiKey })(modelConfig.modelId);
        }
        break;
      case 'openai':
        aiModel = createOpenAI({ apiKey })(modelConfig.modelId, {
          reasoningEffort: reasoningEffort,
        });
        break;
      case 'openrouter':
        aiModel = createOpenRouter({ apiKey })(modelConfig.modelId);
        break;
      case 'groq':
        /*
         * The Groq API is OpenAI-compatible, therefore we can reuse the
         * OpenAI provider from the AI SDK by specifying a custom baseURL.
         * See: https://console.groq.com/docs for details.
         */
        aiModel = createOpenAI({
          apiKey,
          baseURL: 'https://api.groq.com/openai/v1',
        })(modelConfig.modelId);
        break;
      default:
        return new Response(JSON.stringify({ error: 'Unsupported model provider' }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' },
        });
    }

    let attachments: Attachment[] = [];
    if (threadId && isConvexId(threadId)) {
      try {
        attachments = await fetchQuery(api.attachments.byThread, { threadId });
      } catch (e) {
        console.error('Attachment fetch failed:', e);
      }
    }

    const messageIds = new Set(messages.map((m: { id: string }) => m.id));

    const processedMessages: ChatMessage[] = await Promise.all(
      messages.map(async (message: { id: string; role: string; content: string }) => {
        // Attachments may arrive slightly later than the message –
        // treat attachments that haven't been linked (messageId == null)
        // as belonging to the latest user message to avoid race conditions.
        const messageAttachments = attachments.filter((a) => {
          if (!a.url) return false;
          if (a.messageId === message.id) return true;
          // If attachment.messageId is null OR not part of this request (means server DB id),
          // attach it to the nearest preceding user message without other attachments.
          if (a.messageId == null || !messageIds.has(a.messageId as unknown as string)) {
            return message.role === 'user';
          }
          return false;
        });


        if (messageAttachments.length === 0) {
          return { role: message.role, content: message.content };
        }

        const content: ({ type: 'text'; text: string } | { type: 'image'; image: string })[] = [];

        if (message.content && message.content.trim()) {
          content.push({ type: 'text', text: message.content });
        }

        for (const attachment of messageAttachments) {
          if (!attachment.url) continue;


          try {
            const res = await fetch(attachment.url);
            if (!res.ok) throw new Error(`Failed to fetch attachment ${attachment.url}`);

            const arrayBuffer = await res.arrayBuffer();
            const sizeBytes = arrayBuffer.byteLength;

            if (sizeBytes > MAX_ATTACHMENT_SIZE_BYTES) {
              content.push({
                type: 'text',
                text: `Attachment ${attachment.name} skipped – file size ${(sizeBytes / (1024 * 1024)).toFixed(1)} MB exceeds 30 MB limit.`,
              });
              console.warn('Attachment too large – skipped:', attachment.name);
              continue;
            }

            // Convert buffer once for downstream usage
            const buf = Buffer.from(arrayBuffer);

            const mime = attachment.type;

            // --- PDF ------------------------------------------------------
            if (mime === 'application/pdf') {
              try {
                // pdf-parse is CommonJS, dynamic import returns module with default
                const pdfModule = await import('pdf-parse');
                const pdf = pdfModule.default as (data: Buffer) => Promise<{ text: string }>;
                const data = await pdf(buf);
                content.push({ type: 'text', text: `PDF ${attachment.name}:\n${data.text}` });
              } catch (err) {
                console.error('PDF parse failed:', err);
                content.push({ type: 'text', text: `Unable to parse PDF ${attachment.name}.` });
              }
              continue;
            }

            // --- Plain-text & structured text ----------------------------
            if (mime.startsWith('text/') || EXTRA_TEXT_MIME_TYPES.has(mime)) {
              const text = buf.toString('utf-8');
              content.push({ type: 'text', text: `${attachment.name}:\n${text}` });
              continue;
            }

            // --- Images ---------------------------------------------------
            if (mime.startsWith('image/')) {
              if (modelConfig.provider === 'google') {
                content.push({ type: 'image', image: attachment.url });
              } else {
                const base64 = buf.toString('base64');
                content.push({ type: 'image', image: `data:${mime};base64,${base64}` });
              }
              continue;
            }

            // --- Other binaries ------------------------------------------
            const base64 = buf.toString('base64');
            content.push({
              type: 'text',
              text: `Binary file ${attachment.name} (type ${mime}, ${(sizeBytes / 1024).toFixed(0)} KB) encoded in base64 below:\n${base64}`,
            });
          } catch (err) {
            console.error('Attachment processing failed:', err);
          }
        }

        if (content.length > 0 && !content.some((c) => c.type === 'text')) {
          content.unshift({ type: 'text', text: 'Analyze the attached file(s).' });
        }


        return {
          role: message.role as 'user' | 'assistant',
          content: content.length > 1 ? content : message.content,
        };
      })
    );

    const coreMessages = convertToCoreMessages(processedMessages);

    const result = await streamText({
      model: aiModel,
      messages: coreMessages,
      // Для Google моделей useSearchGrounding уже установлен при создании модели,
      // поэтому дополнительные tools не передаём.
      onError: (e: unknown) => {
        console.error('AI SDK streamText Error:', e);
      },
      system: `
      You are Pak.Chat, an ai assistant that can answer questions and help with tasks.
      Be helpful and provide relevant information
      Be respectful and polite in all interactions.
      Be engaging and maintain a conversational tone.
      Always use LaTeX for mathematical expressions -
      Inline math must be wrapped in single dollar signs: $content$
      Display math must be wrapped in double dollar signs: $$content$$
      Display math should be placed on its own line, with nothing else on that line.
      Do not nest math delimiters or mix styles.
      Examples:
      - Inline: The equation $E = mc^2$ shows mass-energy equivalence.
      - Display: 
      $$\\frac{d}{dx}\\sin(x) = \\cos(x)$$

      When analyzing images or files, be descriptive and helpful. Explain what you see in detail and answer any questions about the content.
      `,
      abortSignal: req.signal,
        });

    return result.toDataStreamResponse({
      sendReasoning: true,
      getErrorMessage: (error: unknown) => (error as { message: string }).message,
    });
  } catch (error) {
    console.error('Chat API Error:', error);
    return new NextResponse(
      JSON.stringify({ error: 'Internal Server Error' }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
  }
}

--- FILE: ./app/api/completion/route.ts ---
import { createGoogleGenerativeAI } from '@ai-sdk/google';
import { generateText } from 'ai';
import { headers } from 'next/headers';
import { NextResponse } from 'next/server';

export async function POST(req: Request) {
  const headersList = await headers();
  const googleApiKey = headersList.get('X-Google-API-Key');

  if (!googleApiKey) {
    return NextResponse.json(
      {
        error: 'Google API key is required to enable chat title generation.',
      },
      { status: 400 }
    );
  }

  const google = createGoogleGenerativeAI({
    apiKey: googleApiKey,
  });

  const { prompt, isTitle, messageId, threadId } = await req.json();

  try {
    const { text: title } = await generateText({
      model: google('gemini-2.5-flash-lite-preview-06-17'),
      system: `\n
      - you will generate a short title based on the first message a user begins a conversation with
      - ensure it is not more than 80 characters long
      - the title should be a summary of the user's message
      - you should NOT answer the user's message, you should only generate a summary/title
      - do not use quotes or colons`,
      prompt,
    });

    return NextResponse.json({ title, isTitle, messageId, threadId });
  } catch {
    // Fallback: use the first 80 characters of the prompt as the title so that
    // the client can continue functioning even if the LLM request fails.
    const fallbackTitle = (prompt as string)?.trim().slice(0, 80) || 'New chat';

    return NextResponse.json({
      title: fallbackTitle,
      isTitle,
      messageId,
      threadId,
      error: 'Failed to generate title – using fallback',
    });
  }
}


--- FILE: ./app/share/[shareId]/page.tsx ---
'use client';
import { useState } from 'react';
import { useQuery, useMutation, useConvexAuth } from 'convex/react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import { use } from 'react';
import { api } from '@/convex/_generated/api';
import MemoizedMarkdown from '@/frontend/components/MemoizedMarkdown';
import { Button } from '@/frontend/components/ui/button';
import { Card } from '@/frontend/components/ui/card';
import { MessageSquare, ArrowRight, Copy, Check } from 'lucide-react';
import { cn } from '@/lib/utils';
import SelectableText from '@/frontend/components/SelectableText';
import QuotedMessage from '@/frontend/components/QuotedMessage';

export default function SharePage({ params }: { params: Promise<{ shareId: string }> }) {
  const { shareId } = use(params);
  const router = useRouter();
  const { isAuthenticated } = useConvexAuth();
  const thread = useQuery(api.threads.getSharedThread, { shareId });
  const continueFromShared = useMutation(api.threads.continueFromShared);
  const [isContinuing, setIsContinuing] = useState(false);
  const [copied, setCopied] = useState<string | null>(null);

  const handleContinueChat = async () => {
    if (!isAuthenticated) {
      // Redirect to login or show auth prompt
      router.push('/chat');
      return;
    }

    setIsContinuing(true);
    try {
      const newThreadId = await continueFromShared({ shareId });
      router.push(`/chat/${newThreadId}`);
    } catch (error) {
      console.error('Failed to continue chat:', error);
      setIsContinuing(false);
    }
  };

  const handleCopy = (content: string, messageId: string) => {
    navigator.clipboard.writeText(content);
    setCopied(messageId);
    setTimeout(() => setCopied(null), 2000);
  };

  if (thread === undefined) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="flex flex-col items-center gap-4">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          <p className="text-muted-foreground">Loading chat...</p>
        </div>
      </div>
    );
  }

  if (thread === null) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="p-8 text-center max-w-md">
          <MessageSquare className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
          <h1 className="text-xl font-semibold mb-2">Chat not found</h1>
          <p className="text-muted-foreground mb-4">
            The chat link is invalid or the chat has been deleted.
          </p>
          <Button onClick={() => router.push('/chat')}>
            Go to new chat
          </Button>
        </Card>
      </div>
    );
  }

  const sharedBy = thread.userInfo && !thread.isAnonymous 
    ? thread.userInfo.name 
    : 'Anonymous';

  return (
    <div className="w-full min-h-screen flex flex-col overflow-y-auto chat-smooth">
      {/* Header */}
      <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-md border-b border-border/50">
        <div className="max-w-3xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <MessageSquare className="h-6 w-6 text-primary" />
              <div>
                  <h1 className="text-lg font-semibold">
                    Chat &quot;{thread.title}&quot; shared by {sharedBy}
                  </h1>
                <div className="flex items-center gap-2">
                    {thread.userInfo && !thread.isAnonymous && thread.userInfo.avatarUrl && (
                      <Image
                        src={thread.userInfo.avatarUrl}
                        alt={sharedBy}
                        width={16}
                        height={16}
                        className="w-4 h-4 rounded-full"
                      />
                    )}
                  <p className="text-sm text-muted-foreground">
                    Shared chat • Pak.Chat
                  </p>
                </div>
              </div>
            </div>
            <Button 
              variant="ghost" 
              size="sm"
              onClick={() => router.push('/chat')}
            >
              Pak.Chat
            </Button>
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto" id="messages-scroll-area">
        <main className="w-full max-w-3xl mx-auto pt-6 pb-44 px-4 min-h-full flex-1">
          <div className="space-y-6">
            {thread.messages.map((message, i) => (
              <div
                key={i}
                id={`message-${i}`}
                role="article"
                data-role={message.role}
                className={cn(
                  'flex flex-col',
                  message.role === 'user' ? 'items-end' : 'items-start'
                )}
              >
                {message.role === 'user' ? (
                  // User message - matches real chat style
                  <div className="relative group px-4 py-3 rounded-xl bg-secondary border border-secondary-foreground/2 max-w-[90%] sm:max-w-[80%] mx-2 sm:mx-0">
                    <QuotedMessage content={message.content} />
                    
                    {/* Copy button for user messages */}
                    <div className="transition-opacity duration-100 flex gap-1 opacity-0 group-hover:opacity-100 pointer-events-auto absolute mt-5 right-2 z-10">
                      <Button 
                        variant="ghost" 
                        size="icon" 
                        onClick={() => handleCopy(message.content, `user-${i}`)}
                      >
                        {copied === `user-${i}` ? (
                          <Check className="w-4 h-4" />
                        ) : (
                          <Copy className="w-4 h-4" />
                        )}
                      </Button>
                    </div>
                  </div>
                ) : (
                  // Assistant message - matches real chat style
                  <div className="group flex flex-col gap-2 w-full px-2 sm:px-0">
                    <SelectableText messageId={`assistant-${i}`}>
                      <div className="prose prose-sm dark:prose-invert max-w-none prose-code:before:content-none prose-code:after:content-none prose-p:my-1 prose-headings:my-2 prose-ul:my-1 prose-ol:my-1 prose-li:my-0 break-words">
                        <MemoizedMarkdown content={message.content} />
                      </div>
                    </SelectableText>

                    {/* Copy button for assistant messages */}
                    <div className="transition-opacity duration-100 flex gap-1 opacity-0 group-hover:opacity-100 pointer-events-auto">
                      <Button 
                        variant="ghost" 
                        size="icon" 
                        onClick={() => handleCopy(message.content, `assistant-${i}`)}
                      >
                        {copied === `assistant-${i}` ? (
                          <Check className="w-4 h-4" />
                        ) : (
                          <Copy className="w-4 h-4" />
                        )}
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
          
          {/* End of messages */}
        </main>
      </div>

      {/* Continue Chat Button - positioned like chat input */}
      <div className="fixed left-1/2 -translate-x-1/2 w-full max-w-3xl px-4 transition-all duration-300 z-30 bottom-0">
        <div className="bg-background border border-border rounded-xl p-4 mb-4 shadow-lg">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="font-medium">Continue this conversation</h3>
              <p className="text-sm text-muted-foreground">
                Create a copy of this chat and continue the conversation
              </p>
            </div>
            <Button 
              onClick={handleContinueChat}
              disabled={isContinuing}
              className="flex items-center gap-2"
            >
              {isContinuing ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current"></div>
              ) : (
                <ArrowRight className="h-4 w-4" />
              )}
              {isContinuing ? 'Creating...' : 'Continue'}
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}


--- FILE: ./frontend/stores/DraftStore.ts ---
import { create } from 'zustand';

interface DraftState {
  draftKey: number;
  next: () => void;
}

export const useDraftStore = create<DraftState>(set => ({
  draftKey: 0,
  next: () => set(s => ({ draftKey: s.draftKey + 1 })),
}));


--- FILE: ./frontend/stores/APIKeyStore.ts ---
import { create } from 'zustand';
import { useEffect } from 'react';
import { useMutation, useQuery, useConvexAuth } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { useAuthStore } from './AuthStore';

export const PROVIDERS = ['google', 'openrouter', 'openai', 'groq'] as const;
export type Provider = (typeof PROVIDERS)[number];
export type APIKeys = Record<Provider, string>;

type APIKeyState = {
  keys: APIKeys;
  keysLoading: boolean;
  /** Возвращает ключ по имени провайдера */
  getKey: (provider: Provider) => string | undefined;
  /** Проверяет наличие обязательных ключей */
  hasRequiredKeys: () => boolean;
  setKeys: (keys: Partial<APIKeys>) => Promise<void>;
};

// Функция для глубокого сравнения объектов
const deepEqual = (a: APIKeys, b: APIKeys): boolean => {
  return JSON.stringify(a) === JSON.stringify(b);
};

// Zustand store for managing API keys
const baseStore = create<APIKeyState>((set, get) => ({
  keys: { google: '', openrouter: '', openai: '', groq: '' },
  keysLoading: true,
  getKey: (provider: Provider) => get().keys[provider],
  hasRequiredKeys: () => !!get().keys.google,
  setKeys: async () => {}, // Будет переопределено в хуке
}));

export function useAPIKeyStore() {
  const { isAuthenticated } = useConvexAuth();

  // Fetch API keys from Convex
  const apiKeysData = useQuery(
    api.apiKeys.getApiKeys,
    isAuthenticated ? {} : 'skip'
  );
  const saveApiKeys = useMutation(api.apiKeys.setApiKeys);
  
  // Получаем состояние из baseStore
  const storeState = baseStore();
  
  // Loading is finished only after API keys are fetched
  const keysLoading = apiKeysData === undefined;

  // Возвращаем keys и утилиты из состояния
  const { keys, getKey, hasRequiredKeys } = storeState;

  useEffect(() => {
    if (apiKeysData) {
      const currentKeys = baseStore.getState().keys;

      // Update keys only when they differ to avoid unnecessary renders
      if (!deepEqual(currentKeys, apiKeysData)) {
        baseStore.setState({ keys: apiKeysData });
      }
      // Mark loading complete once keys have been processed
      if (baseStore.getState().keysLoading) {
        baseStore.setState({ keysLoading: false });
      }
    } else if (apiKeysData === null && baseStore.getState().keysLoading) {
      // No API keys stored for this user
      baseStore.setState({ keysLoading: false });
    }
  }, [apiKeysData]);

  const setKeys = async (updates: Partial<APIKeys>) => {
    const currentKeys = baseStore.getState().keys;
    const newKeys = { ...currentKeys, ...updates };
    
    // Защита от пустых вызовов - проверяем, действительно ли изменились ключи
    if (!deepEqual(currentKeys, newKeys)) {
      baseStore.setState({ keys: newKeys });
      
      try {
        await saveApiKeys({
          google: newKeys.google || undefined,
          openrouter: newKeys.openrouter || undefined,
          openai: newKeys.openai || undefined,
          groq: newKeys.groq || undefined,
        });
      } catch (error) {
        const { toast } = await import('sonner');
        toast.error('Failed to save keys');
        // Откатываем изменения при ошибке
        baseStore.setState({ keys: currentKeys });
      }
    }
  };

  return { keys, setKeys, hasRequiredKeys, getKey, keysLoading };
}


--- FILE: ./frontend/stores/ModelVisibilityStore.ts ---
import { create } from 'zustand';
import { AIModel, getModelsByProvider } from '@/lib/models';
import { Provider } from '@/frontend/stores/APIKeyStore';

type ModelVisibilityStore = {
  // Избранные модели
  favoriteModels: AIModel[];
  // Включенные провайдеры
  enabledProviders: Provider[];
  // Выбранная модель
  selectedModel: AIModel;
  // Загрузка
  loading: boolean;
  
  // Действия
  toggleFavoriteModel: (model: AIModel) => void;
  toggleProvider: (provider: Provider) => void;
  setSelectedModel: (model: AIModel) => void;
  isProviderEnabled: (provider: Provider) => boolean;
  isFavoriteModel: (model: AIModel) => boolean;
  
  // Получение видимых моделей с учетом провайдеров
  getVisibleFavoriteModels: () => AIModel[];
  getVisibleGeneralModels: () => AIModel[];
  
  // Синхронизация с Convex
  syncWithConvex: (data: { favoriteModels: string[], enabledProviders: string[], selectedModel?: string }) => void;
  setLoading: (loading: boolean) => void;
};

export const useModelVisibilityStore = create<ModelVisibilityStore>((set, get) => ({
  favoriteModels: [],
  enabledProviders: ['google', 'openrouter', 'openai', 'groq'],
  selectedModel: 'Gemini 2.5 Flash',
  loading: false,

  toggleFavoriteModel: (model: AIModel) => {
    const { favoriteModels } = get();
    const newFavorites = favoriteModels.includes(model)
      ? favoriteModels.filter(m => m !== model)
      : [...favoriteModels, model];
    
    set({ favoriteModels: newFavorites });
  },

  toggleProvider: (provider: Provider) => {
    const { enabledProviders } = get();
    const newProviders = enabledProviders.includes(provider)
      ? enabledProviders.filter(p => p !== provider)
      : [...enabledProviders, provider];
    
    set({ enabledProviders: newProviders });
  },

  setSelectedModel: (model: AIModel) => {
    set({ selectedModel: model });
  },

  isProviderEnabled: (provider: Provider) => {
    return get().enabledProviders.includes(provider);
  },

  isFavoriteModel: (model: AIModel) => {
    return get().favoriteModels.includes(model);
  },

  getVisibleFavoriteModels: () => {
    return get().favoriteModels;
  },

  getVisibleGeneralModels: () => {
    const { enabledProviders } = get();
    const modelsByProvider = getModelsByProvider();
    const allModels: AIModel[] = [];
    
    for (const [provider, models] of Object.entries(modelsByProvider)) {
      if (enabledProviders.includes(provider as Provider)) {
        allModels.push(...models);
      }
    }
    
    return allModels;
  },

  syncWithConvex: (data: { favoriteModels: string[], enabledProviders: string[], selectedModel?: string }) => {
    set({
      favoriteModels: data.favoriteModels as AIModel[],
      enabledProviders: data.enabledProviders as Provider[],
      selectedModel: (data.selectedModel as AIModel) || 'Gemini 2.5 Flash',
      loading: false,
    });
  },

  setLoading: (loading: boolean) => {
    set({ loading });
  },
})); 

--- FILE: ./frontend/stores/SettingsStore.ts ---
import { create, Mutate, StoreApi } from 'zustand';
import { persist } from 'zustand/middleware';
import { useConvexAuth, useMutation, useQuery } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { useEffect, useRef } from 'react';

export const GENERAL_FONTS = ['Proxima Vara', 'System Font'] as const;
export const CODE_FONTS = ['Berkeley Mono', 'System Monospace Font'] as const;
export const THEMES = ['light', 'dark'] as const;

export type GeneralFont = (typeof GENERAL_FONTS)[number];
export type CodeFont = (typeof CODE_FONTS)[number];
export type Theme = (typeof THEMES)[number];

type Settings = {
  generalFont: GeneralFont;
  codeFont: CodeFont;
  theme: Theme;
  hidePersonal: boolean;
  showNavBars: boolean;
  showChatPreview: boolean;
  saveRegenerationHistory: boolean;
};

type SettingsStore = {
  settings: Settings;
  setSettings: (newSettings: Partial<Settings>) => void;
  resetSettings: () => void;
};

type StoreWithPersist = Mutate<
  StoreApi<SettingsStore>,
  [['zustand/persist', { settings: Settings }]]
>;

export const withStorageDOMEvents = (store: StoreWithPersist) => {
  const storageEventCallback = (e: StorageEvent) => {
    if (e.key === store.persist.getOptions().name && e.newValue) {
      store.persist.rehydrate();
    }
  };

  window.addEventListener('storage', storageEventCallback);

  return () => {
    window.removeEventListener('storage', storageEventCallback);
  };
};

const defaultSettings: Settings = {
  // Default interface font uses Proxima Vara when available
  generalFont: 'Proxima Vara',
  // Code font remains Berkeley Mono by default
  codeFont: 'Berkeley Mono',
  theme: 'light',
  hidePersonal: false,
  showNavBars: true,
  showChatPreview: true,
  saveRegenerationHistory: true,
};

export const useSettingsStore = create<SettingsStore>()(
  persist(
    (set, get) => ({
      settings: defaultSettings,

      setSettings: (newSettings) => {
        set((state) => ({
          settings: { ...state.settings, ...newSettings },
        }));
      },

      resetSettings: () => {
        set({ settings: defaultSettings });
      },
    }),
    {
      name: 'user-settings',
      partialize: (state) => ({ settings: state.settings }),
    }
  )
);

if (typeof window !== 'undefined') {
  withStorageDOMEvents(useSettingsStore);
}

export function useSettingsSync() {
  const { isAuthenticated } = useConvexAuth();
  const convexUser = useQuery(
    api.users.getCurrent,
    isAuthenticated ? {} : 'skip'
  );
  const settingsDoc = useQuery(
    api.userSettings.get,
    convexUser ? {} : 'skip'
  );
  const save = useMutation(api.userSettings.saveSettings);

  const { settings, setSettings } = useSettingsStore();
  const lastSaved = useRef<typeof settings | null>(null);
  const isInitialized = useRef(false);

  // hydrate from server - только один раз при инициализации
  useEffect(() => {
    if (settingsDoc && !isInitialized.current) {
      const { uiFont, codeFont, hidePersonal, saveRegenerationHistory: srh } = settingsDoc;
      const serverSettings = {
        generalFont: (uiFont as GeneralFont) ?? 'Proxima Vara',
        codeFont: (codeFont as CodeFont) ?? 'Berkeley Mono',
        hidePersonal: hidePersonal ?? false,
        saveRegenerationHistory: srh ?? true,
      };
      
      setSettings(serverSettings);
      lastSaved.current = {
        ...serverSettings,
        theme: settings.theme,
        showNavBars: settings.showNavBars,
        showChatPreview: settings.showChatPreview,
        saveRegenerationHistory: settings.saveRegenerationHistory,
      };
      isInitialized.current = true;
    }
  }, [settingsDoc, setSettings]); // Убираем settings.theme из зависимостей

  // save to server when settings change - только синхронизируемые настройки
  useEffect(() => {
    if (!convexUser || !isInitialized.current) return;
    if (!lastSaved.current) return;
    
    const hasChanges = settings.generalFont !== lastSaved.current.generalFont ||
                      settings.codeFont !== lastSaved.current.codeFont ||
                      settings.hidePersonal !== lastSaved.current.hidePersonal ||
                      settings.saveRegenerationHistory !== lastSaved.current.saveRegenerationHistory;
    
    if (hasChanges) {
      lastSaved.current = { ...lastSaved.current, ...settings };
      save({
        uiFont: settings.generalFont,
        codeFont: settings.codeFont,
        hidePersonal: settings.hidePersonal,
        saveRegenerationHistory: settings.saveRegenerationHistory,
      } as any);
    }
  }, [settings.generalFont, settings.codeFont, settings.hidePersonal, settings.saveRegenerationHistory, save, convexUser]); // Только конкретные поля
}

--- FILE: ./frontend/stores/QuoteStore.ts ---
import { create } from 'zustand';

export interface Quote {
  id: string;
  text: string;
  messageId: string;
  createdAt: Date;
}

interface QuoteStore {
  currentQuote: Quote | null;
  isQuoting: boolean;
  setQuote: (quote: Quote | null) => void;
  clearQuote: () => void;
  setIsQuoting: (isQuoting: boolean) => void;
}

export const useQuoteStore = create<QuoteStore>((set) => ({
  currentQuote: null,
  isQuoting: false,
  
  setQuote: (quote) => set({ currentQuote: quote, isQuoting: !!quote }),
  
  clearQuote: () => set({ currentQuote: null, isQuoting: false }),
  
  setIsQuoting: (isQuoting) => set({ isQuoting }),
})); 

--- FILE: ./frontend/stores/AttachmentsStore.ts ---
import { create } from 'zustand';
import { v4 as uuid } from 'uuid';

export interface LocalAttachment {
  id: string;
  file: File;
  preview: string;
  name: string;
  ext: string;
  type: string;
  size: number;
  remote?: false;
}

export interface RemoteAttachment {
  id: string;
  preview: string; // preview URL (may be null for non-images)
  name: string;
  ext: string;
  type: string;
  size: number;
  storageId: string;
  previewId?: string;
  remote: true;
}

export type Attachment = LocalAttachment | RemoteAttachment;

interface AttachmentState {
  attachments: Attachment[];
  add: (file: File) => void;
  addRemote: (info: Omit<RemoteAttachment, 'id' | 'ext' | 'preview'> & { preview?: string | null }) => void;
  remove: (id: string) => void;
  clear: () => void;
}

export const useAttachmentsStore = create<AttachmentState>((set) => ({
  attachments: [],
  add: (file) =>
    set((state) => ({
      attachments: [
        ...state.attachments,
        {
          id: uuid(),
          file,
          preview: URL.createObjectURL(file),
          name: file.name.length > 24 ? file.name.slice(0, 21) + '...' : file.name,
          ext: file.name.split('.').pop() ?? '',
          type: file.type,
          size: file.size,
          remote: false,
        },
      ],
    })),
  addRemote: (info) =>
    set((state) => ({
      attachments: [
        ...state.attachments,
        {
          id: uuid(),
          preview: info.preview ?? '',
          name: info.name.length > 24 ? info.name.slice(0, 21) + '...' : info.name,
          ext: info.name.split('.').pop() ?? '',
          type: info.type,
          size: info.size,
          storageId: info.storageId,
          previewId: info.previewId,
          remote: true,
        } as RemoteAttachment,
      ],
    })),
  remove: (id) => set((state) => {
    const attachment = state.attachments.find(a => a.id === id);
    if (attachment) {
      URL.revokeObjectURL(attachment.preview);
    }
    return { attachments: state.attachments.filter((a) => a.id !== id) };
  }),
  clear: () => set((state) => {
    // Очищаем все preview URL
    state.attachments.forEach(a => {
      if (!a.remote) {
        URL.revokeObjectURL(a.preview);
      }
    });
    return { attachments: [] };
  }),
}));


--- FILE: ./frontend/stores/ModelStore.ts ---
import { create, Mutate, StoreApi } from 'zustand';
import { persist } from 'zustand/middleware';
import { AIModel, getModelConfig, ModelConfig } from '@/lib/models';

export type ReasoningEffort = "medium" | "low" | "high";

type ModelStore = {
  selectedModel: AIModel;
  modelSpecificSettings: Partial<Record<AIModel, { reasoningEffort?: ReasoningEffort }>>;
  webSearchEnabled: boolean;
  setModel: (model: AIModel) => void;
  getModelConfig: () => ModelConfig;
  setReasoningEffort: (model: AIModel, effort: ReasoningEffort) => void;
  setWebSearchEnabled: (enabled: boolean) => void;
  supportsWebSearch: (model?: AIModel) => boolean;
  // Новые методы для синхронизации
  syncSelectedModel: (model: AIModel) => void;
};

type StoreWithPersist = Mutate<
  StoreApi<ModelStore>,
  [['zustand/persist', { selectedModel: AIModel; modelSpecificSettings: Partial<Record<AIModel, { reasoningEffort?: ReasoningEffort }>>; webSearchEnabled: boolean }]]
>;

export const withStorageDOMEvents = (store: StoreWithPersist) => {
  const storageEventCallback = (e: StorageEvent) => {
    if (e.key === store.persist.getOptions().name && e.newValue) {
      store.persist.rehydrate();
    }
  };

  // Проверяем что window существует (только на клиенте)
  if (typeof window !== 'undefined') {
    window.addEventListener('storage', storageEventCallback);
  }

  return () => {
    if (typeof window !== 'undefined') {
      window.removeEventListener('storage', storageEventCallback);
    }
  };
};

export const useModelStore = create<ModelStore>()(
  persist(
    (set, get) => ({
      selectedModel: 'Gemini 2.5 Flash',
      modelSpecificSettings: {},
      webSearchEnabled: false,

      setModel: (model) => {
        set({ selectedModel: model });
        // Синхронизация будет происходить через useModelSync хук
      },

      syncSelectedModel: (model) => {
        // Синхронизация модели из Convex без повторного сохранения
        set({ selectedModel: model });
      },

      getModelConfig: () => {
        const { selectedModel, modelSpecificSettings } = get();
        const baseConfig = getModelConfig(selectedModel);
        return {
          ...baseConfig,
          reasoningEffort: modelSpecificSettings[selectedModel]?.reasoningEffort || baseConfig.reasoningEffort,
        };
      },

      setReasoningEffort: (model, effort) => {
        set(state => ({
          modelSpecificSettings: {
            ...state.modelSpecificSettings,
            [model]: {
              ...state.modelSpecificSettings[model],
              reasoningEffort: effort,
            },
          },
        }));
      },

      setWebSearchEnabled: (enabled) => {
        set({ webSearchEnabled: enabled });
      },

      supportsWebSearch: (model) => {
        const targetModel = model || get().selectedModel;
        const config = getModelConfig(targetModel);
        // Веб-поиск поддерживают модели Google (Gemini)
        return config.provider === 'google';
      },
    }),
    {
      name: 'selected-model',
      partialize: (state) => ({
        selectedModel: state.selectedModel,
        modelSpecificSettings: state.modelSpecificSettings,
        webSearchEnabled: state.webSearchEnabled,
      }),
    }
  )
);

withStorageDOMEvents(useModelStore);


--- FILE: ./frontend/stores/AuthStore.ts ---
import { User, GoogleAuthProvider, signInWithPopup, signOut, onAuthStateChanged } from 'firebase/auth';
import { create } from 'zustand';
import { auth } from '@/firebase';
import { useSettingsStore } from './SettingsStore';

interface AuthState {
  user: User | null;
  loading: boolean;
  blurPersonalData: boolean;
  login: () => Promise<void>;
  logout: () => Promise<void>;
  toggleBlur: () => void;
  init: () => () => void;
}

export const useAuthStore = create<AuthState>((set) => {
  // 1. Действия
  const actions = {
    async login() {
      set({ loading: true });
      try {
        await signInWithPopup(auth, new GoogleAuthProvider());
      } finally {
        set({ loading: false });
      }
    },
    async logout() {
      try {
        await signOut(auth);
      } catch {
        /* ignore logout failure */
      }
    },
    toggleBlur: () => {
      set((s) => {
        const newValue = !s.blurPersonalData;
        useSettingsStore.getState().setSettings({ hidePersonal: newValue });
        return { blurPersonalData: newValue };
      });
    },
  };

  // Allows React components to start and clean up the auth listener
  const init = () => {
    if (typeof window === 'undefined') {
      return () => {};
    }
    const unsub = onAuthStateChanged(auth, async (user) => {
      set({ user, loading: false });
    });
    return unsub;
  };

  // 3. Начальное состояние + действия
  return {
    user: null,
    loading: true,
    blurPersonalData: useSettingsStore.getState().settings.hidePersonal,
    ...actions,
    init,
  };
});


--- FILE: ./frontend/stores/ChatStore.ts ---
import { create } from 'zustand';

interface ChatStoreState {
  setInputFn: ((value: string) => void) | null;
  registerInputSetter: (fn: (value: string) => void) => void;
  setInput: (value: string) => void;
  nextDialogVersion: number | null;
  setNextDialogVersion: (v: number | null) => void;
  consumeNextDialogVersion: () => number | null;
}

export const useChatStore = create<ChatStoreState>((set, get) => ({
  setInputFn: null,
  registerInputSetter: (fn) => set({ setInputFn: fn }),
  setInput: (value) => {
    const fn = get().setInputFn;
    if (fn) fn(value);
  },
  nextDialogVersion: null,
  setNextDialogVersion: (v) => set({ nextDialogVersion: v }),
  consumeNextDialogVersion: () => {
    const v = get().nextDialogVersion;
    set({ nextDialogVersion: null });
    return v;
  },
}));


--- FILE: ./frontend/components/ChatNavigationBars.tsx ---
"use client"

import type React from "react"
import { useState, useRef, useEffect } from "react"
import { cn } from "@/lib/utils"
import { UIMessage } from 'ai'

interface ChatNavigationBarsProps {
  messages: UIMessage[]
  scrollToMessage: (id: string) => void
  currentMessageId?: string
}

export default function ChatNavigationBars({ messages, scrollToMessage, currentMessageId }: ChatNavigationBarsProps) {
  const [isHovered, setIsHovered] = useState(false)
  const [hoveredMessageId, setHoveredMessageId] = useState<string | null>(null)
  const [maxBarLength, setMaxBarLength] = useState(0)
  const sidebarRef = useRef<HTMLDivElement>(null)
  const scrollContainerRef = useRef<HTMLDivElement>(null)

  // Фильтруем только пользовательские сообщения для навигации
  const userMessages = messages.filter(message => message.role === 'user')

  // Вычисляем максимальную длину полоски при монтировании компонента
  useEffect(() => {
    if (userMessages.length > 0) {
      const maxLength = Math.max(...userMessages.map((message) => getBarLength(message.content.length)))
      setMaxBarLength(maxLength)
    }
  }, [userMessages])

  // Автоматически скроллим к текущему активному сообщению
  useEffect(() => {
    if (currentMessageId && scrollContainerRef.current && !isHovered) {
      const currentIndex = userMessages.findIndex(msg => msg.id === currentMessageId)
      if (currentIndex !== -1) {
        const container = scrollContainerRef.current
        const itemHeight = 4.5 // 3px высота + 1.5 space-y
        const scrollPosition = currentIndex * itemHeight
        const containerHeight = container.clientHeight
        
        // Скроллим только если элемент не виден
        if (scrollPosition < container.scrollTop || scrollPosition > container.scrollTop + containerHeight) {
          container.scrollTo({
            top: scrollPosition - containerHeight / 2,
            behavior: 'smooth'
          })
        }
      }
    }
  }, [currentMessageId, userMessages, isHovered])

  // Функция для вычисления длины полоски на основе длины сообщения
  const getBarLength = (messageLength: number) => {
    const minLength = 16
    const maxLength = 60  // Уменьшил максимальную длину
    const maxMessageLength = 150  // Уменьшил порог для максимальной длины

    const normalizedLength = Math.min(messageLength, maxMessageLength)
    const length = minLength + (normalizedLength / maxMessageLength) * (maxLength - minLength)

    return Math.round(length)
  }

  // Функция для получения заголовка сообщения (ограничение до 6 слов)
  const getMessageTitle = (content: string) => {
    const words = content.trim().split(/\s+/)
    if (words.length <= 6) {
      return content
    }
    return words.slice(0, 6).join(' ') + '...'
  }

  const handleMouseEnter = (messageId: string) => {
    setIsHovered(true)
    setHoveredMessageId(messageId)
  }

  const handleMouseLeave = () => {
    setIsHovered(false)
    setHoveredMessageId(null)
  }

  const handleBarClick = (messageId: string) => {
    scrollToMessage(messageId)
  }

  // Если нет пользовательских сообщений, не отображаем навигацию
  if (userMessages.length === 0) {
    return null
  }

  return (
    <div 
      ref={sidebarRef} 
      className="fixed left-0 top-0 w-20 h-full flex flex-col items-start justify-center py-4 pl-3 z-30"
      onMouseLeave={handleMouseLeave}
    >
      {isHovered ? (
        // Плитка при наведении в стиле Notion
        <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-lg p-2 min-w-[200px] max-w-[280px]">
          {userMessages.map((message, index) => {
            const messageTitle = getMessageTitle(message.content)
            const isCurrentHovered = hoveredMessageId === message.id
            const isCurrentMessage = currentMessageId === message.id
            
            return (
              <div
                key={message.id}
                className={cn(
                  "py-1.5 px-2 rounded-md cursor-pointer transition-colors duration-150 text-sm",
                  // Простая подсветка при наведении без синего цвета
                  isCurrentHovered 
                    ? "bg-gray-100 dark:bg-gray-700" 
                    : "hover:bg-gray-50 dark:hover:bg-gray-750"
                )}
                onClick={() => handleBarClick(message.id)}
                onMouseEnter={() => setHoveredMessageId(message.id)}
              >
                <div className={cn(
                  "leading-tight transition-colors duration-150",
                  // Подсветка текста текущего сообщения
                  isCurrentMessage 
                    ? "text-gray-900 dark:text-white font-medium" 
                    : "text-gray-700 dark:text-gray-200"
                )}>
                  {messageTitle}
                </div>
              </div>
            )
          })}
        </div>
      ) : (
        // Полоски в стиле Notion с прокруткой при большом количестве сообщений
        <div 
          ref={scrollContainerRef}
          className="flex flex-col items-start space-y-1.5 max-h-[70vh] overflow-y-auto scrollbar-none"
        >
          {userMessages.map((message) => {
            const barLength = getBarLength(message.content.length)
            const isActive = currentMessageId === message.id

            return (
              <div
                key={message.id}
                className={cn(
                  "transition-all duration-200 rounded-sm cursor-pointer flex-shrink-0",
                  // Базовые стили как в Notion
                  "bg-gray-300/70 dark:bg-gray-600/60 hover:bg-gray-400/80 dark:hover:bg-gray-500/70",
                  // Активное состояние без синего цвета
                  isActive && "bg-gray-400/90 dark:bg-gray-500/80"
                )}
                style={{
                  width: `${barLength}px`,
                  height: "3px",
                }}
                onMouseEnter={() => handleMouseEnter(message.id)}
                onClick={() => handleBarClick(message.id)}
              />
            )
          })}
        </div>
      )}
    </div>
  )
} 

--- FILE: ./frontend/components/UserSync.tsx ---
"use client";

import { useUserSync } from '@/frontend/hooks/useUserSync';

export default function UserSync() {
  useUserSync();
  return null;
} 

--- FILE: ./frontend/components/ChatPreview.tsx ---
"use client";

import { useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";
import type { Id } from "@/convex/_generated/dataModel";
import { memo, useState, useMemo } from "react";
import MarkdownRenderer from "./MemoizedMarkdown";
import MessageReasoning from "./MessageReasoning";
import { cn } from "@/lib/utils";
import MessageLoading from "./ui/MessageLoading";
import SelectableText from "./SelectableText";
import QuotedMessage from "./QuotedMessage";
import { Button } from "./ui/button";
import { Check, Copy, GitBranch } from "lucide-react";
import { useMutation, useQuery as useConvexQuery } from "convex/react";
import { isConvexId } from "@/lib/ids";
import { useRouter } from "next/navigation";

/* ------------------------------------------------------------------ */
/* Константы — подстрой под свой реальный сайдбар                     */
/* ------------------------------------------------------------------ */
const SIDEBAR_WIDTH = 300;  // ширина ChatHistory
const SIDE_GAP      = 20;   // зазор между панелями

/* ------------------------------------------------------------------ */
/* Тип пропсов                                                         */
/* ------------------------------------------------------------------ */
interface ChatPreviewProps {
  threadId: Id<"threads"> | null;
  onClose?: () => void;
}

/* ------------------------------------------------------------------ */
/* Контролы (копирование / ветвление)                                  */
/* ------------------------------------------------------------------ */
const PreviewMessageControls = memo(
  ({
    threadId,
    content,
    message,
    onClose,
  }: {
    threadId: string;
    content: string;
    message: any;
    onClose?: () => void;
  }) => {
    const [copied, setCopied]  = useState(false);
    const cloneThread          = useMutation(api.threads.clone);
    const thread               = useConvexQuery(
      api.threads.get,
      isConvexId(threadId) ? { threadId: threadId as Id<"threads"> } : "skip"
    );
    const router = useRouter();

    const handleCopy = () => {
      navigator.clipboard.writeText(content);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    };

    const handleBranch = async () => {
      if (!isConvexId(threadId)) return;
      const title = thread?.title ?? content.slice(0, 30);
      const newId = await cloneThread({
        threadId: threadId as Id<"threads">,
        title,
      });
      router.push(`/chat/${newId}`);
      onClose?.();
    };

    return (
      <div
        className={cn(
          "transition-opacity duration-100 flex gap-1 opacity-0 group-hover:opacity-100 pointer-events-auto",
          { "absolute mt-5 right-2 z-10": message.role === "user" }
        )}
      >
        <Button variant="ghost" size="icon" onClick={handleCopy}>
          {copied ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
        </Button>
        <Button variant="ghost" size="icon" onClick={handleBranch}>
          <GitBranch className="w-4 h-4" />
        </Button>
      </div>
    );
  }
);
PreviewMessageControls.displayName = "PreviewMessageControls";

/* ------------------------------------------------------------------ */
/* Одно сообщение                                                      */
/* ------------------------------------------------------------------ */
const PreviewMessage = memo(
  ({
    message,
    threadId,
    onClose,
  }: {
    message: any;
    threadId: Id<"threads">;
    onClose?: () => void;
  }) => {
    const isUser = message.role === "user";

    // Извлекаем reasoning из сообщения
    const reasoningData = useMemo(() => {
      const extractReasoning = (text: string) => {
        const openTag = text.indexOf('<think>');
        const closeTag = text.indexOf('</think>');
        
        if (openTag === -1) return null;
        
        const startIndex = openTag + 7;
        const endIndex = closeTag > -1 ? closeTag : text.length;
        const rawReasoning = text.slice(startIndex, endIndex);
        const cleanReasoning = rawReasoning.replace(/g:"([^"]*)"/g, '$1');
        
        return {
          reasoning: cleanReasoning,
          isComplete: closeTag > -1
        };
      };

      // Проверяем содержимое сообщения на наличие reasoning
      if (message.content && message.content.includes('<think>')) {
        return extractReasoning(message.content);
      }
      return null;
    }, [message.content]);

    return (
      <div className={cn("flex flex-col", isUser ? "items-end mb-2" : "items-start mb-4")}>
        {isUser ? (
          <div className="relative group px-4 py-3 rounded-xl bg-secondary max-w-[85%] break-words mb-2">
            <QuotedMessage content={message.content} />
            <PreviewMessageControls
              threadId={threadId}
              content={message.content}
              message={message}
              onClose={onClose}
            />
          </div>
        ) : (
          <div className="group flex flex-col gap-2 w-full max-w-full overflow-hidden relative pb-3">
            {/* Показываем reasoning отдельно если найден */}
            {reasoningData && reasoningData.reasoning.trim() && (
              <MessageReasoning
                key={`reasoning-${message._id}`}
                reasoning={reasoningData.reasoning}
                id={message._id}
                isComplete={reasoningData.isComplete}
              />
            )}

            <SelectableText messageId={message._id}>
              <div className="prose prose-xs dark:prose-invert max-w-none prose-code:before:content-none prose-code:after:content-none prose-p:my-1 prose-headings:my-2 prose-ul:my-1 prose-ol:my-1 prose-li:my-0 break-words">
                <MarkdownRenderer content={message.content} />
              </div>
            </SelectableText>

            <PreviewMessageControls
              threadId={threadId}
              content={message.content}
              message={message}
              onClose={onClose}
            />
          </div>
        )}
      </div>
    );
  }
);
PreviewMessage.displayName = "PreviewMessage";

/* ------------------------------------------------------------------ */
/* Основной компонент                                                  */
/* ------------------------------------------------------------------ */
export default function ChatPreview({ threadId, onClose }: ChatPreviewProps) {
  // No auto-scroll logic needed
  const messages = useQuery(
    api.messages.preview,
    threadId ? { threadId, limit: 8 } : "skip"
  );

  /* ---------- Заглушки ---------- */
  const placeholder = (text: string, showLoading = false) => (
    <div className="flex items-center justify-center h-full">
      {showLoading ? (
        <MessageLoading />
      ) : (
        <span className="text-sm text-muted-foreground">{text}</span>
      )}
    </div>
  );

  if (!threadId)                 return placeholder("Hover a chat to preview");
  if (messages === undefined)    return placeholder("", true);
  if (messages.length === 0)     return placeholder("No messages");

  /* ---------- Превью ---------- */
  return (
    <div className="absolute top-0 right-0 bottom-0 w-[600px] bg-background border-l border-border">
      {/* заголовок */}
      <div className="px-4 py-3 shrink-0 border-b border-border">
        <h3 className="text-sm font-medium text-muted-foreground">Preview</h3>
      </div>

      {/* список сообщений */}
      <div
        className="flex-1 min-h-0 overflow-y-auto h-[calc(100%-60px)]"
        style={{
          overscrollBehavior: "contain",
          WebkitOverflowScrolling: "touch",
        }}
      >
        <div className="flex flex-col space-y-6 p-4">
          {messages
            .toReversed() /* newest at top */
            .map((message) => (
              <PreviewMessage
                key={message._id}
                message={message}
                threadId={threadId}
                onClose={onClose}
              />
            ))}
        </div>
      </div>
    </div>
  );
}


--- FILE: ./frontend/components/FilePreview.tsx ---
"use client";

import { useState } from 'react';
import { X, FileText, File, Image as ImageIcon } from 'lucide-react';
import { cn } from '@/lib/utils';

interface FilePreviewProps {
  file: {
    id: string;
    name: string;
    type: string;
    size: number;
    preview: string;
    ext: string;
  };
  onRemove: (id: string) => void;
  showPreview?: boolean;
}

export default function FilePreview({ file, onRemove, showPreview = true }: FilePreviewProps) {
  const [isHovered, setIsHovered] = useState(false);

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
  };

  const getFileIcon = () => {
    if (file.type.startsWith('image/')) return ImageIcon;
    if (file.type.includes('pdf')) return FileText;
    if (file.type.startsWith('text/')) return FileText;
    return File;
  };

  const getFileColor = () => {
    if (file.type.startsWith('image/')) return 'bg-blue-50 border-blue-200 dark:bg-blue-950/30 dark:border-blue-800';
    if (file.type.includes('pdf')) return 'bg-red-50 border-red-200 dark:bg-red-950/30 dark:border-red-800';
    if (file.type.startsWith('text/')) return 'bg-green-50 border-green-200 dark:bg-green-950/30 dark:border-green-800';
    return 'bg-gray-50 border-gray-200 dark:bg-gray-950/30 dark:border-gray-800';
  };

  const getIconColor = () => {
    if (file.type.startsWith('image/')) return 'text-blue-600 dark:text-blue-400';
    if (file.type.includes('pdf')) return 'text-red-600 dark:text-red-400';
    if (file.type.startsWith('text/')) return 'text-green-600 dark:text-green-400';
    return 'text-gray-600 dark:text-gray-400';
  };

  // Для изображений с превью при наведении
  if (file.type.startsWith('image/')) {
    return (
      <div 
        className="relative flex-shrink-0 group"
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        <div className="relative">
          <img 
            src={file.preview} 
            className="h-16 w-16 object-cover rounded-lg border-2 border-blue-200 dark:border-blue-800 shadow-sm" 
            alt={file.name}
          />
          
          {/* Превью при наведении - показываем выше поля ввода */}
          {showPreview && isHovered && (
            <div className="fixed z-[200] pointer-events-none" style={{
              left: '50%',
              top: '20%',
              transform: 'translateX(-50%)'
            }}>
              <div className="bg-background border border-border rounded-lg shadow-xl p-3">
                <img
                  src={file.preview}
                  alt={file.name}
                  className="w-64 h-64 object-cover rounded-lg"
                />
                <div className="mt-2 text-sm text-muted-foreground text-center">
                  <div className="font-medium truncate max-w-64">{file.name}</div>
                  <div>{formatFileSize(file.size)}</div>
                </div>
              </div>
            </div>
          )}
        </div>
        
        {/* Крестик всегда виден при наведении на группу */}
        <button
          onClick={(e) => {
            e.preventDefault();
            e.stopPropagation();
            onRemove(file.id);
          }}
          className="absolute -right-1 -top-1 bg-background border border-border rounded-full p-1 hover:bg-destructive hover:text-destructive-foreground hover:border-destructive transition-colors shadow-sm opacity-0 group-hover:opacity-100 z-10"
          aria-label="Remove file"
        >
          <X className="w-3 h-3" />
        </button>
      </div>
    );
  }

  // Для других типов файлов - только название и размер, без превью
  const IconComponent = getFileIcon();
  
  return (
    <div className="relative flex-shrink-0 group">
      <div className={cn(
        "h-16 w-20 rounded-lg border-2 flex flex-col items-center justify-center text-[10px] px-1 shadow-sm transition-all duration-200 hover:shadow-md",
        getFileColor()
      )}>
        <IconComponent className={cn("w-5 h-5 mb-1", getIconColor())} />
        <span className="line-clamp-1 text-center font-medium text-foreground leading-tight">{file.name}</span>
        <span className="text-muted-foreground mt-0.5">{formatFileSize(file.size)}</span>
      </div>
      
      <button
        onClick={(e) => {
          e.preventDefault();
          e.stopPropagation();
          onRemove(file.id);
        }}
        className="absolute -right-1 -top-1 bg-background border border-border rounded-full p-1 hover:bg-destructive hover:text-destructive-foreground hover:border-destructive transition-colors shadow-sm opacity-0 group-hover:opacity-100 z-10"
        aria-label="Remove file"
      >
        <X className="w-3 h-3" />
      </button>
    </div>
  );
} 

--- FILE: ./frontend/components/RecentFilesDropdown.tsx ---
"use client";

import { useState, useEffect, useCallback, useMemo } from 'react';
import { Clock, FileIcon, X, Image, FileText, File, ChevronRight } from 'lucide-react';
import { Button } from './ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from './ui/dropdown-menu';
import { useAttachmentsStore } from '../stores/AttachmentsStore';
import { cn } from '@/lib/utils';
import { toast } from 'sonner';

interface RecentFile {
  id: string;
  name: string;
  type: string;
  size: number;
  lastUsed: Date;
  preview?: string;
  storageId?: string;
  previewId?: string;
}

interface RecentFilesDropdownProps {
  children: React.ReactNode;
  onFileSelect?: (file: File) => void;
  messageCount?: number;
}

// Хранилище для недавних файлов в localStorage
const RECENT_FILES_KEY = 'pak_chat_recent_files';
const MAX_RECENT_FILES = 15;

export default function RecentFilesDropdown({ children, onFileSelect, messageCount = 0 }: RecentFilesDropdownProps) {
  const { add, addRemote } = useAttachmentsStore();
  const [recentFiles, setRecentFiles] = useState<RecentFile[]>([]);
  const [isOpen, setIsOpen] = useState(false);

  // Мемоизируем отображаемые файлы для предотвращения ререндеров
  const displayedFiles = useMemo(() => 
    recentFiles.slice(0, MAX_RECENT_FILES),
    [recentFiles]
  );

  // Загружаем недавние файлы из localStorage с улучшенной валидацией (F1.4)
  useEffect(() => {
    const saved = localStorage.getItem(RECENT_FILES_KEY);
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        
        if (!Array.isArray(parsed)) {
          console.warn('Recent files data is not an array, clearing');
          localStorage.removeItem(RECENT_FILES_KEY);
          return;
        }

        // Валидация и очистка данных
        const validFiles = parsed
          .filter((file: any) => {
            // Основная валидация структуры
            if (!file || typeof file !== 'object') return false;
            if (!file.id || !file.name || !file.type || typeof file.size !== 'number') return false;
            
            // Проверка возраста файла (удаляем файлы старше 30 дней)
            const lastUsed = new Date(file.lastUsed);
            const daysDiff = Math.floor((Date.now() - lastUsed.getTime()) / (1000 * 60 * 60 * 24));
            if (daysDiff > 30) return false;
            
            // Удаляем недействительные blob URLs
            if (file.preview && file.preview.startsWith('blob:')) {
              file.preview = undefined;
            }
            
            return true;
          })
          .map((file: any) => ({
            ...file,
            lastUsed: new Date(file.lastUsed)
          }))
          .slice(0, MAX_RECENT_FILES); // Ограничиваем количество
        
        setRecentFiles(validFiles);
        
        // Если данные изменились, сохраняем очищенную версию
        if (validFiles.length !== parsed.length) {
          localStorage.setItem(RECENT_FILES_KEY, JSON.stringify(validFiles));
        }
        
      } catch (e) {
        console.error('Failed to parse recent files, clearing corrupt data:', e);
        localStorage.removeItem(RECENT_FILES_KEY);
        setRecentFiles([]);
      }
    }
  }, []);

  const handleFileSelect = useCallback(async (recentFile: RecentFile) => {
    try {
      if (recentFile.storageId) {
        // Build remote attachment object and add to store
        addRemote({
          storageId: recentFile.storageId,
          previewId: recentFile.previewId,
          name: recentFile.name,
          type: recentFile.type,
          size: recentFile.size,
          preview: recentFile.preview ?? undefined,
          remote: true,
        });
        toast.success(`Reattached "${recentFile.name}"`);
      } else {
        toast.info(
          `Cannot reattach "${recentFile.name}" from recent files. Please select the file from your device again.`,
          {
            duration: 5000,
            description: 'This file was stored only as a history entry without data.',
          }
        );
      }
      setIsOpen(false);
    } catch (error) {
      console.error('Failed to handle recent file selection:', error);
      toast.error('An error occurred while handling the recent file selection.');
    }
  }, []);

  const removeFromRecent = useCallback((fileId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    const updated = recentFiles.filter(f => f.id !== fileId);
    setRecentFiles(updated);
    
    try {
      localStorage.setItem(RECENT_FILES_KEY, JSON.stringify(updated));
    } catch (e) {
      console.error('Failed to save recent files:', e);
    }
  }, [recentFiles]);

  const formatFileSize = useCallback((bytes: number): string => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
  }, []);

  const formatDate = useCallback((date: Date): string => {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    
    if (minutes < 1) return 'Just now';
    if (minutes < 60) return `${minutes}m ago`;
    if (hours < 24) return `${hours}h ago`;
    if (days < 7) return `${days}d ago`;
    return date.toLocaleDateString();
  }, []);

  const getFileIcon = useCallback((type: string) => {
    if (type.startsWith('image/')) return Image;
    if (type.includes('pdf')) return FileText;
    if (type.startsWith('text/')) return FileText;
    return File;
  }, []);

  const getFileColor = useCallback((type: string) => {
    if (type.startsWith('image/')) return 'text-blue-500';
    if (type.includes('pdf')) return 'text-red-500';
    if (type.startsWith('text/')) return 'text-green-500';
    return 'text-muted-foreground';
  }, []);

  const getFileTypeLabel = useCallback((type: string): string => {
    if (type.startsWith('image/')) {
      const subType = type.split('/')[1]?.toUpperCase();
      return subType || 'IMAGE';
    }
    if (type.includes('pdf')) return 'PDF';
    if (type.startsWith('text/')) return 'TEXT';
    if (type.includes('json')) return 'JSON';
    if (type.includes('xml')) return 'XML';
    if (type.includes('csv')) return 'CSV';
    if (type.includes('javascript')) return 'JS';
    if (type.includes('typescript')) return 'TS';
    if (type.includes('python')) return 'PY';
    if (type.includes('java')) return 'JAVA';
    if (type.includes('cpp') || type.includes('c++')) return 'C++';
    if (type.includes('csharp')) return 'C#';
    return 'FILE';
  }, []);

  return (
    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>
      <DropdownMenuTrigger asChild>
        <div className="group">
          {children}
        </div>
      </DropdownMenuTrigger>
      <DropdownMenuContent 
        align="start" 
        side="right"
        className="w-64 max-h-80 overflow-y-auto p-2 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-muted-foreground/30 scrollbar-thumb-rounded-full bg-popover/95 backdrop-blur-sm shadow-lg rounded-xl border-border"
        sideOffset={8}
        alignOffset={0}
      >
        {displayedFiles.length === 0 ? (
          <div className="flex flex-col items-center justify-center py-8 text-center">
            <Clock className="w-8 h-8 text-muted-foreground mb-2" />
            <p className="text-sm text-muted-foreground">No recent files</p>
          </div>
        ) : (
          <div className="space-y-1">
            <div className="flex items-center gap-2 px-2 py-1 text-xs font-semibold text-muted-foreground/80 uppercase tracking-wide">
              <Clock className="w-3 h-3" />
              Recent Files
            </div>
            {displayedFiles.map((file) => {
              const IconComponent = getFileIcon(file.type);
              const iconColor = getFileColor(file.type);
              const fileTypeLabel = getFileTypeLabel(file.type);
              
              return (
                <DropdownMenuItem
                  key={file.id}
                  className="flex items-center gap-3 p-3 cursor-pointer focus:bg-accent group rounded-xl transition-all duration-200 hover:scale-[1.02] hover:shadow-sm"
                  onClick={() => handleFileSelect(file)}
                >
                  {/* File Icon/Preview */}
                  <div className="flex-shrink-0 relative">
                    <div className="w-10 h-10 bg-muted rounded-xl border border-border flex flex-col items-center justify-center relative">
                      <IconComponent className={cn("w-5 h-5", iconColor)} />
                      {/* Тип файла */}
                      <div className="absolute -bottom-1 -right-1 bg-background border border-border rounded px-1 text-[10px] font-medium text-muted-foreground">
                        {fileTypeLabel}
                      </div>
                    </div>
                  </div>

                  {/* File Info */}
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between">
                      <p className="text-sm font-medium truncate pr-2">{file.name}</p>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="opacity-0 group-hover:opacity-100 transition-all duration-200 w-6 h-6 flex-shrink-0 hover:scale-110"
                        onClick={(e) => removeFromRecent(file.id, e)}
                      >
                        <X className="w-3 h-3" />
                      </Button>
                    </div>
                    <div className="flex items-center gap-2 text-xs text-muted-foreground">
                      <span>{formatFileSize(file.size)}</span>
                      <span>•</span>
                      <span>{formatDate(file.lastUsed)}</span>
                    </div>
                  </div>
                </DropdownMenuItem>
              );
            })}
          </div>
        )}
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

// Утильная функция для добавления файла в recent (F1.3 + F1.4)
export function addFileToRecent(file: File): boolean {
  try {
    // Валидация входного файла
    if (!file || !file.name || !file.type) {
      console.warn('Invalid file provided to addFileToRecent');
      return false;
    }

    // Исключаем рисунки из recent files (они основаны на blob URLs и не могут быть переиспользованы)
    if (file.name.startsWith('drawing-') && file.name.endsWith('.png')) {
      console.log('Skipping drawing file from recent files:', file.name);
      return true; // Возвращаем true чтобы не показывать ошибку
    }

    // Проверка размера файла (максимум 100MB для хранения метаданных)
    if (file.size > 100 * 1024 * 1024) {
      console.warn('File too large to add to recent:', file.name);
      return false;
    }

    const recentFile: RecentFile = {
      id: Date.now().toString(),
      name: file.name,
      type: file.type,
      size: file.size,
      lastUsed: new Date(),
      // preview and storageId will be filled later via addUploadedFileToRecent
    };

    const saved = localStorage.getItem(RECENT_FILES_KEY);
    let recentFiles: RecentFile[] = [];
    
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        // Валидация загруженных данных
        if (Array.isArray(parsed)) {
          recentFiles = parsed.filter(item => 
            item && 
            typeof item.id === 'string' && 
            typeof item.name === 'string' && 
            typeof item.type === 'string' &&
            typeof item.size === 'number'
          ).map(item => ({
            ...item,
            lastUsed: new Date(item.lastUsed) // Конвертируем строку обратно в Date
          }));
        }
      } catch (e) {
        console.error('Failed to parse recent files, clearing corrupt data:', e);
        recentFiles = [];
        // Очищаем поврежденные данные
        localStorage.removeItem(RECENT_FILES_KEY);
      }
    }

    // Удаляем дубликаты по имени и типу
    const filtered = recentFiles.filter(f => !(f.name === file.name && f.type === file.type));
    const updated = [recentFile, ...filtered].slice(0, MAX_RECENT_FILES);
    
    localStorage.setItem(RECENT_FILES_KEY, JSON.stringify(updated));
    return true;
    
  } catch (e) {
    console.error('Failed to add file to recent:', e);
    return false;
  }
}

// Хук для интеграции с AttachmentsStore
// УДАЛЕНО: автоматическое добавление файлов в recent при прикреплении
// Теперь файлы добавляются в recent ТОЛЬКО после успешной отправки сообщения
export function useRecentFilesIntegration() {
  // Пустая функция - автоматическое добавление отключено
  // Файлы будут добавляться в recent вручную после успешной отправки через addFileToRecent()
}

// Called after successful upload to Convex to enrich recent entry with storageId etc.
export function addUploadedFileMetaToRecent(meta: { storageId: string; previewId?: string; name: string; type: string; size: number; previewUrl?: string; }) {
  try {
    const saved = localStorage.getItem(RECENT_FILES_KEY);
    if (!saved) return;
    const parsed: RecentFile[] = JSON.parse(saved);
    const idx = parsed.findIndex(r => r.name === meta.name && r.type === meta.type && !r.storageId);
    const base: RecentFile = {
      id: Date.now().toString(),
      name: meta.name,
      type: meta.type,
      size: meta.size,
      lastUsed: new Date(),
      storageId: meta.storageId,
      previewId: meta.previewId,
      preview: meta.previewUrl,
    };
    if (idx !== -1) {
      parsed[idx] = { ...parsed[idx], ...base };
    } else {
      parsed.unshift(base);
    }
    localStorage.setItem(RECENT_FILES_KEY, JSON.stringify(parsed.slice(0, MAX_RECENT_FILES)));
  } catch (e) {
    console.error('Failed to add uploaded file meta to recent:', e);
  }
} 

--- FILE: ./frontend/components/ChatHistoryButton.tsx ---
"use client"

import { useState } from 'react';
import { Button } from './ui/button';
import { History } from 'lucide-react';
import { WithTooltip } from './WithTooltip';
import ChatHistoryDrawer from './ChatHistoryDrawer';
import { cn } from '@/lib/utils';

interface ChatHistoryButtonProps {
  className?: string;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
  size?: "default" | "sm" | "lg" | "icon";
}

export default function ChatHistoryButton({ 
  className, 
  variant = "outline", 
  size = "icon" 
}: ChatHistoryButtonProps) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <ChatHistoryDrawer isOpen={isOpen} setIsOpen={setIsOpen}>
      <WithTooltip label="History" side="bottom">
        <Button
          variant={variant}
          size={size}
          className={cn('bg-background/80 backdrop-blur-sm border-border/50', className)}
          aria-label="Open chat history"
          onClick={() => setIsOpen(true)}
        >
          <History className="h-5 w-5" />
        </Button>
      </WithTooltip>
    </ChatHistoryDrawer>
  );
} 

--- FILE: ./frontend/components/KeyPrompt.tsx ---
import { Button } from '@/frontend/components/ui/button';
import { Key } from 'lucide-react';
import Link from 'next/link';
import { useAPIKeyStore } from '@/frontend/stores/APIKeyStore';

export default function KeyPrompt() {
  const { hasRequiredKeys, keysLoading } = useAPIKeyStore();
  if (keysLoading || hasRequiredKeys()) return null;
  return (
    <div className="fixed bottom-6 left-1/2 z-50">
      <div className="flex items-center p-4 pr-5 border rounded-lg bg-background shadow-lg gap-4 max-w-md">
        <div className="bg-primary/10 p-2.5 rounded-full">
          <Key className="h-5 w-5 text-primary" />
        </div>

        <div>
          <p className="text-sm font-medium">API keys required</p>
          <p className="text-xs text-muted-foreground">
            Add keys to enable chat
          </p>
        </div>

        <Link href="/settings">
          <Button size="sm" variant="outline" className="ml-2 h-8 text-xs">
            Configure
          </Button>
        </Link>
      </div>
    </div>
  );
}


--- FILE: ./frontend/components/ImageModal.tsx ---
"use client";

import { X } from 'lucide-react';
import { useEffect, useState, useRef, useCallback } from 'react';

interface ImageModalProps {
  isOpen: boolean;
  onClose: () => void;
  imageUrl: string;
  fileName: string;
  fileType: string;
  fileSize?: number;
}

export default function ImageModal({
  isOpen,
  onClose,
  imageUrl,
  fileName,
  fileType,
  fileSize
}: ImageModalProps) {
  const [scale, setScale] = useState(1);
  const [translateX, setTranslateX] = useState(0);
  const [translateY, setTranslateY] = useState(0);
  const [isDragging, setIsDragging] = useState(false);
  const [startX, setStartX] = useState(0);
  const [startY, setStartY] = useState(0);
  const imageRef = useRef<HTMLImageElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  const resetZoom = useCallback(() => {
    setScale(1);
    setTranslateX(0);
    setTranslateY(0);
  }, []);

  // Закрытие по Escape
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
      // Блокируем скролл страницы
      document.body.style.overflow = 'hidden';
      resetZoom(); // Reset zoom when modal opens
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, onClose, resetZoom]);

  const handleWheel = useCallback((e: React.WheelEvent<HTMLDivElement>) => {
    e.preventDefault();
    const scaleAmount = 0.1;
    const newScale = e.deltaY < 0 ? scale + scaleAmount : scale - scaleAmount;
    
    // Prevent zooming out too much or too little
    setScale(Math.max(0.5, Math.min(newScale, 5))); 
  }, [scale]);

  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLDivElement>) => {
    if (scale > 1) { // Only allow dragging if zoomed in
      setIsDragging(true);
      setStartX(e.clientX - translateX);
      setStartY(e.clientY - translateY);
    }
  }, [scale, translateX, translateY]);

  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {
    if (!isDragging) return;
    setTranslateX(e.clientX - startX);
    setTranslateY(e.clientY - startY);
  }, [isDragging, startX, startY]);

  const handleMouseUp = useCallback(() => {
    setIsDragging(false);
  }, []);

  // Touch events for pinch-zoom and pan
  const lastTouch = useRef<number | null>(null);
  const lastDistance = useRef<number | null>(null);
  const lastCentroid = useRef<{ x: number; y: number } | null>(null);

  const handleTouchStart = useCallback((e: React.TouchEvent<HTMLDivElement>) => {
    if (e.touches.length === 2) {
      const touch1 = e.touches[0];
      const touch2 = e.touches[1];
      lastDistance.current = Math.hypot(touch2.pageX - touch1.pageX, touch2.pageY - touch1.pageY);
      lastCentroid.current = {
        x: (touch1.pageX + touch2.pageX) / 2,
        y: (touch1.pageY + touch2.pageY) / 2,
      };
    } else if (e.touches.length === 1 && scale > 1) {
      setIsDragging(true);
      setStartX(e.touches[0].clientX - translateX);
      setStartY(e.touches[0].clientY - translateY);
    }
  }, [scale, translateX, translateY]);

  const handleTouchMove = useCallback((e: React.TouchEvent<HTMLDivElement>) => {
    if (e.touches.length === 2) {
      e.preventDefault();
      const touch1 = e.touches[0];
      const touch2 = e.touches[1];
      const newDistance = Math.hypot(touch2.pageX - touch1.pageX, touch2.pageY - touch1.pageY);
      const newCentroid = {
        x: (touch1.pageX + touch2.pageX) / 2,
        y: (touch1.pageY + touch2.pageY) / 2,
      };

      if (lastDistance.current && lastCentroid.current) {
        // Pinch zoom
        const scaleFactor = newDistance / lastDistance.current;
        setScale((prevScale) => Math.max(0.5, Math.min(prevScale * scaleFactor, 5)));

        // Pan based on centroid movement
        const deltaX = newCentroid.x - lastCentroid.current.x;
        const deltaY = newCentroid.y - lastCentroid.current.y;
        setTranslateX((prev) => prev + deltaX);
        setTranslateY((prev) => prev + deltaY);
      }
      lastDistance.current = newDistance;
      lastCentroid.current = newCentroid;
    } else if (e.touches.length === 1 && isDragging) {
      e.preventDefault();
      setTranslateX(e.touches[0].clientX - startX);
      setTranslateY(e.touches[0].clientY - startY);
    }
  }, [scale, isDragging, startX, startY, translateX, translateY]);

  const handleTouchEnd = useCallback(() => {
    setIsDragging(false);
    lastDistance.current = null;
    lastCentroid.current = null;
  }, []);

  // Double click to reset zoom
  const handleDoubleClick = useCallback(() => {
    resetZoom();
  }, [resetZoom]);

  if (!isOpen) return null;

  const formatFileSize = (bytes?: number) => {
    if (!bytes) return 'Unknown size';
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
  };

  return (
    <div 
      className="fixed inset-0 z-50 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4"
      onClick={onClose}
    >
      <div 
        className="relative bg-background rounded-xl shadow-2xl max-w-4xl max-h-[90vh] w-full overflow-hidden"
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-border">
          <div className="flex-1 min-w-0">
            <h3 className="text-lg font-semibold truncate">{fileName}</h3>
            <div className="flex items-center gap-4 text-sm text-muted-foreground mt-1">
              <span>{fileType}</span>
              <span>{formatFileSize(fileSize)}</span>
            </div>
          </div>
          <button
            onClick={onClose}
            className="ml-4 p-2 hover:bg-accent rounded-lg transition-colors"
            aria-label="Close modal"
          >
            <X className="h-5 w-5" />
          </button>
        </div>

        {/* Image */}
        <div 
          ref={containerRef}
          className="flex items-center justify-center p-4 max-h-[calc(90vh-120px)] overflow-hidden relative cursor-grab"
          onWheel={handleWheel}
          onMouseDown={handleMouseDown}
          onMouseMove={handleMouseMove}
          onMouseUp={handleMouseUp}
          onMouseLeave={handleMouseUp} // Stop dragging if mouse leaves container
          onDoubleClick={handleDoubleClick}
          onTouchStart={handleTouchStart}
          onTouchMove={handleTouchMove}
          onTouchEnd={handleTouchEnd}
          style={{ cursor: isDragging ? 'grabbing' : (scale > 1 ? 'grab' : 'default') }}
        >
          <img
            ref={imageRef}
            src={imageUrl}
            alt={fileName}
            className="object-contain rounded-lg"
            loading="lazy"
            style={{
              transform: `scale(${scale}) translate(${translateX}px, ${translateY}px)`,
              transition: isDragging ? 'none' : 'transform 0.1s ease-out', // Smooth transition when not dragging
              transformOrigin: 'center center',
              maxWidth: '100%',
              maxHeight: '100%',
            }}
          />
        </div>
      </div>
    </div>
  );
} 

--- FILE: ./frontend/components/QuoteDisplay.tsx ---
import { memo } from 'react';
import { X } from 'lucide-react';
import { Button } from './ui/button';
import { cn } from '@/lib/utils';
import { Quote } from '@/frontend/stores/QuoteStore';

interface QuoteDisplayProps {
  quote: Quote;
  onRemove: () => void;
  className?: string;
}

function PureQuoteDisplay({ quote, onRemove, className }: QuoteDisplayProps) {
  const isLongQuote = quote.text.length > 150;
  const displayText = isLongQuote ? `${quote.text.substring(0, 150)}...` : quote.text;
  const lines = quote.text.split('\n');
  const isMultiLine = lines.length > 2;

  return (
    <div
      className={cn(
        'relative bg-accent/40 border border-accent-foreground/20 rounded-lg p-3 mb-3 transition-all duration-200',
        'before:content-["""] before:absolute before:left-1 before:top-2 before:text-3xl before:text-muted-foreground/60 before:font-serif before:leading-none',
        'after:content-["""] after:absolute after:right-1 after:bottom-2 after:text-3xl after:text-muted-foreground/60 after:font-serif after:leading-none',
        'hover:bg-accent/60 hover:border-accent-foreground/30',
        className
      )}
    >
      <div className="flex items-start justify-between gap-2">
        <div className={cn(
          'flex-1 text-sm text-foreground/80 pl-6 pr-6',
          isMultiLine && isLongQuote && 'max-h-24 overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-muted-foreground/30 scrollbar-thumb-rounded-full'
        )}>
          <div className="whitespace-pre-wrap leading-relaxed">
            {isLongQuote ? displayText : quote.text}
          </div>
        </div>
        
        <div className="flex flex-col items-center gap-0 shrink-0">
          <Button
            variant="ghost"
            size="icon"
            onClick={onRemove}
            className="h-6 w-6 shrink-0 hover:bg-destructive/20 hover:text-destructive transition-all duration-200 hover:scale-110"
            title="Remove quote"
          >
            <X className="w-3 h-3" />
          </Button>
          <span className="text-[11px] mt-1 text-muted-foreground select-none">
            Press <kbd className="px-1 py-0.5 bg-muted rounded text-[10px] font-mono">Esc</kbd>
          </span>
        </div>
      </div>
    </div>
  );
}

const QuoteDisplay = memo(PureQuoteDisplay);
QuoteDisplay.displayName = 'QuoteDisplay';

export default QuoteDisplay; 

--- FILE: ./frontend/components/ScrollToBottomButton.tsx ---
"use client";

import { Button } from '@/frontend/components/ui/button';
import { cn } from '@/lib/utils';
import { ChevronDown } from 'lucide-react';
import { useEffect, useState } from 'react';

export type ScrollToBottomButtonProps = {
  className?: string;
  threshold?: number;
} & React.ButtonHTMLAttributes<HTMLButtonElement>;

export default function ScrollToBottomButton({
  className,
  threshold = 100,
  ...props
}: ScrollToBottomButtonProps) {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.scrollY;
      const innerHeight = window.innerHeight;
      const scrollHeight = document.documentElement.scrollHeight;
      setIsVisible(scrollTop + innerHeight < scrollHeight - threshold);
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll();
    
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, [threshold]);

  const scrollToBottom = () => {
    window.scrollTo({
      top: document.documentElement.scrollHeight,
      behavior: 'smooth',
    });
  };

  return (
    <Button
      variant="outline"
      size="icon"
      className={cn(
        'z-50 h-10 w-10 rounded-full transition-all duration-150 ease-out',
        'backdrop-blur-md border border-foreground/20 shadow-lg',
        'flex items-center justify-center',
        'bg-white/70 hover:bg-white/80 border-gray-200/60',
        'dark:bg-background/90 dark:hover:bg-background',
        isVisible
          ? 'translate-y-0 scale-100 opacity-100'
          : 'pointer-events-none translate-y-2 scale-90 opacity-0',
        className
      )}
      onClick={scrollToBottom}
      {...props}
    >
      <ChevronDown className="h-4 w-4" />
    </Button>
  );
}


--- FILE: ./frontend/components/AddActionsDropdown.tsx ---
"use client";

import { useState, useRef } from 'react';
import { Plus, FileIcon, Clock, Brush } from 'lucide-react';
import { Button } from './ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from './ui/dropdown-menu';
import { useAttachmentsStore } from '../stores/AttachmentsStore';
import DrawingCanvas from './DrawingCanvas';
import RecentFilesDropdown from './RecentFilesDropdown';
import { toast } from 'sonner';

interface AddActionsDropdownProps {
  className?: string;
  messageCount?: number;
}

export default function AddActionsDropdown({ className, messageCount = 0 }: AddActionsDropdownProps) {
  const { add } = useAttachmentsStore();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isDrawingOpen, setIsDrawingOpen] = useState(false);

  const handleFileClick = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files ?? []);
    files.forEach(add);
    e.target.value = '';
  };

  const handleDrawingSave = (imageData: string) => {
    try {
      // Конвертируем data URL в File объект более надежным способом
      const byteString = atob(imageData.split(',')[1]);
      const mimeString = imageData.split(',')[0].split(':')[1].split(';')[0];
      const ab = new ArrayBuffer(byteString.length);
      const ia = new Uint8Array(ab);
      for (let i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
      }
      const blob = new Blob([ab], { type: mimeString });
      const file = new File([blob], `drawing-${Date.now()}.png`, { type: 'image/png' });
      add(file);
      toast.success('Drawing saved and attached!');
    } catch (error) {
      console.error('Failed to save drawing:', error);
      // Fallback to fetch method
      fetch(imageData)
        .then(res => res.blob())
        .then(blob => {
          const file = new File([blob], `drawing-${Date.now()}.png`, { type: 'image/png' });
          add(file);
          toast.success('Drawing saved and attached!');
        })
        .catch(err => {
          console.error('Fallback method also failed:', err);
          toast.error('Failed to save drawing');
        });
    }
  };

  return (
    <>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            size="icon"
            className={`flex items-center justify-center w-8 h-8 rounded-lg border border-border/30 hover:border-border/60 bg-accent hover:bg-accent/80 flex-shrink-0 transition-colors ${className || ''}`}
            aria-label="Add content"
          >
            <Plus className="w-4 h-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="start" className="w-48 p-1">
          <DropdownMenuItem onClick={handleFileClick} className="flex items-center gap-2">
            <FileIcon className="w-4 h-4" />
            Add file
          </DropdownMenuItem>
          
          <div className="relative">
            <RecentFilesDropdown messageCount={messageCount}>
              <DropdownMenuItem className="flex items-center gap-2 justify-between cursor-pointer">
                <div className="flex items-center gap-2">
                  <Clock className="w-4 h-4" />
                  Recent
                </div>
              </DropdownMenuItem>
            </RecentFilesDropdown>
          </div>
          
          <DropdownMenuItem 
            onClick={() => setIsDrawingOpen(true)} 
            className="flex items-center gap-2"
          >
            <Brush className="w-4 h-4" />
            Draw
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      <input
        ref={fileInputRef}
        type="file"
        hidden
        multiple
        accept="image/*,application/pdf,text/*"
        onChange={handleFileChange}
      />

      <DrawingCanvas
        isOpen={isDrawingOpen}
        onClose={() => setIsDrawingOpen(false)}
        onSave={handleDrawingSave}
      />
    </>
  );
} 

--- FILE: ./frontend/components/AttachmentsBar.tsx ---
import { useRef } from 'react';
import { useAttachmentsStore } from '../stores/AttachmentsStore';
import AddActionsDropdown from './AddActionsDropdown';
import FilePreview from './FilePreview';

interface AttachmentsBarProps {
  mode?: 'compact' | 'full';
  messageCount?: number;
}

export default function AttachmentsBar({ mode = 'full', messageCount = 0 }: AttachmentsBarProps) {
  const { attachments, add, remove } = useAttachmentsStore();
  const inputRef = useRef<HTMLInputElement>(null);

  // В компактном режиме показываем новое выпадающее меню
  if (mode === 'compact') {
    return (
      <div className="flex items-center">
        <AddActionsDropdown messageCount={messageCount} />
      </div>
    );
  }

  // В полном режиме показываем все файлы
  return (
    <div className="flex items-center gap-2 w-full overflow-x-auto pb-2">
      {attachments.map((f) => (
        <FilePreview
          key={f.id}
          file={f}
          onRemove={remove}
          showPreview={true}
        />
      ))}
      <input
        ref={inputRef}
        type="file"
        hidden
        multiple
        accept="image/*,application/pdf,text/*"
        onChange={(e) => {
          const files = Array.from(e.target.files ?? []);
          files.forEach(add);
          e.target.value = '';
        }}
      />
    </div>
  );
}


--- FILE: ./frontend/components/DialogVersionNavigation.tsx ---
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { Button } from './ui/button';
import { useMutation, useQuery } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { isConvexId } from '@/lib/ids';
import type { Id } from '@/convex/_generated/dataModel';
import { cn } from '@/lib/utils';
import { useRouter } from 'next/navigation';

interface DialogVersionNavigationProps {
  threadId: string;
  className?: string;
  refreshAfterSwitch?: boolean;
}

export default function DialogVersionNavigation({ threadId, className, refreshAfterSwitch = true }: DialogVersionNavigationProps) {
  const router = useRouter();
  const versions = useQuery(
    api.messages.getDialogVersions,
    isConvexId(threadId) ? { threadId: threadId as Id<'threads'> } : 'skip'
  );
  
  const messages = useQuery(
    api.messages.get,
    isConvexId(threadId) ? { threadId: threadId as Id<'threads'> } : 'skip'
  );
  
  const switchVersion = useMutation(api.messages.switchDialogVersion);

  if (!versions || versions.length <= 1) {
    return null;
  }

  // Find current active version by checking which assistant messages are active
  let currentVersion = 1;
  if (messages) {
    const activeAssistant = messages.find(m => m.role === 'assistant' && m.isActive);
    if (activeAssistant) {
      currentVersion = activeAssistant.dialogVersion ?? 1;
    }
  }

  const currentIndex = versions.findIndex(v => v.version === currentVersion);
  const canGoPrev = currentIndex > 0;
  const canGoNext = currentIndex < versions.length - 1;

  const handlePrevious = async () => {
    if (!canGoPrev || !isConvexId(threadId)) return;
    const prevVersion = versions[currentIndex - 1].version;
    await switchVersion({
      threadId: threadId as Id<'threads'>,
      dialogVersion: prevVersion,
    });
    if (refreshAfterSwitch) router.refresh();
  };

  const handleNext = async () => {
    if (!canGoNext || !isConvexId(threadId)) return;
    const nextVersion = versions[currentIndex + 1].version;
    await switchVersion({
      threadId: threadId as Id<'threads'>,
      dialogVersion: nextVersion,
    });
    if (refreshAfterSwitch) router.refresh();
  };

  return (
    <div className={cn('flex items-center gap-1', className)}>
      <Button
        variant="ghost"
        size="icon"
        onClick={handlePrevious}
        disabled={!canGoPrev}
        className="h-6 w-6 p-0"
      >
        <ChevronLeft className="h-3 w-3" />
      </Button>
      
      <span className="text-xs text-muted-foreground font-mono min-w-[2.5rem] text-center">
        {currentIndex + 1}/{versions.length}
      </span>
      
      <Button
        variant="ghost"
        size="icon"
        onClick={handleNext}
        disabled={!canGoNext}
        className="h-6 w-6 p-0"
      >
        <ChevronRight className="h-3 w-3" />
      </Button>
    </div>
  );
} 

--- FILE: ./frontend/components/MemoizedMarkdown.tsx ---
// frontend/components/MemoizedMarkdown.tsx
import { memo, useMemo, useState, createContext, useContext } from 'react';
import ReactMarkdown, { type Components } from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { marked } from 'marked';
import ShikiHighlighter from 'react-shiki';
import type { ComponentProps } from 'react';
import type { ExtraProps } from 'react-markdown';
import { Check, Copy, Download } from 'lucide-react';
import { useCallback } from 'react';
import remarkMath from 'remark-math';
import rehypeKatex from 'rehype-katex';

type CodeComponentProps = ComponentProps<'code'> & ExtraProps;
type MarkdownSize = 'default' | 'small';

// Context to pass size down to components
const MarkdownSizeContext = createContext<MarkdownSize>('default');

const components: Components = {
  code: CodeBlock as Components['code'],
  pre: ({ children }) => <>{children}</>,
};

function CodeBlock({ children, className, ...props }: CodeComponentProps) {
  const size = useContext(MarkdownSizeContext);
  const match = /language-(\w+)/.exec(className || '');

  if (match) {
    const lang = match[1];
    const codeString = String(children);
    
    return (
      <div className="my-4 rounded-lg border border-border/40 bg-card/50 dark:bg-card/30 shadow-sm overflow-hidden">
        <Codebar lang={lang} codeString={codeString} />
        <ShikiHighlighter
          language={lang}
          theme={'material-theme-darker'}
          className="text-sm font-mono overflow-x-auto"
          showLanguage={false}
          style={{
            background: 'var(--color-background)',
            backgroundColor: 'var(--color-background)',
            padding: '1rem',
          }}
        >
          {codeString}
        </ShikiHighlighter>
      </div>
    );
  }

  const inlineCodeClasses =
    size === 'small'
      ? 'mx-0.5 overflow-auto rounded-md px-1 py-0.5 bg-secondary px-1.5 py-1 font-mono text-xs'
      : 'mx-0.5 overflow-auto rounded-md px-2 py-1 bg-secondary px-1.5 py-1 font-mono text-sm';

  return (
    <code className={inlineCodeClasses} {...props}>
      {children}
    </code>
  );
}

function Codebar({ lang, codeString }: { lang: string; codeString: string }) {
  const [copied, setCopied] = useState(false);

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(codeString);
      setCopied(true);
      setTimeout(() => {
        setCopied(false);
      }, 2000);
    } catch (error) {
      console.error('Failed to copy code to clipboard:', error);
    }
  };

  const handleDownload = useCallback(() => {
    let fileExtension = 'txt';
    switch (lang.toLowerCase()) {
      case 'javascript': case 'js': fileExtension = 'js'; break;
      case 'typescript': case 'ts': fileExtension = 'ts'; break;
      case 'python': case 'py': fileExtension = 'py'; break;
      case 'java': fileExtension = 'java'; break;
      case 'cpp': case 'c++': fileExtension = 'cpp'; break;
      case 'c': fileExtension = 'c'; break;
      case 'csharp': case 'c#': fileExtension = 'cs'; break;
      case 'html': fileExtension = 'html'; break;
      case 'css': fileExtension = 'css'; break;
      case 'scss': case 'sass': fileExtension = 'scss'; break;
      case 'json': fileExtension = 'json'; break;
      case 'xml': fileExtension = 'xml'; break;
      case 'yaml': case 'yml': fileExtension = 'yml'; break;
      case 'sql': fileExtension = 'sql'; break;
      case 'shell': case 'bash': case 'sh': fileExtension = 'sh'; break;
      case 'php': fileExtension = 'php'; break;
      case 'go': fileExtension = 'go'; break;
      case 'rust': case 'rs': fileExtension = 'rs'; break;
      case 'kotlin': case 'kt': fileExtension = 'kt'; break;
      case 'swift': fileExtension = 'swift'; break;
      case 'r': fileExtension = 'r'; break;
      case 'matlab': fileExtension = 'm'; break;
      case 'plaintext': case 'text': default: fileExtension = 'txt'; break;
    }
    const blob = new Blob([codeString], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `code_snippet.${fileExtension}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, [codeString, lang]);

  return (
    <div className="sticky top-0 z-10 flex items-center justify-between px-4 py-3 bg-muted/80 dark:bg-muted/60 border-b border-border backdrop-blur-sm rounded-t-lg">
      <span className="text-xs font-semibold uppercase text-muted-foreground">{lang}</span>
      <div className="flex items-center gap-2">
        <button
          onClick={handleDownload}
          className="p-1.5 rounded-md text-muted-foreground hover:bg-accent hover:text-accent-foreground transition-colors"
          aria-label="Скачать фрагмент кода"
        >
          <Download className="w-4 h-4" />
        </button>
        <button
          onClick={copyToClipboard}
          className="p-1.5 rounded-md text-muted-foreground hover:bg-accent hover:text-accent-foreground transition-colors"
          aria-label="Копировать код"
        >
          {copied ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
        </button>
      </div>
    </div>
  );
}

function parseMarkdownIntoBlocks(markdown: string): string[] {
  const tokens = marked.lexer(markdown);
  return tokens.map((token) => token.raw);
}

function PureMarkdownRendererBlock({ content }: { content: string }) {
  return (
    <ReactMarkdown
      remarkPlugins={[remarkGfm, remarkMath]}
      rehypePlugins={[rehypeKatex]}
      components={components}
    >
      {content}
    </ReactMarkdown>
  );
}

const MarkdownRendererBlock = memo(
  PureMarkdownRendererBlock,
  (prevProps, nextProps) => {
    if (prevProps.content !== nextProps.content) return false;
    return true;
  }
);

MarkdownRendererBlock.displayName = 'MarkdownRendererBlock';

interface MemoizedMarkdownProps {
  content: string;
  streaming?: boolean;
}

const MemoizedMarkdown = memo(({ content, streaming = false }: MemoizedMarkdownProps) => {
  // Удаляем теги reasoning из основного контента, так как они выводятся отдельно
  const sanitizedContent = content
    // Удаляем блок <think> … </think> или до конца строки, если закрывающего тега ещё нет
    .replace(/<think>[\s\S]*?(?:<\/think>|$)/gi, '')
    // Удаляем токены вида g:"..."
    .replace(/\bg:"[^"]+"/g, '')
    .trim();

  const blocks = useMemo(() => parseMarkdownIntoBlocks(sanitizedContent), [sanitizedContent]);

  const proseClasses = 'prose prose-base dark:prose-invert max-w-none prose-code:before:content-none prose-code:after:content-none';

  return (
    <MarkdownSizeContext.Provider value="default">
      <div className={proseClasses}>
        {blocks.map((block, index) => (
          <MarkdownRendererBlock
            content={block}
            key={`markdown-block-${index}`}
          />
        ))}
      </div>
    </MarkdownSizeContext.Provider>
  );
});

MemoizedMarkdown.displayName = 'MemoizedMarkdown';
export default MemoizedMarkdown;

--- FILE: ./frontend/components/NewChatButton.tsx ---
"use client"

import { Button } from './ui/button';
import { Plus } from 'lucide-react';
import { WithTooltip } from './WithTooltip';
import { cn } from '@/lib/utils';
import { useRouter } from 'next/navigation';

interface NewChatButtonProps {
  className?: string;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
  size?: "default" | "sm" | "lg" | "icon";
}

export default function NewChatButton({
  className,
  variant = "outline",
  size = "icon"
}: NewChatButtonProps) {
  const router = useRouter();

  const handleClick = () => {
    router.push('/chat');
  };

  return (
    <WithTooltip label="New Chat" side="bottom">
      <Button
        variant={variant}
        size={size}
        className={cn('bg-background/80 backdrop-blur-sm border-border/50', className)}
        aria-label="Create new chat"
        onClick={handleClick}
      >
        <Plus className="h-5 w-5" />
      </Button>
    </WithTooltip>
  );
}


--- FILE: ./frontend/components/AuthListener.tsx ---
'use client';
import { useAuthStore } from '@/frontend/stores/AuthStore';
import { ReactNode, useEffect, useState } from 'react';

export default function AuthListener({ children }: { children: ReactNode }) {
  const init = useAuthStore((s) => s.init);
  const loading = useAuthStore((s) => s.loading);
  const [ready, setReady] = useState(false);

  useEffect(() => {
    const unsub = init();
    setReady(true);
    return unsub;
  }, [init]);

  if (!ready || loading) return null;
  return <>{children}</>;
}


--- FILE: ./frontend/components/ChatInputSkeleton.tsx ---
"use client";
import { Skeleton } from "./ui/skeleton";

export default function ChatInputSkeleton() {
  return (
    <div className="fixed bottom-0 w-full max-w-3xl pb-safe">
      <div className="bg-secondary p-4 rounded-t-[20px] flex flex-col gap-2">
        <Skeleton className="h-4 w-3/4" />
        <Skeleton className="h-10 w-full" />
      </div>
    </div>
  );
}


--- FILE: ./frontend/components/PageSkeleton.tsx ---
"use client";
import { Skeleton } from "./ui/skeleton";

export default function PageSkeleton() {
  return (
    <div className="flex flex-col w-full max-w-3xl mx-auto pt-10 pb-44 space-y-12">
      {Array.from({ length: 4 }).map((_, i) => (
        <Skeleton key={i} className="h-24" />
      ))}
    </div>
  );
}


--- FILE: ./frontend/components/AppShellSkeleton.tsx ---
import React from 'react';

export default function AppShellSkeleton() {
  return <div className="w-full h-full invisible" />;
}


--- FILE: ./frontend/components/SettingsDrawer.tsx ---
"use client"

import { useState, useEffect, useCallback, memo, useRef, useMemo } from 'react';
// use-debounce provides a debounced callback hook to prevent rapid state changes
import { useDebouncedCallback } from 'use-debounce';
import { Drawer, DrawerContent, DrawerTrigger, DrawerHeader, DrawerTitle } from '@/components/ui/drawer';
import { Dialog, DialogContent, DialogTrigger, DialogHeader, DialogTitle, DialogDescription } from '@/frontend/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { AnimatedTabs } from '@/frontend/components/ui/animated-tabs';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { Label } from '@/components/ui/label';
import {
  Settings,
  Palette,
  Key,
  Type,
  Monitor,
  Sun,
  Moon,
  User,
  SlidersHorizontal,
  ChevronDown,
  ChevronUp,
  Eye,
  EyeOff,
  Copy,
  Check,
  ExternalLink,
  Bot
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { useSettingsStore, GENERAL_FONTS, CODE_FONTS, THEMES, GeneralFont, CodeFont, Theme } from '@/frontend/stores/SettingsStore';
import { useAPIKeyStore, Provider } from '@/frontend/stores/APIKeyStore';
import { useAuthStore } from '@/frontend/stores/AuthStore';
import { useModelVisibilityStore } from '@/frontend/stores/ModelVisibilityStore';
import { useModelVisibilitySync } from '@/frontend/hooks/useModelVisibilitySync';
import { ProviderIcon } from '@/frontend/components/ui/provider-icons';
import { getModelsByProvider, getModelConfig, AIModel } from '@/lib/models';
import { useTheme } from 'next-themes';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { FieldError, useForm, UseFormRegister } from 'react-hook-form';
import { toast } from 'sonner';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';
import { Switch } from '@/frontend/components/ui/switch';
import { CustomSwitch } from '@/frontend/components/ui/custom-switch';

interface SettingsDrawerProps {
  children: React.ReactNode;
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
}

const formSchema = z.object({
  google: z.string().trim().min(1, {
    message: 'Google API key is required for Title Generation',
  }),
  openrouter: z.string().trim().optional(),
  openai: z.string().trim().optional(),
  groq: z.string().trim().optional(),
});

type FormValues = z.infer<typeof formSchema>;

interface ContentComponentProps {
  className?: string;
  activeTab: string;
  setActiveTab: (tab: string) => void;
  isMobile: boolean;
  tabs: { value: string; label: string; icon: string }[];
  getTabIcon: (iconName: string) => React.ReactNode;
  scrollRef: React.RefObject<HTMLDivElement | null>;
}

const ContentComponent = memo(function ContentComponent({
  className,
  activeTab,
  setActiveTab,
  isMobile,
  tabs,
  getTabIcon,
  scrollRef,
}: ContentComponentProps) {
  return (
    <div className={cn('flex gap-4 flex-1 min-h-0', className)}>
      {isMobile ? (
        <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col min-h-0">
          <TabsList className="grid w-full flex-shrink-0 grid-cols-4">
            <TabsTrigger value="customization" className="flex items-center gap-1 text-xs">
              <Palette className="h-3 w-3" />
              <span className="hidden xs:inline">Style</span>
            </TabsTrigger>
            <TabsTrigger value="models" className="flex items-center gap-1 text-xs">
              <Bot className="h-3 w-3" />
              <span className="hidden xs:inline">Models</span>
            </TabsTrigger>
            <TabsTrigger value="profile" className="flex items-center gap-1 text-xs">
              <User className="h-3 w-3" />
              <span className="hidden xs:inline">User</span>
            </TabsTrigger>
            <TabsTrigger value="api-keys" className="flex items-center gap-1 text-xs">
              <Key className="h-3 w-3" />
              <span className="hidden xs:inline">Keys</span>
            </TabsTrigger>
          </TabsList>

          <div className="flex-1 mt-4 min-h-0 overflow-y-auto scrollbar-none enhanced-scroll mobile-keyboard-fix">
            <div className="p-4">
              {activeTab === 'customization' && <CustomizationTab />}
              {activeTab === 'models' && <ModelsTab />}
              {activeTab === 'profile' && <ProfileTab />}
              {activeTab === 'api-keys' && <APIKeysTab />}
            </div>
          </div>
        </Tabs>
      ) : (
        <div className="flex gap-4 flex-1 min-h-0">
          <div className="flex flex-col w-48 flex-shrink-0">
            <AnimatedTabs
              tabs={tabs.map((tab) => ({ ...tab, icon: getTabIcon(tab.icon) }))}
              value={activeTab}
              onValueChange={setActiveTab}
              className="w-full"
            />
          </div>

          <div ref={scrollRef} className="flex-1 min-h-0 overflow-y-auto scrollbar-none enhanced-scroll pl-4">
            <div className="scroll-auto" style={{ scrollBehavior: 'auto', overscrollBehavior: 'contain' }}>
              {activeTab === 'customization' && <CustomizationTab />}
              {activeTab === 'models' && <ModelsTab />}
              {activeTab === 'profile' && <ProfileTab />}
              {activeTab === 'api-keys' && <APIKeysTab />}
            </div>
          </div>
        </div>
      )}
    </div>
  );
});

ContentComponent.displayName = 'ContentComponent';

const SettingsDrawerComponent = ({ children, isOpen, setIsOpen }: SettingsDrawerProps) => {
  const { isMobile, mounted } = useIsMobile(600);
  const [activeTab, setActiveTab] = useState("customization");
  const scrollRef = useRef<HTMLDivElement>(null);

  const handleOpenChange = useCallback((open: boolean) => {
    setIsOpen(open);
    if (!open) {
      setActiveTab('customization');
    }
  }, [setIsOpen, setActiveTab]);

  // Prevent body scroll when drawer is open
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
    return () => {
      document.body.style.overflow = '';
    };
  }, [isOpen]);

  // Мемоизируем tabs чтобы они не пересоздавались при каждом рендере
  const tabs = useMemo(() => [
    {
      value: "customization",
      label: "Customization",
      icon: "palette"
    },
    {
      value: "models",
      label: "Models",
      icon: "bot"
    },
    {
      value: "profile", 
      label: "Profile",
      icon: "user"
    },
    {
      value: "api-keys",
      label: "API Keys", 
      icon: "key"
    }
  ], []);

  // Функция для получения иконки по строковому идентификатору
  const getTabIcon = useCallback((iconName: string) => {
    switch (iconName) {
      case 'palette':
        return <Palette className="h-4 w-4" />;
      case 'bot':
        return <Bot className="h-4 w-4" />;
      case 'user':
        return <User className="h-4 w-4" />;
      case 'key':
        return <Key className="h-4 w-4" />;
      default:
        return null;
    }
  }, []);


  if (!mounted) {
    return null; // Don't render anything until mounted
  }

  if (isMobile) {
    return (
      <Drawer open={isOpen} onOpenChange={handleOpenChange}>
        <DrawerTrigger asChild>
          {children}
        </DrawerTrigger>
        <DrawerContent className="max-h-[calc(100dvh-10px)] flex flex-col w-full p-0">
          {/* Pull handle */}
          <div className="flex justify-center pt-2 pb-1 flex-shrink-0">
            <div className="w-12 h-1 bg-muted-foreground/30 rounded-full" />
          </div>
          
          {/* Header with backdrop blur */}
          <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-md border-b border-border/50 flex-shrink-0">
            <DrawerHeader className="pb-2">
              <DrawerTitle className="flex items-center gap-2 text-lg">
                <Settings className="h-5 w-5" />
                Settings
              </DrawerTitle>
            </DrawerHeader>
          </div>
          
          {/* Content area with proper scrolling */}
          <div className="flex-1 min-h-0 px-4 pb-safe overflow-y-auto scrollbar-none enhanced-scroll">
            <ContentComponent
              activeTab={activeTab}
              setActiveTab={setActiveTab}
              isMobile={isMobile}
              tabs={tabs}
              getTabIcon={getTabIcon}
              scrollRef={scrollRef}
            />
          </div>
        </DrawerContent>
      </Drawer>
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>
        {children}
      </DialogTrigger>
      <DialogContent className="w-[55vw] sm:max-w-none max-w-[585px] h-[85vh] flex flex-col">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            Settings
          </DialogTitle>
          <DialogDescription className="sr-only">
            Configure your application settings, profile, and API keys
          </DialogDescription>
        </DialogHeader>
        <ContentComponent
          activeTab={activeTab}
          setActiveTab={setActiveTab}
          isMobile={isMobile}
          tabs={tabs}
          getTabIcon={getTabIcon}
          scrollRef={scrollRef}
        />
      </DialogContent>
    </Dialog>
  );
};

const CustomizationTab = memo(() => {
  const { settings, setSettings } = useSettingsStore();
  const { setTheme } = useTheme();
  const [featuresExpanded, setFeaturesExpanded] = useState(false);

  // Мемоизируем обработчики чтобы предотвратить ненужные перерендеры
  const handleFontChange = useCallback((type: 'generalFont' | 'codeFont', value: GeneralFont | CodeFont) => {
    setSettings({ [type]: value });
  }, [setSettings]);

  const handleThemeChange = useCallback((theme: Theme) => {
    setSettings({ theme });
    setTheme(theme);
  }, [setSettings, setTheme]);

  const handleSwitchChange = useCallback((setting: string, value: boolean) => {
    setSettings({ [setting]: value });
  }, [setSettings]);

  const toggleFeaturesExpanded = useCallback(() => {
    setFeaturesExpanded(prev => !prev);
  }, []);

  // Мемоизируем FontPreview чтобы он не пересоздавался
  const FontPreview = useCallback(({ fontType, font }: { fontType: 'general' | 'code', font: string }) => {
    const getFontFamily = () => {
      if (fontType === 'general') {
        return font === 'Proxima Vara' ? 'Proxima Vara, sans-serif' : 'system-ui, sans-serif';
      } else {
        return font === 'Berkeley Mono' ? 'Berkeley Mono, monospace' : 'ui-monospace, monospace';
      }
    };

    const sampleText = fontType === 'general' 
      ? 'The quick brown fox jumps over the lazy dog'
      : 'function hello() {\n  console.log("Hello, World!");\n}';

    return (
      <div 
        className="p-3 bg-muted rounded-md border text-sm"
        style={{ fontFamily: getFontFamily() }}
      >
        {fontType === 'code' ? (
          <pre className="whitespace-pre-wrap">
            <code className="text-blue-600 dark:text-blue-400">function</code>{' '}
            <code className="text-purple-600 dark:text-purple-400">hello</code>
            <code className="text-gray-600 dark:text-gray-400">()</code>{' '}
            <code className="text-gray-600 dark:text-gray-400">{'{'}</code>
            {'\n  '}
            <code className="text-blue-600 dark:text-blue-400">console</code>
            <code className="text-gray-600 dark:text-gray-400">.</code>
            <code className="text-purple-600 dark:text-purple-400">log</code>
            <code className="text-gray-600 dark:text-gray-400">(</code>
            <code className="text-green-600 dark:text-green-400">"Hello, World!"</code>
            <code className="text-gray-600 dark:text-gray-400">);</code>
            {'\n'}
            <code className="text-gray-600 dark:text-gray-400">{'}'}</code>
          </pre>
        ) : (
          sampleText
        )}
      </div>
    );
  }, []);

  return (
    <div className="space-y-6 pb-4">
      {/* General Font Section */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <Type className="h-4 w-4" />
            General Font
          </CardTitle>
          <CardDescription className="text-sm">
            Choose the font for the general interface
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2 flex-wrap">
            {GENERAL_FONTS.map((font) => (
              <Button
                key={font}
                size="sm"
                variant={settings.generalFont === font ? "default" : "outline"}
                onClick={() => handleFontChange('generalFont', font)}
              >
                {font}
              </Button>
            ))}
          </div>
          <FontPreview fontType="general" font={settings.generalFont} />
        </CardContent>
      </Card>

      {/* Code Font Section */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <Monitor className="h-4 w-4" />
            Code Font
          </CardTitle>
          <CardDescription className="text-sm">
            Choose the font for code blocks and programming text
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2 flex-wrap">
            {CODE_FONTS.map((font) => (
              <Button
                key={font}
                size="sm"
                variant={settings.codeFont === font ? "default" : "outline"}
                onClick={() => handleFontChange('codeFont', font)}
              >
                {font}
              </Button>
            ))}
          </div>
          <FontPreview fontType="code" font={settings.codeFont} />
        </CardContent>
      </Card>

      {/* Theme Section */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <Palette className="h-4 w-4" />
            Theme
          </CardTitle>
          <CardDescription className="text-sm">
            Choose between light and dark theme
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex gap-2">
            <Button
              size="sm"
              variant={settings.theme === 'light' ? "default" : "outline"}
              onClick={() => handleThemeChange('light')}
              className="flex items-center gap-2"
            >
              <Sun className="h-4 w-4" />
              Light
            </Button>
            <Button
              size="sm"
              variant={settings.theme === 'dark' ? "default" : "outline"}
              onClick={() => handleThemeChange('dark')}
              className="flex items-center gap-2"
            >
              <Moon className="h-4 w-4" />
              Dark
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Additional Features */}
      <Card>
        <CardHeader 
          className="cursor-pointer" 
          onClick={toggleFeaturesExpanded}
        >
          <CardTitle className="flex items-center justify-between text-base">
            <div className="flex items-center gap-2">
              <SlidersHorizontal className="h-4 w-4" />
              Features
            </div>
            {featuresExpanded ? (
              <ChevronDown className="h-4 w-4" />
            ) : (
              <ChevronUp className="h-4 w-4" />
            )}
          </CardTitle>
          <CardDescription className="text-sm">
            Enable or disable experimental options
          </CardDescription>
        </CardHeader>
        {featuresExpanded && (
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <Label htmlFor="navbars" className="text-sm">Show navigation bars</Label>
              <Switch
                id="navbars"
                checked={settings.showNavBars}
                onCheckedChange={(v) => handleSwitchChange('showNavBars', v)}
              />
            </div>

            <div className="flex items-center justify-between">
              <Label htmlFor="chat-preview" className="text-sm">Show chat preview</Label>
              <Switch
                id="chat-preview"
                checked={settings.showChatPreview}
                onCheckedChange={(v) => handleSwitchChange('showChatPreview', v)}
              />
            </div>

            <div className="flex items-center justify-between">
              <Label htmlFor="reg-history" className="text-sm">Save regeneration history</Label>
              <Switch
                id="reg-history"
                checked={settings.saveRegenerationHistory}
                onCheckedChange={(v) => handleSwitchChange('saveRegenerationHistory', v)}
              />
            </div>
          </CardContent>
        )}
      </Card>
    </div>
  );
});

CustomizationTab.displayName = 'CustomizationTab';

const ProfileTab = memo(() => {
  const { user, login, logout, blurPersonalData, toggleBlur, loading } = useAuthStore();

  const handleLogout = useCallback(async () => {
    await logout();
    toast.success("You have been signed out.");
  }, [logout]);

  const handleLogin = useCallback(async () => {
    await login();
  }, [login]);

  return (
    <div className="space-y-6 pb-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <User className="h-4 w-4" />
            Profile
          </CardTitle>
          <CardDescription className="text-sm">
            Manage your profile and account settings.
          </CardDescription>
        </CardHeader>

        <CardContent className="space-y-4">
          {loading ? (
             <p className="text-sm text-muted-foreground text-center">Loading profile...</p>
          ) : user ? (
            <>
              <div className="flex items-center gap-4">
                {user.photoURL && (
                   <img
                      src={user.photoURL}
                      alt="User Avatar"
                      width={64}
                      height={64}
                      className={cn(
                        "size-16 rounded-full object-cover transition-all",
                        blurPersonalData && "blur-md"
                      )}
                   />
                )}
                <div className="flex-1 space-y-1">
                  <p className={cn("text-sm font-medium transition-all", blurPersonalData && "blur-sm")}>
                    {user.displayName || 'No Name'}
                  </p>
                  <p className={cn("text-xs text-muted-foreground transition-all", blurPersonalData && "blur-sm")}>
                    {user.email || 'No Email'}
                  </p>
                </div>
              </div>

              <Button size="sm" variant="outline" className="w-full" onClick={toggleBlur}>
                {blurPersonalData ? 'Show Personal Data' : 'Hide Personal Data'}
              </Button>
              <Button size="sm" variant="destructive" className="w-full" onClick={handleLogout}>
                Sign Out
              </Button>
            </>
          ) : (
            <Button
              size="sm"
              variant="outline"
              className="w-full"
              onClick={handleLogin}
              disabled={loading}
            >
              Sign In with Google
            </Button>
          )}
        </CardContent>
      </Card>
    </div>
  );
});

ProfileTab.displayName = 'ProfileTab';

const APIKeysTab = memo(() => {
  const { keys, setKeys, keysLoading } = useAPIKeyStore();

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: keys,
  });

  const { register, handleSubmit, formState: { errors, isDirty } } = form;

  // Сбрасываем форму только при первой загрузке ключей, предотвращаем циклические обновления
  const isInitializedRef = useRef(false);
  useEffect(() => {
    if (!keysLoading && !isInitializedRef.current) {
      form.reset(keys);
      isInitializedRef.current = true;
    }
  }, [keysLoading, keys, form]);

  const onSubmit = useCallback(
    (values: FormValues) => {
      setKeys(values);
      toast.success('API keys saved successfully');
    },
    [setKeys]
  );

  return (
    <div className="space-y-6 pb-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <Key className="h-4 w-4" />
            API Keys
          </CardTitle>
          <CardDescription className="text-sm">
            API keys are securely stored and encrypted in the cloud
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            <ApiKeyField
              id="google"
              label="Google API Key"
              models={['Gemini 2.5 Flash', 'Gemini 2.5 Pro']}
              linkUrl="https://aistudio.google.com/apikey"
              placeholder="AIza..."
              register={register}
              error={errors.google}
              required
            />

            <ApiKeyField
              id="openrouter"
              label="OpenRouter API Key"
              models={['DeepSeek R1 0538', 'DeepSeek-V3']}
              linkUrl="https://openrouter.ai/settings/keys"
              placeholder="sk-or-..."
              register={register}
              error={errors.openrouter}
            />

            <ApiKeyField
              id="openai"
              label="OpenAI API Key"
              models={['GPT-4o', 'GPT-4.1-mini']}
              linkUrl="https://platform.openai.com/settings/organization/api-keys"
              placeholder="sk-..."
              register={register}
              error={errors.openai}
            />

            <ApiKeyField
              id="groq"
              label="Groq API Key"
              models={['Meta Llama 4 Scout 17B', 'Meta Llama 4 Maverick 17B', 'DeepSeek R1 Distill Llama 70B', 'Qwen QwQ 32B', 'Qwen 3 32B']}
              linkUrl="https://console.groq.com/keys"
              placeholder="gsk_..."
              register={register}
              error={errors.groq}
            />

            <Button type="submit" className="w-full" disabled={!isDirty || keysLoading} size="sm">
              Save API Keys
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
});

APIKeysTab.displayName = 'APIKeysTab';

interface ApiKeyFieldProps {
  id: string;
  label: string;
  linkUrl: string;
  models: string[];
  placeholder: string;
  error?: FieldError | undefined;
  required?: boolean;
  register: UseFormRegister<FormValues>;
}

const ApiKeyField = ({
  id,
  label,
  linkUrl,
  placeholder,
  models,
  error,
  required,
  register,
}: ApiKeyFieldProps) => {
  const [showPassword, setShowPassword] = useState(false);
  const [copied, setCopied] = useState(false);
  const [inputValue, setInputValue] = useState('');
  
  // Получаем значение из формы при инициализации
  const { keys } = useAPIKeyStore();
  
  useEffect(() => {
    const currentValue = keys[id as keyof typeof keys] || '';
    setInputValue(currentValue);
  }, [keys, id]);

  const getProviderIcon = () => {
    return <ProviderIcon provider={id as any} className="h-4 w-4" />;
  };

  const handleCopy = useCallback(async () => {
    if (inputValue.trim()) {
      try {
        await navigator.clipboard.writeText(inputValue.trim());
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
      } catch (err) {
        console.error('Failed to copy text: ', err);
      }
    }
  }, [inputValue]);

  const togglePasswordVisibility = useCallback(() => {
    setShowPassword(prev => !prev);
  }, []);

  return (
    <div className="flex flex-col gap-2">
      <div className="flex items-center justify-between">
      <Label htmlFor={id} className="flex items-center gap-2 text-sm">
        {getProviderIcon()}
        <span>{label}</span>
        {required && <span className="text-muted-foreground"> (Required)</span>}
      </Label>
        <Button
          type="button"
          variant="ghost"
          size="sm"
          className="h-auto p-1 text-xs text-muted-foreground hover:text-foreground"
          onClick={() => window.open(linkUrl, '_blank')}
        >
          <ExternalLink className="h-3 w-3 mr-1" />
          Get Key
        </Button>
      </div>
      
      <div className="flex gap-1 flex-wrap">
        {models.map((model) => (
          <Badge key={model} variant="secondary" className="text-xs">{model}</Badge>
        ))}
      </div>

      <div className="relative">
      <Input
        id={id}
          type={showPassword ? "text" : "password"}
        placeholder={placeholder}
        {...register(id as keyof FormValues)}
          className={cn("text-sm w-full min-w-0 pr-20", error ? 'border-red-500' : '')}
        style={{ fontSize: '16px' }} // Prevents zoom on mobile
          onChange={(e) => {
            const value = e.target.value;
            setInputValue(value);
            register(id as keyof FormValues).onChange(e);
          }}
        />
        
        {inputValue.trim() && (
          <div className="absolute right-2 top-1/2 -translate-y-1/2 flex items-center gap-1">
            <Button
              type="button"
              variant="ghost"
              size="sm"
              className="h-6 w-6 p-0 hover:bg-muted"
              onClick={togglePasswordVisibility}
            >
              {showPassword ? (
                <EyeOff className="h-3 w-3" />
              ) : (
                <Eye className="h-3 w-3" />
              )}
            </Button>
            
            <Button
              type="button"
              variant="ghost"
              size="sm"
              className="h-6 w-6 p-0 hover:bg-muted"
              onClick={handleCopy}
            >
              {copied ? (
                <Check className="h-3 w-3 text-green-500" />
              ) : (
                <Copy className="h-3 w-3" />
              )}
            </Button>
          </div>
        )}
      </div>

      {error && (
        <p className="text-xs font-medium text-red-500">{error.message}</p>
      )}
    </div>
  );
}; 

const ModelsTab = memo(() => {
  const modelsByProvider = getModelsByProvider();
  const {
    toggleProvider,
    toggleFavoriteModel,
    isProviderEnabled,
    isFavoriteModel,
  } = useModelVisibilityStore();
  
  const { saveToConvex } = useModelVisibilitySync();

  // Обработчики с автосохранением и предотвращением дублирования вызовов
  const handleToggleProvider = useCallback((provider: Provider) => {
    try {
      toggleProvider(provider);
      saveToConvex();
    } catch (error) {
      console.error('Failed to toggle provider:', error);
    }
  }, [toggleProvider, saveToConvex]);

  const handleToggleFavoriteModel = useCallback((model: AIModel) => {
    try {
      toggleFavoriteModel(model);
      saveToConvex();
    } catch (error) {
      console.error('Failed to toggle favorite model:', error);
    }
  }, [toggleFavoriteModel, saveToConvex]);

  return (
    <div className="space-y-6 pb-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <Bot className="h-4 w-4" />
            Model Visibility
          </CardTitle>
          <CardDescription className="text-sm">
            Select which models appear in your favorites and which providers are enabled
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {Object.entries(modelsByProvider).map(([provider, models]) => (
            <ProviderSection
              key={provider}
              provider={provider as any}
              models={models}
              isEnabled={isProviderEnabled(provider as any)}
              onToggleProvider={() => handleToggleProvider(provider as any)}
              onToggleFavoriteModel={handleToggleFavoriteModel}
              isFavoriteModel={isFavoriteModel}
            />
          ))}
        </CardContent>
      </Card>
    </div>
  );
});

ModelsTab.displayName = 'ModelsTab';

interface ProviderSectionProps {
  provider: Provider;
  models: AIModel[];
  isEnabled: boolean;
  onToggleProvider: () => void;
  onToggleFavoriteModel: (model: AIModel) => void;
  isFavoriteModel: (model: AIModel) => boolean;
}

const ProviderSection = memo(({
  provider,
  models,
  isEnabled,
  onToggleProvider,
  onToggleFavoriteModel,
  isFavoriteModel,
}: ProviderSectionProps) => {
  // Provider sections start collapsed to avoid a cluttered UI
  const [isExpanded, setIsExpanded] = useState(false);
  const { getKey } = useAPIKeyStore();
  // Provider is considered active only when user has an API key for it
  const providerHasKey = !!getKey(provider);
  
  const providerNames = {
    google: 'Google',
    openai: 'OpenAI',
    openrouter: 'OpenRouter',
    groq: 'Groq',
  };

  return (
    <div className="space-y-3">
      {/* Закрепленный заголовок провайдера */}
      <div
        className={cn(
          "bg-background/95 backdrop-blur-sm z-10 pb-2",
          !providerHasKey && "opacity-60"
        )}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <ProviderIcon provider={provider} className="h-4 w-4" />
            <span className="font-medium text-sm">{providerNames[provider]}</span>
            <Badge variant="secondary" className="text-xs">
              {models.length} models
            </Badge>
          </div>
          <div className={cn('flex items-center gap-2', !providerHasKey && 'pointer-events-none')}>
            <CustomSwitch
              checked={isEnabled}
              onCheckedChange={onToggleProvider}
              id={`provider-${provider}`}
              disabled={!providerHasKey}
            />
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsExpanded(!isExpanded)}
              className="h-6 w-6 p-0"
            >
              {isExpanded ? (
                <ChevronUp className="h-3 w-3" />
              ) : (
                <ChevronDown className="h-3 w-3" />
              )}
            </Button>
          </div>
        </div>
      </div>

      {/* Скроллируемый список моделей */}
      {isExpanded && (
        <div className="ml-6 space-y-2">
          {models.map((model) => (
            <ModelRow
              key={model}
              model={model}
              isProviderEnabled={isEnabled && providerHasKey}
              isFavoriteModel={isFavoriteModel(model)}
              onToggleFavoriteModel={() => onToggleFavoriteModel(model)}
            />
          ))}
        </div>
      )}
    </div>
  );
});

ProviderSection.displayName = 'ProviderSection';

interface ModelRowProps {
  model: AIModel;
  isProviderEnabled: boolean;
  isFavoriteModel: boolean;
  onToggleFavoriteModel: () => void;
}

const ModelRow = memo(({
  model,
  isProviderEnabled,
  isFavoriteModel,
  onToggleFavoriteModel,
}: ModelRowProps) => {
  // Убираем дебаунсинг - он вызывает проблемы с отменой выбора
  // const debouncedToggle = useDebouncedCallback(onToggleFavoriteModel, 300);

  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {
    e.preventDefault();
    onToggleFavoriteModel();
  }, [onToggleFavoriteModel]);

  return (
    <div
      role="button"
      tabIndex={0}
      className={cn(
        "flex items-center justify-between p-2 rounded-md border cursor-pointer transition-colors",
        isFavoriteModel && "bg-primary/10 border-primary/20",
        !isProviderEnabled && "opacity-60"
      )}
      onClick={handleClick}
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          handleClick(e as any);
        }
      }}
    >
      <div className="flex items-center gap-2">
        <span className="text-sm font-medium">{model}</span>
        {!isProviderEnabled && (
          <span className="text-xs text-muted-foreground bg-muted px-1.5 py-0.5 rounded">
            No API key
          </span>
        )}
      </div>
      <div className="flex items-center gap-1">
        {/* Favourite toggle */}
        {isFavoriteModel && (
          <Check className="h-4 w-4 text-primary" />
        )}
      </div>
    </div>
  );
});

ModelRow.displayName = 'ModelRow';

const SettingsDrawerMemo = memo(SettingsDrawerComponent);
SettingsDrawerMemo.displayName = 'SettingsDrawer';

export default SettingsDrawerMemo;



--- FILE: ./frontend/components/ChatView.tsx ---
"use client";

import { useChat } from '@ai-sdk/react';
import Messages from './Messages';
import ChatInput from './ChatInput';
import ChatNavigationBars from './ChatNavigationBars';
import { useAPIKeyStore } from '@/frontend/stores/APIKeyStore';
import { useModelStore } from '@/frontend/stores/ModelStore';
import { useQuoteStore } from '@/frontend/stores/QuoteStore';
import { useAttachmentsStore } from '@/frontend/stores/AttachmentsStore';
import { useChatStore } from '@/frontend/stores/ChatStore';
import { cn } from '@/lib/utils';
import React, { useEffect, useRef, useState, useCallback } from 'react';
import { useMutation } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { isConvexId } from '@/lib/ids';
import { Id } from '@/convex/_generated/dataModel';
import type { UIMessage } from 'ai';
import { useDebounceCallback } from 'usehooks-ts';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';

interface ChatViewProps {
  threadId: string;
  initialMessages: UIMessage[];
  showNavBars: boolean;
}

function ChatView({ threadId, initialMessages, showNavBars }: ChatViewProps) {
  const { keys } = useAPIKeyStore();
  const { selectedModel, webSearchEnabled } = useModelStore();
  const { clearQuote } = useQuoteStore();
  const { clear: clearAttachments } = useAttachmentsStore();
  const { isMobile } = useIsMobile();
  const { consumeNextDialogVersion } = useChatStore();

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [currentThreadId, setCurrentThreadId] = useState(threadId);
  const [currentMessageId, setCurrentMessageId] = useState<string | undefined>();

  // Keep latest thread ID in a ref to avoid stale closures in callbacks
  const threadIdRef = useRef<string>(threadId);
  useEffect(() => {
    threadIdRef.current = currentThreadId;
  }, [currentThreadId]);

  const sendMessage = useMutation<typeof api.messages.send>(api.messages.send);

  const scrollToMessage = (messageId: string) => {
    const element = document.getElementById(`message-${messageId}`);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  };

  // Memoize body and request preparation to avoid creating new references
  const requestBody = React.useMemo(
    () => ({
      model: selectedModel,
      apiKeys: keys,
      threadId: currentThreadId,
      search: webSearchEnabled,
    }),
    [selectedModel, keys, currentThreadId, webSearchEnabled]
  );

  const prepareRequestBody = React.useCallback(
    ({ messages }: { messages: UIMessage[] }) => ({
      messages: messages.map((m) => ({ ...m, id: m.id })),
      ...requestBody,
    }),
    [requestBody]
  );

  const {
    messages,
    input,
    setInput,
    setMessages,
    reload,
    stop,
    append,
    status,
    error,
  } = useChat({
    api: '/api/llm',
    id: currentThreadId,
    initialMessages,
    body: requestBody,
    experimental_prepareRequestBody: prepareRequestBody,
    onFinish: async (finalMsg) => {
      const latestThreadId = threadIdRef.current;
      if (
        finalMsg.role === 'assistant' &&
        finalMsg.content.trim() !== '' &&
        !isConvexId(finalMsg.id) &&
        isConvexId(latestThreadId)
      ) {
        // Persist the assistant message with the **model actually used**.
        const { selectedModel: currentModel } = useModelStore.getState();

        const dlgVersion = consumeNextDialogVersion() ?? 1;

        const realId = await sendMessage({
          threadId: latestThreadId as Id<'threads'>,
          role: 'assistant',
          content: finalMsg.content,
          model: currentModel,
          dialogVersion: dlgVersion,
          isActive: true,
        });

        // Replace the temporary message ID with the real Convex ID
        setMessages((prev) => {
          const idx = prev.findIndex((m) => m.id === finalMsg.id);

          // If the message is already replaced or not found, skip updating to
          // avoid creating an identical array that would trigger another rerender.
          if (idx === -1) return prev;

          const next = [...prev];
          next[idx] = { ...(next[idx] as any), id: realId, model: currentModel } as any;
          return next;
        });
      }
    },
  });

  // Функция для отслеживания видимых сообщений
  const updateCurrentMessage = useCallback(() => {
    const userMessages = messages.filter(message => message.role === 'user');
    if (userMessages.length === 0) return;

    let currentMsg = userMessages[0];
    let minDistance = Infinity;

    userMessages.forEach(message => {
      const element = document.getElementById(`message-${message.id}`);
      if (element) {
        const rect = element.getBoundingClientRect();
        const center = window.innerHeight / 2;
        const distance = Math.abs(rect.top + rect.height / 2 - center);
        
        if (distance < minDistance) {
          minDistance = distance;
          currentMsg = message;
        }
      }
    });

    if (currentMessageId !== currentMsg.id) {
      setCurrentMessageId(currentMsg.id);
    }
  }, [messages, currentMessageId]);
  
  const debouncedUpdateCurrentMessage = useDebounceCallback(updateCurrentMessage, 50, { leading: true });

  // Добавляем обработчик скролла
  useEffect(() => {
    const scrollArea = document.getElementById('messages-scroll-area');
    if (!scrollArea) return;

    const handleScroll = () => {
      debouncedUpdateCurrentMessage();
    };

    scrollArea.addEventListener('scroll', handleScroll, { passive: true });
    // Также обновляем при изменении сообщений
    debouncedUpdateCurrentMessage();

    return () => {
      scrollArea.removeEventListener('scroll', handleScroll);
    };
  }, [debouncedUpdateCurrentMessage]);

  // Register setter so that other components can alter the input value
  const registerInputSetter = useChatStore((s) => s.registerInputSetter);
  useEffect(() => {
    registerInputSetter(setInput);
  }, [setInput, registerInputSetter]);

  // Sync when navigating between chats
  useEffect(() => {
    setCurrentThreadId(threadId);
    if (!threadId) {
      setInput('');
      clearQuote();
      clearAttachments();
    }
    setMessages(initialMessages);
  }, [threadId, setInput, clearQuote, clearAttachments, setMessages, initialMessages]);

  return (
    <>
      {messages.length > 0 && showNavBars && (
        <ChatNavigationBars 
          messages={messages} 
          scrollToMessage={scrollToMessage} 
          currentMessageId={currentMessageId}
        />
      )}

      <div className="flex-1 flex flex-col relative">
        <div className="flex-1 overflow-y-auto" id="messages-scroll-area">
          <main className="w-full max-w-3xl mx-auto pt-24 pb-44 px-4 min-h-full flex-1">
            {messages.length > 0 && (
              <Messages
                threadId={currentThreadId}
                messages={messages}
                status={status}
                setMessages={setMessages}
                reload={reload}
                append={append}
                error={error}
                stop={stop}
              />
            )}
            <div ref={messagesEndRef} />
          </main>
        </div>

        <div
          className={cn(
            'fixed left-1/2 -translate-x-1/2 w-full max-w-3xl px-4 transition-all duration-300 z-30',
            isMobile ? 'bottom-0' : (messages.length > 0 ? 'bottom-0' : 'top-1/2 -translate-y-1/2'),
          )}
        >
          <ChatInput
            threadId={currentThreadId}
            input={input}
            status={status}
            reload={reload}
            setInput={setInput}
            setMessages={setMessages}
            append={append}
            stop={stop}
            error={error}
            messageCount={messages.length}
            onThreadCreated={setCurrentThreadId}
          />
        </div>


      </div>
    </>
  );
}

export default React.memo(ChatView); 

--- FILE: ./frontend/components/ChatHistoryDrawer.tsx ---
"use client";

import React, {
  useState,
  useMemo,
  useCallback,
  memo,
  useDeferredValue,
  useEffect,
  useRef,
} from "react";
import {
  Drawer,
  DrawerContent,
  DrawerTrigger,
  DrawerHeader,
  DrawerTitle,
} from "@/components/ui/drawer";
import {
  Dialog,
  DialogContent,
  DialogTrigger,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/frontend/components/ui/dialog";
import { Button, buttonVariants } from "./ui/button";
import { Input } from "./ui/input";
import CopyButton from "./ui/CopyButton";
import { Tooltip, TooltipContent, TooltipTrigger } from "./ui/tooltip";
import { Switch } from "./ui/switch";
import { Label } from "@/components/ui/label";
import { useRouter, useParams } from "next/navigation";
import {
  X,
  Pin,
  PinOff,
  Search,
  MessageSquare,
  Plus,
  Edit2,
  Share2,
  Check,
  GitBranch,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { useIsMobile } from "@/frontend/hooks/useIsMobile";
import { useQuery, useMutation, useConvexAuth } from "convex/react";
import { api } from "@/convex/_generated/api";
import type { Doc, Id } from "@/convex/_generated/dataModel";
import ChatPreview from "./ChatPreview";
import MessageLoading from "./ui/MessageLoading";
import { useSettingsStore } from '@/frontend/stores/SettingsStore';
import { useDebounce } from "use-debounce";


type Thread = Doc<"threads">;

interface ChatHistoryDrawerProps {
  children: React.ReactNode;
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
}

interface ThreadGroup {
  title: string;
  threads: Thread[];
}

// Helper function to get time period for grouping
const getTimePeriod = (date: Date): string => {
  const now = new Date();
  const diffTime = now.getTime() - date.getTime();
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
  
  if (diffDays === 0) return "Today";
  if (diffDays === 1) return "Yesterday"; 
  if (diffDays <= 7) return "Last Week";
  if (diffDays <= 30) return "Last Month";
  if (diffDays <= 365) return "Last Year";
  return "Older";
};

// Group threads by time period
const groupThreadsByTime = (threads: Thread[]): ThreadGroup[] => {
  const pinned = threads.filter(t => t.pinned);
  const unpinned = threads.filter(t => !t.pinned);
  
  const groups: ThreadGroup[] = [];
  
  // Add pinned group if there are pinned threads
  if (pinned.length > 0) {
    groups.push({ title: "Pinned", threads: pinned });
  }
  
  // Group unpinned threads by time
  const timeGroups: Record<string, Thread[]> = {};
  
  unpinned.forEach(thread => {
    const period = getTimePeriod(new Date(thread._creationTime));
    if (!timeGroups[period]) {
      timeGroups[period] = [];
    }
    timeGroups[period].push(thread);
  });
  
  // Add time groups in order
  const timeOrder = ["Today", "Yesterday", "Last Week", "Last Month", "Last Year", "Older"];
  timeOrder.forEach(period => {
    if (timeGroups[period] && timeGroups[period].length > 0) {
      groups.push({ title: period, threads: timeGroups[period] });
    }
  });
  
  return groups;
};



function ChatHistoryDrawerComponent({
  children,
  isOpen,
  setIsOpen,
}: ChatHistoryDrawerProps) {
  const [rawQuery, setRawQuery] = useState("");
  const searchQuery = useDeferredValue(rawQuery);
  const [editingThreadId, setEditingThreadId] =
    useState<Id<"threads"> | null>(null);
  const [editingTitle, setEditingTitle] = useState("");
  const [deletingThreadId, setDeletingThreadId] =
    useState<Id<"threads"> | null>(null);
  const [hoveredThreadId, setHoveredThreadId] =
    useState<Id<"threads"> | null>(null);
  const [longPressThreadId, setLongPressThreadId] =
    useState<Id<"threads"> | null>(null);
  const [selectedThreadIndex, setSelectedThreadIndex] = useState<number>(-1);
  const [mobileMenuThreadId, setMobileMenuThreadId] =
    useState<Id<"threads"> | null>(null);
  const itemRefs = useRef<Map<number, HTMLDivElement | null>>(new Map());
  const [shareDialogOpen, setShareDialogOpen] = useState(false);
  const [shareLink, setShareLink] = useState<string | null>(null);
  const [isAnonymousShare, setIsAnonymousShare] = useState(false);
  const [sharingThread, setSharingThread] = useState<Thread | null>(null);
  const dialogRef = useRef<HTMLDivElement>(null);

  const { isMobile, mounted } = useIsMobile(600);
  const { id } = useParams();
  const router = useRouter();
  const { isAuthenticated } = useConvexAuth();
  const { settings } = useSettingsStore();

  // Debounce hovered id to avoid spamming preview requests
  const [debouncedHoverId] = useDebounce(hoveredThreadId, 300);

  const trimmedQuery = searchQuery.trim();
  const threads = useQuery(
    api.threads.list,
    isAuthenticated ? (trimmedQuery ? { searchQuery: trimmedQuery } : {}) : "skip",
  );
  const removeThread = useMutation(api.threads.remove);
  const renameThread = useMutation(api.threads.rename);
  const togglePin = useMutation(api.threads.togglePin);
  const createShareLink = useMutation(api.threads.createShareLink);

  const handleOpenChange = useCallback(
    (open: boolean) => {
      if (!open || isOpen !== open) {
        setIsOpen(open);
        if (!open) {
          setRawQuery("");
          setEditingThreadId(null);
          setEditingTitle("");
          setDeletingThreadId(null);
          setHoveredThreadId(null);
          setLongPressThreadId(null);
          setSelectedThreadIndex(-1);
          setMobileMenuThreadId(null);
        }
      }
    },
    [setIsOpen, isOpen],
  );

  // ---------------- Memoized, grouped & sorted thread lists ----------
  const threadGroups = useMemo(() => {
    if (!threads) return [] as ThreadGroup[];
    return groupThreadsByTime(threads);
  }, [threads]);

  const allThreadsFlat = useMemo(() => {
    return threadGroups.flatMap(group => group.threads);
  }, [threadGroups]);

  const handleThreadClick = useCallback(
    (threadId: Id<"threads">) => {
      if (id === threadId) {
        handleOpenChange(false);
        return;
      }
      router.push(`/chat/${threadId}`);
      setLongPressThreadId(null);
      handleOpenChange(false);
    },
    [id, router, handleOpenChange],
  );

  const handleEdit = useCallback((thread: Thread) => {
    setEditingThreadId(thread._id);
    setEditingTitle(thread.title);
    setLongPressThreadId(null);
  }, []);

  const handleSaveEdit = useCallback(
    async (threadId: Id<"threads">) => {
      await renameThread({ threadId, title: editingTitle });
      setEditingThreadId(null);
      setEditingTitle("");
      setLongPressThreadId(null);
    },
    [editingTitle, renameThread],
  );

  const handleCancelEdit = useCallback(() => {
    setEditingThreadId(null);
    setEditingTitle("");
    setLongPressThreadId(null);
  }, []);

  const handleDelete = useCallback((threadId: Id<"threads">) => {
    setDeletingThreadId(threadId);
    setLongPressThreadId(null);
  }, []);

  const handleConfirmDelete = useCallback(
    async (threadId: Id<"threads">) => {
      await removeThread({ threadId });
      if (id === threadId) {
        router.push("/chat");
      }
      setDeletingThreadId(null);
      setLongPressThreadId(null);
    },
    [id, router, removeThread],
  );

  const handleCancelDelete = useCallback(() => {
    setDeletingThreadId(null);
    setLongPressThreadId(null);
  }, []);

  const handlePinToggle = useCallback(
    async (threadId: Id<"threads">, event: React.MouseEvent) => {
      event.preventDefault();
      event.stopPropagation();
      const thread = threads?.find((t) => t._id === threadId);
      if (!thread) return;
      await togglePin({ threadId, pinned: !thread.pinned });
    },
    [togglePin, threads],
  );


  const handleShare = useCallback(
    async (thread: Thread) => {
      setIsAnonymousShare(false); // Reset to default
      setSharingThread(thread);
      setShareLink(null); // Reset link
      setShareDialogOpen(true);
      setLongPressThreadId(null);
      setMobileMenuThreadId(null);
    },
    [],
  );

  const generateShareLink = useCallback(
    async () => {
      if (!sharingThread) return;
      const shareId = await createShareLink({ 
        threadId: sharingThread._id, 
        isAnonymous: isAnonymousShare 
      });
      const url = `${window.location.origin}/share/${shareId}`;
      setShareLink(url);
    },
    [createShareLink, sharingThread, isAnonymousShare],
  );

  const handleNewChat = useCallback(() => {
    router.push("/chat");
    handleOpenChange(false);
  }, [router, handleOpenChange]);

  // ---------- Keyboard navigation (desktop) --------------------------

  const handleKeyDown = useCallback(
    (e: KeyboardEvent) => {
      if (!isOpen || isMobile || editingThreadId) return;

      switch (e.key) {
        case "ArrowDown":
          e.preventDefault();
          setHoveredThreadId(null);
          setSelectedThreadIndex((prev) => (prev < allThreadsFlat.length - 1 ? prev + 1 : prev));
          break;
        case "ArrowUp":
          e.preventDefault();
          setHoveredThreadId(null);
          setSelectedThreadIndex((prev) => (prev > 0 ? prev - 1 : prev));
          break;
        case "Enter":
          e.preventDefault();
          if (selectedThreadIndex >= 0 && selectedThreadIndex < allThreadsFlat.length) {
            const selectedThread = allThreadsFlat[selectedThreadIndex];
            handleThreadClick(selectedThread._id);
          }
          break;
        case "Escape":
          handleOpenChange(false);
          break;
      }
    },
    [isOpen, isMobile, editingThreadId, selectedThreadIndex, allThreadsFlat, handleThreadClick, handleOpenChange],
  );

  useEffect(() => {
    if (isOpen && !isMobile) {
      document.addEventListener("keydown", handleKeyDown);
      return () => document.removeEventListener("keydown", handleKeyDown);
    }
  }, [isOpen, isMobile, handleKeyDown]);

  useEffect(() => {
    if (selectedThreadIndex >= 0 && !isMobile) {
      const node = itemRefs.current.get(selectedThreadIndex);
      node?.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
  }, [selectedThreadIndex, isMobile]);

  useEffect(() => {
    const handleGlobalClick = (e: MouseEvent) => {
      if (mobileMenuThreadId !== null) {
        const menu = document.getElementById(`mobile-menu-${mobileMenuThreadId}`);
        if (menu && !menu.contains(e.target as Node)) {
          setMobileMenuThreadId(null);
        }
      }
    };
    document.addEventListener('click', handleGlobalClick);
    return () => document.removeEventListener('click', handleGlobalClick);
  }, [mobileMenuThreadId]);

  const previewThreadId = useMemo(() => {
    if (debouncedHoverId) return debouncedHoverId;
    if (selectedThreadIndex >= 0 && allThreadsFlat[selectedThreadIndex]) {
      return allThreadsFlat[selectedThreadIndex]._id;
    }
    return null;
  }, [debouncedHoverId, selectedThreadIndex, allThreadsFlat]);

  // ------------------------ Render thread item -----------------------
  const renderThreadItem = useCallback(
    (thread: Thread, threadIndex: number) => (
      <div
        key={thread._id}
        data-thread-index={threadIndex}
        ref={(node) => {
          if (node) itemRefs.current.set(threadIndex, node);
          else itemRefs.current.delete(threadIndex);
        }}
        onMouseEnter={() => {
          setHoveredThreadId(thread._id);
          if (!isMobile) {
            setSelectedThreadIndex(threadIndex);
          }
          // Сбрасываем состояние удаления при наведении на другой элемент
          if (deletingThreadId && deletingThreadId !== thread._id) {
            setDeletingThreadId(null);
          }
        }}
        onMouseLeave={() => {
          setHoveredThreadId(null);
          setLongPressThreadId(null);
          if (isMobile) {
            setMobileMenuThreadId(null);
          }
        }}
        onContextMenu={(e) => {
          if (isMobile) {
            e.preventDefault();
            setLongPressThreadId(thread._id);
            setMobileMenuThreadId(thread._id);
          }
        }}
        onTouchStart={(e) => {
          if (isMobile) {
            const touchStartTime = Date.now();
            const touchTimer = setTimeout(() => {
              setLongPressThreadId(thread._id);
              setMobileMenuThreadId(thread._id);
            }, 500);
            
            const handleTouchEnd = () => {
              clearTimeout(touchTimer);
              if (Date.now() - touchStartTime < 500) {
                setMobileMenuThreadId(null);
              }
            };
            
            e.currentTarget.addEventListener('touchend', handleTouchEnd, { once: true });
          }
        }}
        onClick={() => {
          // Не переходим в чат если редактируем заголовок
          if (!editingThreadId) {
            handleThreadClick(thread._id);
          }
        }}
        onDoubleClick={(e) => {
          e.preventDefault();
          e.stopPropagation();
          if (!isMobile) {
            handleEdit(thread);
          }
        }}
        className={cn(
          "group flex items-center justify-between rounded-lg px-2 py-1.5 cursor-pointer",
          id === thread._id
            ? "bg-primary/10 border border-primary/20" 
            : (!isMobile && threadIndex === selectedThreadIndex)
            ? "bg-accent"
            : "hover:bg-accent",
        )}
      >
        {/* Left side */}
        <div className="flex-1 min-w-0 pr-2">
          <div className="flex items-center gap-2">
            {thread.pinned && <Pin className="h-3 w-3 text-primary shrink-0" />}
            {thread.clonedFrom && <GitBranch className="h-3 w-3 text-primary shrink-0" />}
            {editingThreadId === thread._id ? (
              <div className="flex items-center gap-2 w-full">
                <Input
                  value={editingTitle}
                  onChange={(e) => setEditingTitle(e.target.value)}
                  className="h-6 text-sm flex-1"
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      handleSaveEdit(thread._id);
                    } else if (e.key === "Escape") {
                      handleCancelEdit();
                    }
                  }}
                  autoFocus
                />
                <Button
                  size="icon"
                  variant="ghost"
                  className="h-6 w-6"
                  onClick={() => handleSaveEdit(thread._id)}
                >
                  <Check className="size-3" />
                </Button>
                <Button
                  size="icon"
                  variant="ghost"
                  className="h-6 w-6"
                  onClick={handleCancelEdit}
                >
                  <X className="size-3" />
                </Button>
              </div>
            ) : (
              <span className="line-clamp-1 text-sm font-medium">{thread.title}</span>
            )}
          </div>
        </div>
        {/* Right side buttons */}
        <div
          className={cn(
            "flex gap-0.5 sm:gap-1 shrink-0",
            isMobile
              ? longPressThreadId === thread._id ? "opacity-100" : "opacity-0"
              : longPressThreadId === thread._id ? "opacity-100" : "opacity-0 group-hover:opacity-100",
          )}
        >
          {!editingThreadId && (
            <>
              {/* Mobile action menu */}
              {isMobile && mobileMenuThreadId === thread._id && (
                <div
                  id={`mobile-menu-${thread._id}`}
                  className="absolute right-2 top-0 bottom-0 flex items-center bg-background shadow-lg rounded-lg p-1 z-10"
                >
                  <Button
                    size="sm"
                    variant="ghost"
                    className="h-8 w-8 p-0"
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      handlePinToggle(thread._id, e);
                      setMobileMenuThreadId(null);
                    }}
                  >
                    {thread.pinned ? (
                      <PinOff className="size-4" />
                    ) : (
                      <Pin className="size-4" />
                    )}
                  </Button>
                  <Button
                    size="sm"
                    variant="ghost"
                    className="h-8 w-8 p-0"
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      handleShare(thread);
                      setMobileMenuThreadId(null);
                    }}
                  >
                    <Share2 className="size-4" />
                  </Button>
                  <Button
                    size="sm"
                    variant="ghost"
                    className="h-8 w-8 p-0"
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      handleDelete(thread._id);
                      setMobileMenuThreadId(null);
                    }}
                  >
                    <X className="size-4" />
                  </Button>
                </div>
              )}
              {deletingThreadId === thread._id ? (
                <>
                  <Button
                    size="sm"
                    variant="destructive"
                    className="h-6 px-2 text-xs"
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      handleConfirmDelete(thread._id);
                    }}
                  >
                    Delete
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    className="h-6 px-2 text-xs"
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      handleCancelDelete();
                    }}
                  >
                    Cancel
                  </Button>
                </>
              ) : (
                <>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        size="icon"
                        variant="ghost"
                        className={cn("h-6 w-6 sm:h-7 sm:w-7", isMobile && "h-8 w-8")}
                        onClick={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          handleEdit(thread);
                        }}
                      >
                        <Edit2 className={cn("size-2.5 sm:size-3", isMobile && "size-3.5")}></Edit2>
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>Edit</TooltipContent>
                  </Tooltip>
                  <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      size="icon"
                      variant="ghost"
                      className={cn("h-6 w-6 sm:h-7 sm:w-7", isMobile && "h-8 w-8")}
                      onClick={(e) => handlePinToggle(thread._id, e)}
                    >
                      {thread.pinned ? (
                        <PinOff className={cn("size-2.5 sm:size-3", isMobile && "size-3.5")} />
                      ) : (
                        <Pin className={cn("size-2.5 sm:size-3", isMobile && "size-3.5")} />
                      )}
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>{thread.pinned ? "Unpin" : "Pin"}</TooltipContent>
                </Tooltip>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      size="icon"
                      variant="ghost"
                      className={cn("h-6 w-6 sm:h-7 sm:w-7", isMobile && "h-8 w-8")}
                      onClick={(e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        handleShare(thread);
                      }}
                    >
                      <Share2 className={cn("size-2.5 sm:size-3", isMobile && "size-3.5")} />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>Share</TooltipContent>
                </Tooltip>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      size="icon"
                      variant="ghost"
                        className={cn("h-6 w-6 sm:h-7 sm:w-7", isMobile && "h-8 w-8")}
                        onClick={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          handleDelete(thread._id);
                        }}
                      >
                        <X className={cn("size-2.5 sm:size-3", isMobile && "size-3.5")} />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>Delete</TooltipContent>
                  </Tooltip>
                </>
              )}
            </>
          )}
        </div>
      </div>
    ),
    [
      id,
      isMobile,
      selectedThreadIndex,
      longPressThreadId,
      mobileMenuThreadId,
      deletingThreadId,
      editingThreadId,
      editingTitle,
      handleThreadClick,
      handlePinToggle,
      handleDelete,
      handleEdit,
      handleSaveEdit,
      handleCancelEdit,
      setEditingTitle,
      handleShare,
      setMobileMenuThreadId,
    ],
  );

  if (!isAuthenticated || threads === undefined) return null;

  // ------------------ Main scrollable content component --------------
  const ContentComponent: React.FC = () => (
    <div className="flex h-full flex-col">
      <div className="flex-1 overflow-y-auto scrollbar-none enhanced-scroll px-3 sm:px-4">
        <div className="space-y-4 sm:space-y-6 pt-2 pb-8">
          {threadGroups.length === 0 ? (
            <div className="text-center text-sm text-muted-foreground py-4">
              {searchQuery ? "No chats found." : "No chat history found."}
            </div>
          ) : (
            threadGroups.map((group, groupIndex) => {
              let currentThreadIndex = 0;
              // Calculate the starting index for this group
              for (let i = 0; i < groupIndex; i++) {
                currentThreadIndex += threadGroups[i].threads.length;
              }
              
              return (
                <div key={group.title} className="space-y-2">
                  <h3 className="text-xs font-medium text-muted-foreground uppercase tracking-wider px-2 py-1">
                    {group.title}
                  </h3>
                  <div className="space-y-1">
                    {group.threads.map((thread, idx) => 
                      renderThreadItem(thread, currentThreadIndex + idx)
                    )}
                  </div>
                </div>
              );
            })
          )}
        </div>
      </div>
      {!isMobile && (
        <div className="px-4 py-3 border-t border-border bg-muted/30 pointer-events-none">
          <div className="flex items-center gap-4 text-xs text-muted-foreground">
            <div className="flex items-center gap-1">
              <kbd className="px-1.5 py-0.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">
                ↑
              </kbd>
              <kbd className="px-1.5 py-0.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">
                ↓
              </kbd>
              <span>Navigate</span>
            </div>
            <div className="flex items-center gap-1">
              <kbd className="px-1.5 py-0.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">
                Enter
              </kbd>
              <span>Open</span>
            </div>
            <div className="flex items-center gap-1">
              <kbd className="px-1.5 py-0.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500">
                Esc
              </kbd>
              <span>Close</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );

  // ---------------------- Render mobile vs desktop -------------------
  if (!mounted) return null; // SSR guard

  if (isMobile) {
    const main = (
      <Drawer open={isOpen} onOpenChange={handleOpenChange}>
        <DrawerTrigger asChild>{children}</DrawerTrigger>
        <DrawerContent className="max-h-[95vh] flex flex-col w-full">
          <div className="flex h-full max-h-[90vh] flex-col">
            {/* Pull handle */}
            <div className="flex justify-center pt-4 pb-2">
              <div className="w-16 h-2 bg-muted-foreground/30 rounded-full" />
            </div>

            {/* Header */}
            <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-md border-b border-border/50">
              <DrawerHeader className="pb-2 flex flex-col gap-2">
                <DrawerTitle className="flex items-center gap-2 text-lg">
                  <MessageSquare className="h-5 w-5" /> Chat History
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={handleNewChat}
                    className="ml-auto flex items-center gap-2 text-sm hover:bg-accent focus:outline-none focus:ring-0"
                  >
                    <Plus className="size-4" /> New chat
                  </Button>
                </DrawerTitle>
                <div className="relative">
                  <Input
                    placeholder="Search…"
                    className="rounded-lg py-1.5 pl-8 text-sm w-full"
                    value={rawQuery}
                    onChange={(e) => setRawQuery(e.target.value)}
                  />
                  <Search className="absolute left-2.5 top-1/2 -translate-y-1/2 text-muted-foreground size-3.5" />
                </div>
              </DrawerHeader>
            </div>

            {/* List */}
            <div className="flex-1 min-h-0 overflow-y-auto scrollbar-none enhanced-scroll">
              <ContentComponent />
            </div>
          </div>
        </DrawerContent>
      </Drawer>
    );
    return (
      <>
        {main}
        <Dialog open={shareDialogOpen} onOpenChange={setShareDialogOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Share Chat</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div className="flex items-center space-x-2">
                <Switch
                  id="anonymous-mode"
                  checked={isAnonymousShare}
                  onCheckedChange={setIsAnonymousShare}
                />
                <Label htmlFor="anonymous-mode">Stay anonymous</Label>
              </div>
              <p className="text-sm text-muted-foreground">
                When enabled, your avatar and name will be replaced with "Anonymous" for viewers
              </p>
              
              {!shareLink ? (
                <Button onClick={generateShareLink} className="w-full">
                  Create Link
                </Button>
              ) : (
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <Input
                      value={shareLink}
                      readOnly
                      className="flex-1"
                      onFocus={(e) => e.currentTarget.select()}
                    />
                    <CopyButton code={shareLink} />
                  </div>
                  <Button 
                    variant="outline" 
                    onClick={() => setShareLink(null)} 
                    className="w-full"
                  >
                    Create New Link
                  </Button>
                </div>
              )}
            </div>
          </DialogContent>
        </Dialog>
      </>
    );
  }

  const desktop = (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className={cn(
        "w-[85vw] sm:max-w-none max-w-none h-[80vh] p-0 [&>button]:top-2 [&>button]:right-2 overflow-hidden focus:outline-none",
        !settings.showChatPreview && "w-[600px] max-w-[600px]"
      )}>
        <div className={cn(
          "grid h-full",
          settings.showChatPreview ? "grid-cols-[1fr_600px]" : "grid-cols-1"
        )}>
          <div className="flex flex-col overflow-hidden">
            <DialogHeader className="px-4 pt-4 pb-2 flex flex-col gap-2 shrink-0">
              <DialogTitle className="flex items-center gap-2">
                <MessageSquare className="h-5 w-5" /> Chat History
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleNewChat}
                  className="ml-auto flex items-center gap-2 text-sm hover:bg-accent focus:outline-none focus:ring-0"
                >
                  <Plus className="size-4" /> New chat
                </Button>
              </DialogTitle>
              <DialogDescription className="sr-only">
                Browse and search through your chat history
              </DialogDescription>
              <div className="relative">
                <Input
                  placeholder="Search…"
                  className="rounded-lg py-1.5 pl-8 text-sm w-full"
                  value={rawQuery}
                  onChange={(e) => setRawQuery(e.target.value)}
                />
                <Search className="absolute left-2.5 top-1/2 -translate-y-1/2 text-muted-foreground size-3.5" />
              </div>
            </DialogHeader>
            <div className="flex-1 min-h-0 overflow-hidden">
              <ContentComponent />
            </div>
          </div>
          {settings.showChatPreview && (
            <ChatPreview threadId={previewThreadId} onClose={() => handleOpenChange(false)} />
          )}
        </div>
      </DialogContent>
    </Dialog>
  );

  return (
    <>
      {desktop}
      <Dialog open={shareDialogOpen} onOpenChange={setShareDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Share Chat</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="flex items-center space-x-2">
              <Switch
                id="anonymous-mode-desktop"
                checked={isAnonymousShare}
                onCheckedChange={setIsAnonymousShare}
              />
              <Label htmlFor="anonymous-mode-desktop">Stay anonymous</Label>
            </div>
            <p className="text-sm text-muted-foreground">
              When enabled, your avatar and name will be replaced with "Anonymous" for viewers
            </p>
            
            {!shareLink ? (
              <Button onClick={generateShareLink} className="w-full">
                Create Link
              </Button>
            ) : (
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <Input
                    value={shareLink}
                    readOnly
                    className="flex-1"
                    onFocus={(e) => e.currentTarget.select()}
                  />
                  <CopyButton code={shareLink} />
                </div>
                <Button 
                  variant="outline" 
                  onClick={() => setShareLink(null)} 
                  className="w-full"
                >
                  Create New Link
                </Button>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}

export default memo(ChatHistoryDrawerComponent);


--- FILE: ./frontend/components/MessageControls.tsx ---
import { Dispatch, SetStateAction, useState, useCallback, useMemo } from 'react';
import { Button } from './ui/button';
import { cn } from '@/lib/utils';
import { Check, Copy, RefreshCcw, SquarePen, GitBranch } from 'lucide-react';
import { UIMessage } from 'ai';
import { UseChatHelpers } from '@ai-sdk/react';
import { useAPIKeyStore } from '@/frontend/stores/APIKeyStore';
import { useModelStore } from '@/frontend/stores/ModelStore';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';
import { useMutation, useQuery, useConvexAuth } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { isConvexId } from '@/lib/ids';
import type { Id } from '@/convex/_generated/dataModel';
import { useRouter } from 'next/navigation';
import { useSettingsStore } from '@/frontend/stores/SettingsStore';
import { useChatStore } from '@/frontend/stores/ChatStore';
import DialogVersionNavigation from './DialogVersionNavigation';

interface MessageControlsProps {
  threadId: string;
  message: UIMessage;
  messages: UIMessage[];
  setMessages: UseChatHelpers['setMessages'];
  content: string;
  setMode?: Dispatch<SetStateAction<'view' | 'edit'>>;
  reload: UseChatHelpers['reload'];
  stop: UseChatHelpers['stop'];
  append: UseChatHelpers['append'];
  isVisible?: boolean; // Для мобильных устройств
  onToggleVisibility?: () => void; // Для мобильных устройств
}

export default function MessageControls({
  threadId,
  message,
  messages,
  setMessages,
  content,
  setMode,
  reload,
  stop,
  append,
  isVisible = false,
  onToggleVisibility,
}: MessageControlsProps) {
  const [copied, setCopied] = useState(false);
  const { hasRequiredKeys, keys } = useAPIKeyStore();
  const { selectedModel, webSearchEnabled } = useModelStore();
  const { isAuthenticated } = useConvexAuth();
  const canChat = hasRequiredKeys();
  const { isMobile } = useIsMobile();
  const prepareForRegenerate = useMutation(api.messages.prepareForRegeneration);
  const createSnapshot = useMutation(api.messages.createDialogSnapshot);
  const { settings } = useSettingsStore();
  const { setNextDialogVersion } = useChatStore();
  const cloneThread = useMutation(api.threads.clone);
  const thread = useQuery(
    api.threads.get,
    isConvexId(threadId) ? { threadId: threadId as Id<'threads'> } : 'skip'
  );
  
  // Получаем данные о сообщении для версий
  
  const router = useRouter();

  // Clone the current thread and navigate to the new one.
  const handleBranch = useCallback(async () => {
    if (!isConvexId(threadId)) return;
    const title = thread?.title ?? content.slice(0, 30);
    const newId = await cloneThread({
      threadId: threadId as Id<'threads'>,
      title,
    });
    router.push(`/chat/${newId}`);
    onToggleVisibility?.();
  }, [threadId, thread?.title, content, cloneThread, router, onToggleVisibility]);

  // Copy message contents to clipboard.
  const handleCopy = useCallback(() => {
    navigator.clipboard.writeText(content);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  }, [content]);

  // Regenerate the assistant answer starting from this message.
  const handleRegenerate = useCallback(async () => {
    stop();

    if (!isConvexId(threadId)) return;

    const currentIndex = messages.findIndex((m) => m.id === message.id);
    if (currentIndex === -1) {
      console.error('Could not find the current message in the messages array.');
      return;
    }

    let parentMessageIndex = -1;
    for (let i = currentIndex; i >= 0; i--) {
      if (messages[i].role === 'user') {
        parentMessageIndex = i;
        break;
      }
    }

    if (parentMessageIndex === -1) {
      console.error('Could not find a parent user message for regeneration.');
      return;
    }

    const parentMessageToResend = messages[parentMessageIndex];

    // Trim in-memory messages up to the parent user prompt (inclusive)
    const messagesUpToParent = messages.slice(0, parentMessageIndex + 1);
    setMessages(messagesUpToParent);

    if (settings.saveRegenerationHistory) {
      // Create snapshot to keep history and obtain new dialogVersion
      try {
        const res = await createSnapshot({
          threadId: threadId as Id<'threads'>,
        });
        setNextDialogVersion(res.dialogVersion);
      } catch (err) {
        console.error('Snapshot creation failed', err);
      }
    } else {
      // fallback to legacy deletion behaviour
      if (isConvexId(parentMessageToResend.id)) {
        try {
          await prepareForRegenerate({
            threadId: threadId as Id<'threads'>,
            userMessageId: parentMessageToResend.id as Id<'messages'>,
          });
        } catch (error) {
          console.error('Error during regeneration cleanup:', error);
        }
      }
    }

    // Finally, request a fresh completion from the model using the **latest**
    // store values so that a just-changed model is respected even if the UI
    // hasn't finished re-rendering before the user clicked the button.
    const {
      selectedModel: currentModel,
      webSearchEnabled: currentSearch,
    } = useModelStore.getState();

    reload({
      body: {
        model: currentModel,
        apiKeys: keys,
        threadId,
        search: currentSearch,
      },
    });
  }, [stop, threadId, message.id, messages, setMessages, reload, prepareForRegenerate, keys, createSnapshot, settings, setNextDialogVersion]);

  // Show controls on mobile only when explicitly visible.
  const shouldShowControls = useMemo(() => (isMobile ? isVisible : true), [isMobile, isVisible]);


  return (
    <div className="flex flex-col gap-2">
      <div
        className={cn(
          'transition-opacity duration-100 flex items-center gap-1',
          {
            'absolute mt-5 right-2': message.role === 'user',
            'opacity-0 group-hover:opacity-100': !isMobile && shouldShowControls,
            'opacity-100': isMobile && shouldShowControls,
            'opacity-0': isMobile && !shouldShowControls,
          }
        )}
      >
        <Button variant="ghost" size="icon" onClick={handleCopy}>
          {copied ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
        </Button>
        {setMode && canChat && (
          <Button variant="ghost" size="icon" onClick={() => setMode('edit')}>
            <SquarePen className="w-4 h-4" />
          </Button>
        )}
        {message.role === 'assistant' && canChat && (
          <Button variant="ghost" size="icon" onClick={handleBranch}>
            <GitBranch className="w-4 h-4" />
          </Button>
        )}
        {message.role === 'assistant' && canChat && (
          <Button variant="ghost" size="icon" onClick={handleRegenerate}>
            <RefreshCcw className="w-4 h-4" />
          </Button>
        )}

        {/* Dialog version navigation for user messages */}
        {message.role === 'user' && (
          <DialogVersionNavigation threadId={threadId} />
        )}

        {/* Model label for assistant messages */}
        {message.role === 'assistant' && (message as any).model && (
          <span className="text-[10px] text-muted-foreground ml-2">
            {(message as any).model}
          </span>
        )}
      </div>
    </div>
  );
}


--- FILE: ./frontend/components/DrawingCanvas.tsx ---
"use client";

import React, { useRef, useEffect, useState, useCallback } from 'react';
import { createPortal } from 'react-dom';
import { Button } from './ui/button';
import { 
  Brush, 
  Square, 
  Circle, 
  Type, 
  Eraser, 
  Undo, 
  Redo, 
  Download, 
  X, 
  Move,
  Palette,
  Image as ImageIcon
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { useIsMobile } from '../hooks/useIsMobile';

interface Point {
  x: number;
  y: number;
}

interface DrawingElement {
  id: string;
  type: 'brush' | 'rectangle' | 'circle' | 'text' | 'image';
  points?: Point[];
  x?: number;
  y?: number;
  width?: number;
  height?: number;
  text?: string;
  color: string;
  strokeWidth: number;
  isDragging?: boolean;
  image?: {
    src: string;
    naturalWidth: number;
    naturalHeight: number;
  };
}

interface DrawingCanvasProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (imageData: string) => void;
}

const COLORS = [
  '#000000', '#FFFFFF', '#FF0000', '#00FF00', '#0000FF',
  '#FFFF00', '#FF00FF', '#00FFFF', '#FFA500', '#800080',
  '#FFC0CB', '#A52A2A', '#808080', '#000080', '#008000'
];

const STROKE_WIDTHS = [1, 2, 4, 8, 16];

export default function DrawingCanvas({ isOpen, onClose, onSave }: DrawingCanvasProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const { isMobile } = useIsMobile();
  const [isDrawing, setIsDrawing] = useState(false);
  const [tool, setTool] = useState<'brush' | 'rectangle' | 'circle' | 'text' | 'eraser' | 'move'>('brush');
  const [color, setColor] = useState('#000000');
  const [strokeWidth, setStrokeWidth] = useState(2);
  const [elements, setElements] = useState<DrawingElement[]>([]);
  const [history, setHistory] = useState<DrawingElement[][]>([[]]);
  const [historyIndex, setHistoryIndex] = useState(0);
  const [selectedElement, setSelectedElement] = useState<string | null>(null);
  const [dragStart, setDragStart] = useState<Point | null>(null);
  const [showColorPalette, setShowColorPalette] = useState(false);
  const [showStrokeWidth, setShowStrokeWidth] = useState(false);
  const [textInput, setTextInput] = useState('');
  const [textPosition, setTextPosition] = useState<Point | null>(null);
  const [canvasSize, setCanvasSize] = useState({ width: 800, height: 600 });
  const [showMobileTools, setShowMobileTools] = useState(false);

  // ====== D5-D7. Resize handles & interaction ======
  const [isResizing, setIsResizing] = useState(false);
  const [resizeHandle, setResizeHandle] = useState<string | null>(null); // 'br', 'tr', 'bl', 'tl', etc.
  const [initialElementState, setInitialElementState] = useState<DrawingElement | null>(null);
  const [isShiftPressed, setIsShiftPressed] = useState(false);
  const [pinchStart, setPinchStart] = useState<{ distance: number; center: Point } | null>(null);

  // Image cache to prevent flicker
  const imageCache = useRef<Map<string, HTMLImageElement>>(new Map());

  // ====== D1. Reset state helper ======
  const resetCanvasState = useCallback(() => {
    setElements([]);
    setHistory([[]]);
    setHistoryIndex(0);
    setSelectedElement(null);
    setDragStart(null);
    setTextInput('');
    setTextPosition(null);
    imageCache.current.clear(); // Clear image cache
  }, []);

  // Сброс при закрытии/сохранении
  useEffect(() => {
    if (!isOpen) {
      resetCanvasState();
    }
  }, [isOpen, resetCanvasState]);

  // ====== D3/D4. Image insertion ======
  const fileInputRef = useRef<HTMLInputElement>(null);

  const insertImageFromFile = useCallback(async (file: File) => {
    if (!file.type.startsWith('image/')) return;
    const reader = new FileReader();
    reader.onload = () => {
      const dataUrl = reader.result as string;
      const img = new Image();
      img.onload = () => {
        const maxCanvasWidth = canvasSize.width * 0.5;
        const scale = Math.min(1, maxCanvasWidth / img.width);
        const w = img.width * scale;
        const h = img.height * scale;
        const newEl: DrawingElement = {
          id: Date.now().toString(),
          type: 'image',
          x: (canvasSize.width - w) / 2,
          y: (canvasSize.height - h) / 2,
          width: w,
          height: h,
          color: '#000000',
          strokeWidth: 1,
          image: {
            src: dataUrl,
            naturalWidth: img.width,
            naturalHeight: img.height,
          },
        };
        setElements(prev => [...prev, newEl]);
        // history will be updated via separate interactions
      };
      img.src = dataUrl;
    };
    reader.readAsDataURL(file);
  }, [canvasSize.width, canvasSize.height, elements]);

  const handleFileInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      insertImageFromFile(file);
    }
  }, [insertImageFromFile]);

  // Clipboard paste
  useEffect(() => {
    if (!isOpen) return;
    const handlePaste = (e: ClipboardEvent) => {
      const items = e.clipboardData?.items;
      if (!items) return;
      for (const item of items) {
        if (item.type.startsWith('image/')) {
          const file = item.getAsFile();
          if (file) {
            insertImageFromFile(file);
            e.preventDefault();
          }
        }
      }
    };
    window.addEventListener('paste', handlePaste as EventListener);
    return () => {
      window.removeEventListener('paste', handlePaste as EventListener);
    };
  }, [isOpen, insertImageFromFile]);

  // Drag & Drop
  useEffect(() => {
    if (!isOpen) return;
    const handleDrop = (e: DragEvent) => {
      e.preventDefault();
      if (e.dataTransfer?.files.length) {
        insertImageFromFile(e.dataTransfer.files[0]);
      }
    };
    const handleDragOver = (e: DragEvent) => e.preventDefault();
    window.addEventListener('drop', handleDrop);
    window.addEventListener('dragover', handleDragOver);
    return () => {
      window.removeEventListener('drop', handleDrop);
      window.removeEventListener('dragover', handleDragOver);
    };
  }, [isOpen, insertImageFromFile]);

  // Shift key detection for aspect ratio
  useEffect(() => {
    if (!isOpen) return;
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Shift') setIsShiftPressed(true);
    };
    const handleKeyUp = (e: KeyboardEvent) => {
      if (e.key === 'Shift') setIsShiftPressed(false);
    };
    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keyup', handleKeyUp);
    };
  }, [isOpen]);

  // Get resize handles for selected element
  const getResizeHandles = useCallback((element: DrawingElement) => {
    if (element.type === 'brush') return []; // No resize for brush strokes
    
    // For text elements, calculate bounds
    if (element.type === 'text' && element.text && element.x !== undefined && element.y !== undefined) {
      const canvas = canvasRef.current;
      if (canvas) {
        const ctx = canvas.getContext('2d');
        if (ctx) {
          ctx.font = `${element.strokeWidth * 8}px -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif`;
          const textMetrics = ctx.measureText(element.text);
          const width = textMetrics.width;
          const height = element.strokeWidth * 8;
          const x = element.x;
          const y = element.y - height;
          
          const handles = [
            { id: 'tl', x: x, y: y },
            { id: 'tr', x: x + width, y: y },
            { id: 'bl', x: x, y: y + height },
            { id: 'br', x: x + width, y: y + height },
          ];
          return handles;
        }
      }
    }
    
    if (element.x === undefined || element.y === undefined || element.width === undefined || element.height === undefined) return [];
    
    const handles = [
      { id: 'tl', x: element.x, y: element.y },
      { id: 'tr', x: element.x + element.width, y: element.y },
      { id: 'bl', x: element.x, y: element.y + element.height },
      { id: 'br', x: element.x + element.width, y: element.y + element.height },
      { id: 'tm', x: element.x + element.width / 2, y: element.y },
      { id: 'bm', x: element.x + element.width / 2, y: element.y + element.height },
      { id: 'ml', x: element.x, y: element.y + element.height / 2 },
      { id: 'mr', x: element.x + element.width, y: element.y + element.height / 2 },
    ];
    
    return handles;
  }, []);

  // Check if point is on resize handle
  const getHandleAtPoint = useCallback((point: Point, element: DrawingElement): string | null => {
    const handles = getResizeHandles(element);
    const tolerance = 8; // handle size
    
    for (const handle of handles) {
      if (Math.abs(point.x - handle.x) <= tolerance && Math.abs(point.y - handle.y) <= tolerance) {
        return handle.id;
      }
    }
    return null;
  }, [getResizeHandles]);

  // Функция для расчета адаптивного размера canvas (D2.1)
  const calculateCanvasSize = useCallback(() => {
    if (typeof window === 'undefined') return { width: 800, height: 600 };
    
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;
    
    // Отступы для UI элементов - оптимизация для мобильных
    const toolbarHeight = isMobile ? 60 : 80; // компактная панель на мобильных  
    const sideMargin = isMobile ? 10 : 40;
    
    // Доступное пространство
    const availableWidth = viewportWidth - sideMargin * 2;
    const availableHeight = viewportHeight - toolbarHeight - 40; // 40px для кнопок закрытия
    
    // Минимальные размеры
    const minWidth = isMobile ? 280 : 600;
    const minHeight = isMobile ? 200 : 400;
    
    // Максимальные размеры
    const maxWidth = 1200;
    const maxHeight = 800;
    
    const width = Math.min(maxWidth, Math.max(minWidth, availableWidth));
    const height = Math.min(maxHeight, Math.max(minHeight, availableHeight));
    
    return { width, height };
  }, [isMobile]);

  // Обновление размера canvas при изменении экрана
  useEffect(() => {
    const updateCanvasSize = () => {
      const newSize = calculateCanvasSize();
      setCanvasSize(newSize);
    };
    
    updateCanvasSize();
    window.addEventListener('resize', updateCanvasSize);
    window.addEventListener('orientationchange', updateCanvasSize);
    
    return () => {
      window.removeEventListener('resize', updateCanvasSize);
      window.removeEventListener('orientationchange', updateCanvasSize);
    };
  }, [calculateCanvasSize]);

  // Инициализация canvas с адаптивным размером
  useEffect(() => {
    if (!isOpen) return;
    
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Устанавливаем адаптивный размер canvas
    canvas.width = canvasSize.width;
    canvas.height = canvasSize.height;
    
    // Белый фон
    ctx.fillStyle = '#FFFFFF';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    redrawCanvas();
  }, [isOpen, canvasSize]); // Добавили canvasSize в зависимости

  const redrawCanvas = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Очищаем canvas
    ctx.fillStyle = '#FFFFFF';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Рисуем все элементы
    elements.forEach((element) => {
      ctx.strokeStyle = element.color;
      ctx.lineWidth = element.strokeWidth;
      ctx.lineCap = 'round';
      ctx.lineJoin = 'round';

      switch (element.type) {
        case 'brush':
          if (element.points && element.points.length > 1) {
            ctx.beginPath();
            ctx.moveTo(element.points[0].x, element.points[0].y);
            element.points.forEach(point => {
              ctx.lineTo(point.x, point.y);
            });
            ctx.stroke();
          }
          break;

        case 'rectangle':
          if (element.x !== undefined && element.y !== undefined && element.width && element.height) {
            ctx.beginPath();
            ctx.rect(element.x, element.y, element.width, element.height);
            ctx.stroke();
            
            // Выделение для выбранного элемента
            if (selectedElement === element.id) {
              ctx.strokeStyle = '#007AFF';
              ctx.lineWidth = 1;
              ctx.setLineDash([5, 5]);
              ctx.stroke();
              ctx.setLineDash([]);
            }
          }
          break;

        case 'circle':
          if (element.x !== undefined && element.y !== undefined && element.width && element.height) {
            const radius = Math.sqrt(element.width * element.width + element.height * element.height) / 2;
            ctx.beginPath();
            ctx.arc(element.x + element.width / 2, element.y + element.height / 2, radius, 0, 2 * Math.PI);
            ctx.stroke();
            
            if (selectedElement === element.id) {
              ctx.strokeStyle = '#007AFF';
              ctx.lineWidth = 1;
              ctx.setLineDash([5, 5]);
              ctx.stroke();
              ctx.setLineDash([]);
            }
          }
          break;

        case 'text':
          if (element.x !== undefined && element.y !== undefined && element.text) {
            ctx.fillStyle = element.color;
            ctx.font = `${element.strokeWidth * 8}px -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif`;
            ctx.fillText(element.text, element.x, element.y);
            
            if (selectedElement === element.id) {
              const textMetrics = ctx.measureText(element.text);
              ctx.strokeStyle = '#007AFF';
              ctx.lineWidth = 1;
              ctx.setLineDash([5, 5]);
              ctx.strokeRect(element.x - 2, element.y - element.strokeWidth * 8, textMetrics.width + 4, element.strokeWidth * 8 + 4);
              ctx.setLineDash([]);
            }
          }
          break;

        case 'image':
          if (element.image && element.x !== undefined && element.y !== undefined && element.width !== undefined && element.height !== undefined) {
            // Use cached image or create new one
            let img = imageCache.current.get(element.image.src);
            if (!img) {
              img = new Image();
              img.src = element.image.src;
              imageCache.current.set(element.image.src, img);
              img.onload = () => redrawCanvas(); // Redraw when image loads
            }
            
            // Draw image if it's loaded
            if (img.complete && img.naturalWidth > 0) {
              ctx.drawImage(img, element.x as number, element.y as number, element.width as number, element.height as number);
            }
          }
          break;
      }
    });

    // Draw selection boxes and resize handles for all selected elements
    const selectedEl = elements.find(el => el.id === selectedElement);
    if (selectedEl) {
      const handles = getResizeHandles(selectedEl);
      
      // Draw selection box for non-brush elements
      if (selectedEl.type !== 'brush') {
        if (selectedEl.type === 'text' && selectedEl.text && selectedEl.x !== undefined && selectedEl.y !== undefined) {
          // Draw text selection box
          const canvas = canvasRef.current;
          if (canvas) {
            const ctx = canvas.getContext('2d');
            if (ctx) {
              ctx.font = `${selectedEl.strokeWidth * 8}px -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif`;
              const textMetrics = ctx.measureText(selectedEl.text);
              ctx.strokeStyle = '#007AFF';
              ctx.lineWidth = 1;
              ctx.setLineDash([5, 5]);
              ctx.strokeRect(selectedEl.x - 2, selectedEl.y - selectedEl.strokeWidth * 8, textMetrics.width + 4, selectedEl.strokeWidth * 8 + 4);
              ctx.setLineDash([]);
            }
          }
        } else if (selectedEl.x !== undefined && selectedEl.y !== undefined && selectedEl.width !== undefined && selectedEl.height !== undefined) {
          // Draw regular selection box
          ctx.strokeStyle = '#007AFF';
          ctx.lineWidth = 1;
          ctx.setLineDash([5, 5]);
          ctx.strokeRect(selectedEl.x, selectedEl.y, selectedEl.width, selectedEl.height);
          ctx.setLineDash([]);
        }
      }
      
      // Draw resize handles
      handles.forEach(handle => {
        ctx.fillStyle = '#007AFF';
        ctx.fillRect(handle.x - 4, handle.y - 4, 8, 8);
        ctx.strokeStyle = '#FFFFFF';
        ctx.lineWidth = 1;
        ctx.strokeRect(handle.x - 4, handle.y - 4, 8, 8);
      });
    }
  }, [elements, selectedElement, getResizeHandles]);

  // Перерисовываем canvas при изменении элементов
  useEffect(() => {
    redrawCanvas();
  }, [redrawCanvas]);

  const addToHistory = useCallback((newElements: DrawingElement[]) => {
    const newHistory = history.slice(0, historyIndex + 1);
    newHistory.push([...newElements]);
    setHistory(newHistory);
    setHistoryIndex(newHistory.length - 1);
  }, [history, historyIndex]);

  const getCoords = useCallback((e: MouseEvent | TouchEvent): Point => {
    const canvas = canvasRef.current;
    if (!canvas) return { x: 0, y: 0 };
    
    const rect = canvas.getBoundingClientRect();
    
    // Получаем клиентские координаты
    let clientX: number, clientY: number;
    if (e instanceof TouchEvent) {
      const touch = e.touches[0];
      clientX = touch.clientX;
      clientY = touch.clientY;
    } else {
      clientX = e.clientX;
      clientY = e.clientY;
    }
    
    // Вычисляем относительные координаты
    const x = clientX - rect.left;
    const y = clientY - rect.top;
    
    // Масштабируем координаты с учетом разности между CSS размерами и реальными размерами canvas
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    
    return { 
      x: x * scaleX, 
      y: y * scaleY 
    };
  }, []);

  const findElementAtPoint = useCallback((point: Point): DrawingElement | null => {
    // Проверяем элементы в обратном порядке (последние нарисованные сверху)
    for (let i = elements.length - 1; i >= 0; i--) {
      const element = elements[i];
      
      if (element.type === 'rectangle' || element.type === 'circle' || element.type === 'image') {
        if (element.x !== undefined && element.y !== undefined && element.width && element.height) {
          if (point.x >= element.x && point.x <= element.x + element.width &&
              point.y >= element.y && point.y <= element.y + element.height) {
            return element;
          }
        }
      } else if (element.type === 'text') {
        if (element.x !== undefined && element.y !== undefined && element.text) {
          const canvas = canvasRef.current;
          if (canvas) {
            const ctx = canvas.getContext('2d');
            if (ctx) {
              ctx.font = `${element.strokeWidth * 8}px -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif`;
              const textMetrics = ctx.measureText(element.text);
              if (point.x >= element.x && point.x <= element.x + textMetrics.width &&
                  point.y >= element.y - element.strokeWidth * 8 && point.y <= element.y) {
                return element;
              }
            }
          }
        }
      } else if (element.type === 'brush' && element.points) {
        // Check if point is near any part of the brush stroke
        const tolerance = Math.max(8, element.strokeWidth + 4);
        for (let j = 0; j < element.points.length; j++) {
          const brushPoint = element.points[j];
          const distance = Math.sqrt(
            Math.pow(point.x - brushPoint.x, 2) + Math.pow(point.y - brushPoint.y, 2)
          );
          if (distance <= tolerance) {
            return element;
          }
        }
      }
    }
    return null;
  }, [elements]);

  const getTouchDistance = useCallback((touches: TouchList): number => {
    const touch1 = touches[0];
    const touch2 = touches[1];
    const dx = touch2.clientX - touch1.clientX;
    const dy = touch2.clientY - touch1.clientY;
    return Math.sqrt(dx * dx + dy * dy);
  }, []);

  const getTouchCenter = useCallback((touches: TouchList): Point => {
    const touch1 = touches[0];
    const touch2 = touches[1];
    const canvas = canvasRef.current;
    if (!canvas) return { x: 0, y: 0 };
    
    const rect = canvas.getBoundingClientRect();
    const cx = (touch1.clientX + touch2.clientX) / 2 - rect.left;
    const cy = (touch1.clientY + touch2.clientY) / 2 - rect.top;
    
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    
    return { x: cx * scaleX, y: cy * scaleY };
  }, []);

  const startDrawing = useCallback((e: MouseEvent | TouchEvent) => {
    e.preventDefault();
    const pos = getCoords(e);
    
    // D7. Handle two-finger pinch start
    if (e instanceof TouchEvent && e.touches.length === 2) {
      const distance = getTouchDistance(e.touches);
      const center = getTouchCenter(e.touches);
      const element = findElementAtPoint(center);
      if (element) {
        setPinchStart({ distance, center });
        setSelectedElement(element.id);
        setInitialElementState(JSON.parse(JSON.stringify(element)));
        return;
      }
    }
    
    setIsDrawing(true);
    setDragStart(pos);

    if (tool === 'move') {
      const element = findElementAtPoint(pos);
      if (element) {
        // Check if clicking on resize handle
        const handle = getHandleAtPoint(pos, element);
        if (handle) {
          setIsResizing(true);
          setResizeHandle(handle);
          setInitialElementState(JSON.parse(JSON.stringify(element)));
          setSelectedElement(element.id);
          return;
        }
        
        setSelectedElement(element.id);
      } else {
        setSelectedElement(null);
      }
      return;
    }

    if (tool === 'text') {
      setTextPosition(pos);
      return;
    }

    const newElement: DrawingElement = {
      id: Date.now().toString(),
      type: tool === 'eraser' ? 'brush' : tool,
      color: tool === 'eraser' ? '#FFFFFF' : color,
      strokeWidth: tool === 'eraser' ? strokeWidth * 2 : strokeWidth,
    };

    if (tool === 'brush' || tool === 'eraser') {
      newElement.points = [pos];
    } else {
      newElement.x = pos.x;
      newElement.y = pos.y;
      newElement.width = 0;
      newElement.height = 0;
    }

    setElements(prev => [...prev, newElement]);
  }, [tool, color, strokeWidth, getCoords, findElementAtPoint, getHandleAtPoint, getTouchDistance, getTouchCenter]);

  const draw = useCallback((e: MouseEvent | TouchEvent) => {
    e.preventDefault();
    if (!isDrawing || !dragStart) return;

    const pos = getCoords(e);

    if (tool === 'move' && selectedElement) {
      const dx = pos.x - dragStart.x;
      const dy = pos.y - dragStart.y;
      
      setElements(prev => prev.map(el => {
        if (el.id === selectedElement) {
          return {
            ...el,
            x: (el.x || 0) + dx,
            y: (el.y || 0) + dy,
            points: el.points?.map(p => ({ x: p.x + dx, y: p.y + dy }))
          };
        }
        return el;
      }));
      
      setDragStart(pos);
      return;
    }

    // Handle resizing
    if (isResizing && resizeHandle && selectedElement && initialElementState) {
      const dx = pos.x - dragStart.x;
      const dy = pos.y - dragStart.y;
      
      setElements(prev => prev.map(el => {
        if (el.id === selectedElement) {
          const newEl = { ...el };
          const initial = initialElementState;
          
          // Handle text resizing (change font size)
          if (el.type === 'text') {
            const scaleFactor = Math.max(0.1, 1 + (dx + dy) / 100);
            newEl.strokeWidth = Math.max(1, (initial.strokeWidth || 1) * scaleFactor);
            return newEl;
          }
          
          // Calculate new dimensions based on handle
          let newWidth = initial.width || 0;
          let newHeight = initial.height || 0;
          let newX = initial.x || 0;
          let newY = initial.y || 0;
          
          switch (resizeHandle) {
            case 'br': // bottom-right
              newWidth = (initial.width || 0) + dx;
              newHeight = (initial.height || 0) + dy;
              break;
            case 'tr': // top-right
              newWidth = (initial.width || 0) + dx;
              newHeight = (initial.height || 0) - dy;
              newY = (initial.y || 0) + dy;
              break;
            case 'bl': // bottom-left
              newWidth = (initial.width || 0) - dx;
              newHeight = (initial.height || 0) + dy;
              newX = (initial.x || 0) + dx;
              break;
            case 'tl': // top-left
              newWidth = (initial.width || 0) - dx;
              newHeight = (initial.height || 0) - dy;
              newX = (initial.x || 0) + dx;
              newY = (initial.y || 0) + dy;
              break;
          }
          
          // Maintain aspect ratio for circles or when Shift is pressed
          if (isShiftPressed || el.type === 'circle') {
            const ratio = (initial.width || 1) / (initial.height || 1);
            if (Math.abs(dx) > Math.abs(dy)) {
              newHeight = newWidth / ratio;
            } else {
              newWidth = newHeight * ratio;
            }
          }
          
          // Prevent negative dimensions
          newWidth = Math.max(10, newWidth);
          newHeight = Math.max(10, newHeight);
          
          newEl.width = newWidth;
          newEl.height = newHeight;
          newEl.x = newX;
          newEl.y = newY;
          
          return newEl;
        }
        return el;
      }));
      return;
    }

    setElements(prev => {
      const newElements = [...prev];
      const lastElement = newElements[newElements.length - 1];

      if (tool === 'brush' || tool === 'eraser') {
        if (lastElement.points) {
          lastElement.points.push(pos);
        }
      } else {
        lastElement.width = pos.x - (lastElement.x || 0);
        lastElement.height = pos.y - (lastElement.y || 0);
      }

      return newElements;
    });
  }, [isDrawing, dragStart, tool, selectedElement, getCoords, isResizing, resizeHandle, initialElementState, isShiftPressed, pinchStart, getTouchDistance]);

  const stopDrawing = useCallback(() => {
    if (isDrawing) {
      addToHistory(elements);
    }
    setIsDrawing(false);
    setDragStart(null);
    setIsResizing(false);
    setResizeHandle(null);
    setInitialElementState(null);
    setPinchStart(null);
  }, [isDrawing, elements, addToHistory]);

  const handleTextSubmit = useCallback(() => {
    if (textInput.trim() && textPosition) {
      const newElement: DrawingElement = {
        id: Date.now().toString(),
        type: 'text',
        x: textPosition.x,
        y: textPosition.y,
        text: textInput.trim(),
        color: color,
        strokeWidth: strokeWidth,
      };

      const newElements = [...elements, newElement];
      setElements(newElements);
      addToHistory(newElements);
      setTextInput('');
      setTextPosition(null);
    }
  }, [textInput, textPosition, color, strokeWidth, elements, addToHistory]);

  const undo = useCallback(() => {
    if (historyIndex > 0) {
      setHistoryIndex(historyIndex - 1);
      setElements(history[historyIndex - 1]);
    }
  }, [historyIndex, history]);

  const redo = useCallback(() => {
    if (historyIndex < history.length - 1) {
      setHistoryIndex(historyIndex + 1);
      setElements(history[historyIndex + 1]);
    }
  }, [historyIndex, history]);

  const clear = useCallback(() => {
    setElements([]);
    addToHistory([]);
    setSelectedElement(null);
  }, [addToHistory]);

  const saveDrawing = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    // Конвертируем canvas в PNG
    const imageData = canvas.toDataURL('image/png');
    onSave(imageData);
    onClose();
  }, [onSave, onClose]);

  if (!isOpen) return null;

  const drawingCanvasContent = (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-[99999] p-4">
      <div className="bg-background rounded-2xl shadow-2xl w-full max-w-6xl h-full max-h-[90vh] flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-border">
          <h2 className="text-lg font-semibold">Drawing Canvas</h2>
          <Button variant="ghost" size="icon" onClick={onClose}>
            <X className="w-5 h-5" />
          </Button>
        </div>

        {/* Toolbar - профессиональная мобильная версия */}
        {isMobile ? (
          /* Мобильная версия - компактная горизонтальная панель */
          <div className="flex items-center justify-between gap-2 p-2 border-b border-border bg-muted/30">
            {/* Основные инструменты */}
            <div className="flex items-center gap-1">
              {[
                { tool: 'brush', icon: Brush },
                { tool: 'eraser', icon: Eraser },
                { tool: 'rectangle', icon: Square },
                { tool: 'circle', icon: Circle },
              ].map(({ tool: toolName, icon: Icon }) => (
                <Button
                  key={toolName}
                  variant={tool === toolName ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setTool(toolName as any)}
                  className="w-8 h-8 p-0"
                >
                  <Icon className="w-4 h-4" />
                </Button>
              ))}
            </div>

            {/* Цвет и толщина */}
            <div className="flex items-center gap-1">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowColorPalette(!showColorPalette)}
                className="w-8 h-8 p-0"
              >
                <div 
                  className="w-4 h-4 rounded border border-border"
                  style={{ backgroundColor: color }}
                />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowStrokeWidth(!showStrokeWidth)}
                className="w-8 h-8 p-0"
              >
                <div 
                  className="rounded-full bg-current"
                  style={{ 
                    width: `${Math.max(2, strokeWidth)}px`, 
                    height: `${Math.max(2, strokeWidth)}px` 
                  }}
                />
              </Button>
            </div>

            {/* Действия */}
            <div className="flex items-center gap-1">
              <Button
                variant="ghost"
                size="sm"
                onClick={undo}
                disabled={historyIndex <= 0}
                className="w-8 h-8 p-0"
              >
                <Undo className="w-4 h-4" />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowMobileTools(!showMobileTools)}
                className="w-8 h-8 p-0"
              >
                <span className="text-xs">⋯</span>
              </Button>
            </div>
          </div>
        ) : (
          /* Десктопная версия - оригинальная панель */
          <div className="flex items-center gap-2 p-4 border-b border-border flex-wrap">
            {/* Tools */}
            <div className="flex items-center gap-1 bg-muted rounded-lg p-1">
              {[
                { tool: 'brush', icon: Brush, label: 'Brush' },
                { tool: 'rectangle', icon: Square, label: 'Rectangle' },
                { tool: 'circle', icon: Circle, label: 'Circle' },
                { tool: 'text', icon: Type, label: 'Text' },
                { tool: 'eraser', icon: Eraser, label: 'Eraser' },
                { tool: 'move', icon: Move, label: 'Move' },
              ].map(({ tool: toolName, icon: Icon, label }) => (
                <Button
                  key={toolName}
                  variant={tool === toolName ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setTool(toolName as any)}
                  title={label}
                >
                  <Icon className="w-4 h-4" />
                </Button>
              ))}

              {/* Insert Image Button */}
              <Button
                variant="ghost"
                size="sm"
                onClick={() => fileInputRef.current?.click()}
                title="Insert Image"
              >
                <ImageIcon className="w-4 h-4" />
              </Button>
            </div>

            {/* Color Palette */}
            <div className="relative">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowColorPalette(!showColorPalette)}
                className="flex items-center gap-2"
              >
                <Palette className="w-4 h-4" />
                <div 
                  className="w-4 h-4 rounded border border-border"
                  style={{ backgroundColor: color }}
                />
              </Button>
              {showColorPalette && (
                <div className="absolute top-full left-0 mt-1 bg-background border border-border rounded-lg p-2 shadow-lg z-10">
                  <div className="grid grid-cols-5 gap-1">
                    {COLORS.map((c) => (
                      <button
                        key={c}
                        className={cn(
                          "w-6 h-6 rounded border-2 hover:scale-110 transition-transform",
                          color === c ? "border-primary" : "border-border"
                        )}
                        style={{ backgroundColor: c }}
                        onClick={() => {
                          setColor(c);
                          setShowColorPalette(false);
                        }}
                      />
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Stroke Width */}
            <div className="relative">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowStrokeWidth(!showStrokeWidth)}
                className="flex items-center gap-2"
              >
                <div 
                  className="rounded-full bg-current"
                  style={{ 
                    width: `${Math.max(2, strokeWidth)}px`, 
                    height: `${Math.max(2, strokeWidth)}px` 
                  }}
                />
                <span className="text-xs">{strokeWidth}px</span>
              </Button>
              {showStrokeWidth && (
                <div className="absolute top-full left-0 mt-1 bg-background border border-border rounded-lg p-2 shadow-lg z-10">
                  <div className="flex flex-col gap-1">
                    {STROKE_WIDTHS.map((width) => (
                      <button
                        key={width}
                        className={cn(
                          "flex items-center gap-2 px-2 py-1 rounded hover:bg-accent",
                          strokeWidth === width && "bg-accent"
                        )}
                        onClick={() => {
                          setStrokeWidth(width);
                          setShowStrokeWidth(false);
                        }}
                      >
                        <div 
                          className="rounded-full bg-current"
                          style={{ width: `${width}px`, height: `${width}px` }}
                        />
                        <span className="text-xs">{width}px</span>
                      </button>
                    ))}
                  </div>
                </div>
              )}
            </div>

            <div className="h-6 w-px bg-border mx-2" />

            {/* History */}
            <div className="flex items-center gap-1">
              <Button
                variant="ghost"
                size="sm"
                onClick={undo}
                disabled={historyIndex <= 0}
                title="Undo"
              >
                <Undo className="w-4 h-4" />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={redo}
                disabled={historyIndex >= history.length - 1}
                title="Redo"
              >
                <Redo className="w-4 h-4" />
              </Button>
            </div>

            <div className="h-6 w-px bg-border mx-2" />

            {/* Actions */}
            <div className="flex items-center gap-1 ml-auto">
              <Button variant="ghost" size="sm" onClick={clear}>
                Clear
              </Button>
              <Button onClick={saveDrawing} size="sm">
                <Download className="w-4 h-4 mr-2" />
                Save
              </Button>
            </div>
          </div>
        )}

        {/* Расширенная мобильная панель инструментов */}
        {isMobile && showMobileTools && (
          <div className="border-b border-border bg-muted/50 p-3">
            <div className="flex flex-wrap gap-2 justify-center">
              {/* Дополнительные инструменты */}
              <Button
                variant={tool === 'text' ? "default" : "ghost"}
                size="sm"
                onClick={() => setTool('text')}
                className="w-auto px-3"
              >
                <Type className="w-4 h-4 mr-1" />
                Text
              </Button>
              <Button
                variant={tool === 'move' ? "default" : "ghost"}
                size="sm"
                onClick={() => setTool('move')}
                className="w-auto px-3"
              >
                <Move className="w-4 h-4 mr-1" />
                Move
              </Button>
              
              {/* История */}
              <Button
                variant="ghost"
                size="sm"
                onClick={redo}
                disabled={historyIndex >= history.length - 1}
                className="w-auto px-3"
              >
                <Redo className="w-4 h-4 mr-1" />
                Redo
              </Button>
              
              {/* Очистить */}
              <Button
                variant="ghost"
                size="sm"
                onClick={clear}
                className="w-auto px-3"
              >
                Clear
              </Button>
              
              {/* Сохранить */}
              <Button
                onClick={saveDrawing}
                size="sm"
                className="w-auto px-3"
                variant="default"
              >
                <Download className="w-4 h-4 mr-1" />
                Save
              </Button>

              {/* Вставить изображение */}
              <Button
                variant="ghost"
                size="sm"
                onClick={() => fileInputRef.current?.click()}
                className="w-auto px-3"
              >
                <ImageIcon className="w-4 h-4 mr-1" />
                Image
              </Button>
            </div>
          </div>
        )}

        {/* Палитра цветов для мобильных */}
        {isMobile && showColorPalette && (
          <div className="border-b border-border bg-background p-3">
            <div className="grid grid-cols-8 gap-2 max-w-sm mx-auto">
              {COLORS.map((c) => (
                <button
                  key={c}
                  className={cn(
                    "w-10 h-10 rounded border-2 hover:scale-105 transition-transform",
                    color === c ? "border-primary border-4" : "border-border"
                  )}
                  style={{ backgroundColor: c }}
                  onClick={() => {
                    setColor(c);
                    setShowColorPalette(false);
                  }}
                />
              ))}
            </div>
          </div>
        )}

        {/* Толщина штриха для мобильных */}
        {isMobile && showStrokeWidth && (
          <div className="border-b border-border bg-background p-3">
            <div className="flex flex-wrap gap-2 justify-center">
              {STROKE_WIDTHS.map((width) => (
                <button
                  key={width}
                  className={cn(
                    "flex items-center gap-2 px-4 py-3 rounded-lg border-2 hover:bg-accent transition-colors",
                    strokeWidth === width ? "border-primary bg-accent" : "border-border"
                  )}
                  onClick={() => {
                    setStrokeWidth(width);
                    setShowStrokeWidth(false);
                  }}
                >
                  <div 
                    className="rounded-full bg-current"
                    style={{ width: `${width}px`, height: `${width}px` }}
                  />
                  <span className="text-sm font-medium">{width}px</span>
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Canvas Area */}
        <div className="flex-1 flex items-center justify-center p-4 overflow-auto">
          <div className="relative">
            <canvas
              ref={canvasRef}
              width={canvasSize.width}
              height={canvasSize.height}
              className="border border-border rounded-lg shadow-sm cursor-crosshair bg-white max-w-full max-h-full"
              style={{
                width: `${canvasSize.width}px`,
                height: `${canvasSize.height}px`,
                touchAction: 'none' // Предотвращаем скролл на мобильных при рисовании
              }}
              onMouseDown={(e) => startDrawing(e.nativeEvent)}
              onMouseMove={(e) => draw(e.nativeEvent)}
              onMouseUp={stopDrawing}
              onMouseLeave={stopDrawing}
              onTouchStart={(e) => startDrawing(e.nativeEvent)}
              onTouchMove={(e) => draw(e.nativeEvent)}
              onTouchEnd={stopDrawing}
            />
            
            {/* Hidden file input for image insertion */}
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              className="hidden"
              onChange={handleFileInputChange}
            />
            
            {/* Text Input Overlay */}
            {textPosition && (
              <div 
                className="absolute bg-background border border-border rounded px-2 py-1 shadow-lg"
                style={{ 
                  left: textPosition.x, 
                  top: textPosition.y - 40,
                  zIndex: 10 
                }}
              >
                <input
                  type="text"
                  value={textInput}
                  onChange={(e) => setTextInput(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleTextSubmit();
                    } else if (e.key === 'Escape') {
                      setTextPosition(null);
                      setTextInput('');
                    }
                  }}
                  placeholder="Enter text..."
                  className="text-sm bg-transparent border-none outline-none min-w-[100px]"
                  autoFocus
                />
                <div className="flex gap-1 mt-1">
                  <Button size="sm" variant="ghost" onClick={handleTextSubmit}>
                    ✓
                  </Button>
                  <Button 
                    size="sm" 
                    variant="ghost" 
                    onClick={() => {
                      setTextPosition(null);
                      setTextInput('');
                    }}
                  >
                    ✕
                  </Button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );

  // Используем портал для рендера поверх всего приложения
  return typeof window !== 'undefined' 
    ? createPortal(drawingCanvasContent, document.body)
    : null;
} 

--- FILE: ./frontend/components/ChatHistoryList.tsx ---
"use client";

import React, {
  useState,
  useMemo,
  useCallback,
  memo,
  useDeferredValue,
  useRef,
} from "react";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Tooltip, TooltipContent, TooltipTrigger } from "./ui/tooltip";
import { useRouter, useParams } from "next/navigation";
import {
  X,
  Pin,
  PinOff,
  Search,
  Edit2,
  Share2,
  Check,
  GitBranch,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { useIsMobile } from "@/frontend/hooks/useIsMobile";
import { useQuery, useMutation, useConvexAuth } from "convex/react";
import { api } from "@/convex/_generated/api";
import type { Doc, Id } from "@/convex/_generated/dataModel";
import { useDebounce } from "use-debounce";

type Thread = Doc<"threads">;

interface ThreadGroup {
  title: string;
  threads: Thread[];
}

interface ChatHistoryListProps {
  onSelectThread?: (threadId: Id<"threads">) => void;
  onNewChat?: () => void;
  onShare?: (thread: Thread) => void;
  showSearch?: boolean;
  className?: string;
}

// Helper function to get time period for grouping
const getTimePeriod = (date: Date): string => {
  const now = new Date();
  const diffTime = now.getTime() - date.getTime();
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
  
  if (diffDays === 0) return "Today";
  if (diffDays === 1) return "Yesterday"; 
  if (diffDays <= 7) return "Last Week";
  if (diffDays <= 30) return "Last Month";
  if (diffDays <= 365) return "Last Year";
  return "Older";
};

// Group threads by time period
const groupThreadsByTime = (threads: Thread[]): ThreadGroup[] => {
  const pinned = threads.filter(t => t.pinned);
  const unpinned = threads.filter(t => !t.pinned);
  
  const groups: ThreadGroup[] = [];
  
  // Add pinned group if there are pinned threads
  if (pinned.length > 0) {
    groups.push({ title: "Pinned", threads: pinned });
  }
  
  // Group unpinned threads by time
  const timeGroups: Record<string, Thread[]> = {};
  
  unpinned.forEach(thread => {
    const period = getTimePeriod(new Date(thread._creationTime));
    if (!timeGroups[period]) {
      timeGroups[period] = [];
    }
    timeGroups[period].push(thread);
  });
  
  // Add time groups in order
  const timeOrder = ["Today", "Yesterday", "Last Week", "Last Month", "Last Year", "Older"];
  timeOrder.forEach(period => {
    if (timeGroups[period] && timeGroups[period].length > 0) {
      groups.push({ title: period, threads: timeGroups[period] });
    }
  });
  
  return groups;
};

function ChatHistoryList({
  onSelectThread,
  onNewChat,
  onShare,
  showSearch = true,
  className,
}: ChatHistoryListProps) {
  const [rawQuery, setRawQuery] = useState("");
  const searchQuery = useDeferredValue(rawQuery);
  const [editingThreadId, setEditingThreadId] = useState<Id<"threads"> | null>(null);
  const [editingTitle, setEditingTitle] = useState("");
  const [deletingThreadId, setDeletingThreadId] = useState<Id<"threads"> | null>(null);
  const [hoveredThreadId, setHoveredThreadId] = useState<Id<"threads"> | null>(null);
  const [longPressThreadId, setLongPressThreadId] = useState<Id<"threads"> | null>(null);
  const [selectedThreadIndex, setSelectedThreadIndex] = useState<number>(-1);
  const [mobileMenuThreadId, setMobileMenuThreadId] = useState<Id<"threads"> | null>(null);
  const itemRefs = useRef<Map<number, HTMLDivElement | null>>(new Map());

  const { isMobile, mounted } = useIsMobile(600);
  const { id } = useParams();
  const router = useRouter();
  const { isAuthenticated } = useConvexAuth();

  // Debounce hovered id to avoid spamming preview requests
  const [debouncedHoverId] = useDebounce(hoveredThreadId, 300);

  const trimmedQuery = searchQuery.trim();
  const threads = useQuery(
    api.threads.list,
    isAuthenticated ? (trimmedQuery ? { searchQuery: trimmedQuery } : {}) : "skip",
  );
  const removeThread = useMutation(api.threads.remove);
  const renameThread = useMutation(api.threads.rename);
  const togglePin = useMutation(api.threads.togglePin);

  // ---------------- Memoized, grouped & sorted thread lists ----------
  const threadGroups = useMemo(() => {
    if (!threads) return [] as ThreadGroup[];
    return groupThreadsByTime(threads);
  }, [threads]);

  const handleThreadClick = useCallback(
    (threadId: Id<"threads">) => {
      if (onSelectThread) {
        onSelectThread(threadId);
      } else {
        // Default behavior: navigate to chat
        if (id === threadId) return;
        router.push(`/chat/${threadId}`);
      }
      setLongPressThreadId(null);
    },
    [id, router, onSelectThread],
  );

  const handleEdit = useCallback((thread: Thread) => {
    setEditingThreadId(thread._id);
    setEditingTitle(thread.title);
    setLongPressThreadId(null);
  }, []);

  const handleSaveEdit = useCallback(
    async (threadId: Id<"threads">) => {
      await renameThread({ threadId, title: editingTitle });
      setEditingThreadId(null);
      setEditingTitle("");
      setLongPressThreadId(null);
    },
    [editingTitle, renameThread],
  );

  const handleCancelEdit = useCallback(() => {
    setEditingThreadId(null);
    setEditingTitle("");
    setLongPressThreadId(null);
  }, []);

  const handleDelete = useCallback((threadId: Id<"threads">) => {
    setDeletingThreadId(threadId);
    setLongPressThreadId(null);
  }, []);

  const handleConfirmDelete = useCallback(
    async (threadId: Id<"threads">) => {
      await removeThread({ threadId });
      if (id === threadId) {
        router.push("/chat");
      }
      setDeletingThreadId(null);
      setLongPressThreadId(null);
    },
    [id, router, removeThread],
  );

  const handleCancelDelete = useCallback(() => {
    setDeletingThreadId(null);
    setLongPressThreadId(null);
  }, []);

  const handlePinToggle = useCallback(
    async (threadId: Id<"threads">, e: React.MouseEvent) => {
      e.preventDefault();
      e.stopPropagation();
      // Find the thread to get current pinned state
      const thread = threads?.find(t => t._id === threadId);
      if (thread) {
        await togglePin({ threadId, pinned: !thread.pinned });
      }
      setLongPressThreadId(null);
    },
    [togglePin, threads],
  );

  const handleShare = useCallback(
    (thread: Thread) => {
      if (onShare) {
        onShare(thread);
      }
      setLongPressThreadId(null);
    },
    [onShare],
  );

  // ---------------------- Render thread item -----------------------
  const renderThreadItem = useCallback(
    (thread: Thread, threadIndex: number) => (
      <div
        key={thread._id}
        data-thread-index={threadIndex}
        ref={(node) => {
          if (node) itemRefs.current.set(threadIndex, node);
          else itemRefs.current.delete(threadIndex);
        }}
        onMouseEnter={() => {
          setHoveredThreadId(thread._id);
          if (!isMobile) {
            setSelectedThreadIndex(threadIndex);
          }
          // Сбрасываем состояние удаления при наведении на другой элемент
          if (deletingThreadId && deletingThreadId !== thread._id) {
            setDeletingThreadId(null);
          }
        }}
        onMouseLeave={() => {
          setHoveredThreadId(null);
          setLongPressThreadId(null);
          if (isMobile) {
            setMobileMenuThreadId(null);
          }
        }}
        onContextMenu={(e) => {
          if (isMobile) {
            e.preventDefault();
            setLongPressThreadId(thread._id);
            setMobileMenuThreadId(thread._id);
          }
        }}
        onTouchStart={(e) => {
          if (isMobile) {
            const touchStartTime = Date.now();
            const touchTimer = setTimeout(() => {
              setLongPressThreadId(thread._id);
              setMobileMenuThreadId(thread._id);
            }, 500);
            
            const handleTouchEnd = () => {
              clearTimeout(touchTimer);
              if (Date.now() - touchStartTime < 500) {
                setMobileMenuThreadId(null);
              }
            };
            
            e.currentTarget.addEventListener('touchend', handleTouchEnd, { once: true });
          }
        }}
        onClick={() => {
          // Не переходим в чат если редактируем заголовок
          if (!editingThreadId) {
            handleThreadClick(thread._id);
          }
        }}
        onDoubleClick={(e) => {
          e.preventDefault();
          e.stopPropagation();
          if (!isMobile) {
            handleEdit(thread);
          }
        }}
        className={cn(
          "group flex items-center justify-between rounded-lg px-2 py-1.5 cursor-pointer",
          id === thread._id
            ? "bg-primary/10 border border-primary/20" 
            : (!isMobile && threadIndex === selectedThreadIndex)
            ? "bg-accent"
            : "hover:bg-accent",
        )}
      >
        {/* Left side */}
        <div className="flex-1 min-w-0 pr-2">
          <div className="flex items-center gap-2">
            {thread.pinned && <Pin className="h-3 w-3 text-primary shrink-0" />}
            {thread.clonedFrom && <GitBranch className="h-3 w-3 text-primary shrink-0" />}
            {editingThreadId === thread._id ? (
              <div className="flex items-center gap-2 w-full">
                <Input
                  value={editingTitle}
                  onChange={(e) => setEditingTitle(e.target.value)}
                  className="h-6 text-sm flex-1"
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      handleSaveEdit(thread._id);
                    } else if (e.key === "Escape") {
                      handleCancelEdit();
                    }
                  }}
                  autoFocus
                />
                <Button
                  size="icon"
                  variant="ghost"
                  className="h-6 w-6"
                  onClick={() => handleSaveEdit(thread._id)}
                >
                  <Check className="size-3" />
                </Button>
                <Button
                  size="icon"
                  variant="ghost"
                  className="h-6 w-6"
                  onClick={handleCancelEdit}
                >
                  <X className="size-3" />
                </Button>
              </div>
            ) : (
              <span className="line-clamp-1 text-sm font-medium">{thread.title}</span>
            )}
          </div>
        </div>
        {/* Right side buttons */}
        <div
          className={cn(
            "flex gap-0.5 sm:gap-1 shrink-0",
            isMobile
              ? longPressThreadId === thread._id ? "opacity-100" : "opacity-0"
              : longPressThreadId === thread._id ? "opacity-100" : "opacity-0 group-hover:opacity-100",
          )}
        >
          {!editingThreadId && (
            <>
              {/* Mobile action menu */}
              {isMobile && mobileMenuThreadId === thread._id && (
                <div
                  id={`mobile-menu-${thread._id}`}
                  className="absolute right-2 top-0 bottom-0 flex items-center bg-background shadow-lg rounded-lg p-1 z-10"
                >
                  <Button
                    size="sm"
                    variant="ghost"
                    className="h-8 w-8 p-0"
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      handlePinToggle(thread._id, e);
                      setMobileMenuThreadId(null);
                    }}
                  >
                    {thread.pinned ? (
                      <PinOff className="size-4" />
                    ) : (
                      <Pin className="size-4" />
                    )}
                  </Button>
                  {onShare && (
                    <Button
                      size="sm"
                      variant="ghost"
                      className="h-8 w-8 p-0"
                      onClick={(e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        handleShare(thread);
                        setMobileMenuThreadId(null);
                      }}
                    >
                      <Share2 className="size-4" />
                    </Button>
                  )}
                  <Button
                    size="sm"
                    variant="ghost"
                    className="h-8 w-8 p-0"
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      handleDelete(thread._id);
                      setMobileMenuThreadId(null);
                    }}
                  >
                    <X className="size-4" />
                  </Button>
                </div>
              )}
              {deletingThreadId === thread._id ? (
                <>
                  <Button
                    size="sm"
                    variant="destructive"
                    className="h-6 px-2 text-xs"
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      handleConfirmDelete(thread._id);
                    }}
                  >
                    Delete
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    className="h-6 px-2 text-xs"
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      handleCancelDelete();
                    }}
                  >
                    Cancel
                  </Button>
                </>
              ) : (
                <>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        size="icon"
                        variant="ghost"
                        className={cn("h-6 w-6 sm:h-7 sm:w-7", isMobile && "h-8 w-8")}
                        onClick={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          handleEdit(thread);
                        }}
                      >
                        <Edit2 className={cn("size-2.5 sm:size-3", isMobile && "size-3.5")}></Edit2>
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>Edit</TooltipContent>
                  </Tooltip>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        size="icon"
                        variant="ghost"
                        className={cn("h-6 w-6 sm:h-7 sm:w-7", isMobile && "h-8 w-8")}
                        onClick={(e) => handlePinToggle(thread._id, e)}
                      >
                        {thread.pinned ? (
                          <PinOff className={cn("size-2.5 sm:size-3", isMobile && "size-3.5")} />
                        ) : (
                          <Pin className={cn("size-2.5 sm:size-3", isMobile && "size-3.5")} />
                        )}
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>{thread.pinned ? "Unpin" : "Pin"}</TooltipContent>
                  </Tooltip>
                  {onShare && (
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          size="icon"
                          variant="ghost"
                          className={cn("h-6 w-6 sm:h-7 sm:w-7", isMobile && "h-8 w-8")}
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            handleShare(thread);
                          }}
                        >
                          <Share2 className={cn("size-2.5 sm:size-3", isMobile && "size-3.5")} />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>Share</TooltipContent>
                    </Tooltip>
                  )}
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        size="icon"
                        variant="ghost"
                        className={cn("h-6 w-6 sm:h-7 sm:w-7", isMobile && "h-8 w-8")}
                        onClick={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          handleDelete(thread._id);
                        }}
                      >
                        <X className={cn("size-2.5 sm:size-3", isMobile && "size-3.5")} />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>Delete</TooltipContent>
                  </Tooltip>
                </>
              )}
            </>
          )}
        </div>
      </div>
    ),
    [
      isMobile,
      id,
      editingThreadId,
      editingTitle,
      deletingThreadId,
      longPressThreadId,
      mobileMenuThreadId,
      selectedThreadIndex,
      handleThreadClick,
      handleEdit,
      handleSaveEdit,
      handleCancelEdit,
      handleDelete,
      handleConfirmDelete,
      handleCancelDelete,
      handlePinToggle,
      handleShare,
      onShare,
    ],
  );

  if (!mounted) return null; // SSR guard

  return (
    <div className={cn("flex h-full flex-col", className)}>
      {/* Search header */}
      {showSearch && (
        <div className="p-4 border-b border-border/50">
          <div className="relative">
            <Input
              placeholder="Search…"
              className="rounded-lg py-1.5 pl-8 text-sm w-full"
              value={rawQuery}
              onChange={(e) => setRawQuery(e.target.value)}
            />
            <Search className="absolute left-2.5 top-1/2 -translate-y-1/2 text-muted-foreground size-3.5" />
          </div>
        </div>
      )}

      {/* Thread list */}
      <div className="flex-1 overflow-y-auto scrollbar-none enhanced-scroll px-3 sm:px-4">
        <div className="space-y-4 sm:space-y-6 pt-2 pb-8">
          {threadGroups.length === 0 ? (
            <div className="text-center text-sm text-muted-foreground py-4">
              {searchQuery ? "No chats found." : "No chat history found."}
            </div>
          ) : (
            threadGroups.map((group, groupIndex) => {
              let currentThreadIndex = 0;
              // Calculate the starting index for this group
              for (let i = 0; i < groupIndex; i++) {
                currentThreadIndex += threadGroups[i].threads.length;
              }
              
              return (
                <div key={group.title} className="space-y-2">
                  <h3 className="text-xs font-medium text-muted-foreground uppercase tracking-wider px-2 py-1">
                    {group.title}
                  </h3>
                  <div className="space-y-1">
                    {group.threads.map((thread, idx) => 
                      renderThreadItem(thread, currentThreadIndex + idx)
                    )}
                  </div>
                </div>
              );
            })
          )}
        </div>
      </div>
    </div>
  );
}

export default memo(ChatHistoryList); 

--- FILE: ./frontend/components/WithTooltip.tsx ---
import { Tooltip, TooltipContent, TooltipTrigger } from './ui/tooltip';
import React from 'react';

interface WithTooltipProps {
  label: string;
  children: React.ReactElement;
  side?: React.ComponentProps<typeof TooltipContent>['side'];
}

export function WithTooltip({ label, children, side = 'top' }: WithTooltipProps) {
  return (
    <Tooltip>
      <TooltipTrigger asChild>{children}</TooltipTrigger>
      <TooltipContent side={side}>{label}</TooltipContent>
    </Tooltip>
  );
}


--- FILE: ./frontend/components/MessageReasoning.tsx ---
"use client"

import { Maximize2, Minimize2 } from "lucide-react"
import { useState, useEffect, useRef } from "react"
import { cn } from "@/lib/utils"

interface MessageReasoningProps {
  reasoning: string
  id: string
  isComplete?: boolean
}

export default function MessageReasoning({ reasoning, id, isComplete = false }: MessageReasoningProps) {
  const [isExpanded, setIsExpanded] = useState(false)
  const contentRef = useRef<HTMLDivElement>(null)

  // Автопрокрутка в режиме предпросмотра
  useEffect(() => {
    if (!isExpanded && contentRef.current) {
      const element = contentRef.current
      element.scrollTop = element.scrollHeight
    }
  }, [reasoning, isExpanded])

  if (!reasoning.trim()) return null

  return (
    <div className="w-full my-4 bg-background dark:bg-muted/20 rounded-2xl border border-border/40 dark:border-border/60 shadow-sm overflow-hidden">
      {/* Header - sticky в развернутом режиме */}
      <div className={cn(
        "flex items-center justify-between px-6 py-3 border-b border-border/40 bg-muted/80 dark:bg-muted/60 backdrop-blur-sm",
        isExpanded && "sticky top-0 z-10"
      )}>
        <div className="flex items-center gap-3">
          <h2 className="text-lg font-medium text-foreground">
            {!isComplete ? (
              <span className="shine-text font-semibold">Thinking</span>
            ) : (
              <span className="text-foreground">Reasoned</span>
            )}
          </h2>
        </div>

        <button
          onClick={() => setIsExpanded(!isExpanded)}
          className="hover:bg-accent/20 p-2 rounded-lg transition-colors"
        >
          {isExpanded ? (
            <Minimize2 className="w-5 h-5 text-muted-foreground" />
          ) : (
            <Maximize2 className="w-5 h-5 text-muted-foreground" />
          )}
        </button>
      </div>

      {/* Content */}
      <div className="relative">
        <div
          ref={contentRef}
          className={cn(
            "px-6 text-sm leading-relaxed text-foreground/90 whitespace-pre-wrap",
            !isExpanded
              ? "py-4 h-48 overflow-y-auto"
              : "pt-2 pb-3 overflow-y-visible"
          )}
          style={!isExpanded ? {
            scrollbarWidth: 'none',
            msOverflowStyle: 'none'
          } : {}}
        >
          {!isExpanded && (
            <style jsx>{`
              div::-webkit-scrollbar {
                display: none;
              }
            `}</style>
          )}
          
          {reasoning}
          {!isComplete && (
            <span className="animate-pulse text-primary font-bold ml-1">|</span>
          )}
        </div>

        {/* Gradient fade overlays только в режиме предпросмотра */}
        {!isExpanded && (
          <>
            {/* Top fade */}
            <div className="absolute top-0 left-0 right-0 h-12 bg-gradient-to-b from-background via-background/80 to-transparent pointer-events-none" />
            {/* Bottom fade */}
            <div className="absolute bottom-0 left-0 right-0 h-12 bg-gradient-to-t from-background via-background/80 to-transparent pointer-events-none" />
          </>
        )}

        {/* Top fade для развернутого режима */}
        {isExpanded && (
          <div className="absolute top-0 left-0 right-0 h-8 bg-gradient-to-b from-background via-background/60 to-transparent pointer-events-none z-5" />
        )}
      </div>
    </div>
  )
}


--- FILE: ./frontend/components/SelectableText.tsx ---
import { memo, useCallback, useRef } from 'react';
import { useTextSelection } from '@/frontend/hooks/useTextSelection';
import { useQuoteStore } from '@/frontend/stores/QuoteStore';
import QuoteButton from './QuoteButton';
import { v4 as uuidv4 } from 'uuid';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';

interface SelectableTextProps {
  children: React.ReactNode;
  messageId: string;
  className?: string;
  disabled?: boolean;
}

function PureSelectableText({ 
  children, 
  messageId, 
  className, 
  disabled = false 
}: SelectableTextProps) {
  const containerRef = useRef<HTMLDivElement>(null);
  const { selection, clearSelection } = useTextSelection();
  const { setQuote } = useQuoteStore();
  const { isMobile } = useIsMobile();

  const handleQuote = useCallback(() => {
    if (!selection?.text) return;

    const quote = {
      id: uuidv4(),
      text: selection.text,
      messageId,
      createdAt: new Date(),
    };

    setQuote(quote);
    clearSelection();
  }, [selection, messageId, setQuote, clearSelection]);

  // Проверяем, что выделение находится внутри нашего контейнера
  const isSelectionInContainer = useCallback(() => {
    if (!selection?.range || !containerRef.current) return false;
    
    return containerRef.current.contains(selection.range.commonAncestorContainer);
  }, [selection]);

  const shouldShowQuoteButton = 
    !disabled && 
    selection && 
    selection.text.length > 0 && 
    selection.rect && 
    isSelectionInContainer();

  return (
    <div ref={containerRef} className={className}>
      {children}
      
      {shouldShowQuoteButton && (
        <QuoteButton
          onQuote={handleQuote}
          position={(function() {
            const { left, top, width, bottom } = selection.rect!;
            const buttonHeight = 32; // приблизительная высота кнопки
            const buttonWidth = 80; // приблизительная ширина кнопки

            let posX = left + width / 2 - buttonWidth / 2;
            
            // Горизонтальное ограничение с учетом мобильных устройств
            const margin = isMobile ? 16 : 8;
            posX = Math.max(margin, Math.min(posX, window.innerWidth - buttonWidth - margin));

            // Вертикальное позиционирование
            let posY = top - buttonHeight - 8;
            
            // Если не помещается сверху, показываем снизу
            if (posY < margin) {
              posY = bottom + 8;
            }
            
            // Последняя проверка для нижнего края
            posY = Math.min(posY, window.innerHeight - buttonHeight - margin);

            // На мобильных устройствах добавляем дополнительный отступ снизу
            if (isMobile && posY > window.innerHeight - buttonHeight - 60) {
              posY = top - buttonHeight - 8;
            }

            return { x: posX, y: posY };
          })()}
        />
      )}
    </div>
  );
}

const SelectableText = memo(PureSelectableText);
SelectableText.displayName = 'SelectableText';

export default SelectableText; 

--- FILE: ./frontend/components/QuoteButton.tsx ---
import { memo } from 'react';
import { Quote as QuoteIcon } from 'lucide-react';
import { Button } from './ui/button';
import { cn } from '@/lib/utils';

interface QuoteButtonProps {
  onQuote: () => void;
  position: { x: number; y: number };
  className?: string;
}

function PureQuoteButton({ onQuote, position, className }: QuoteButtonProps) {
  return (
    <div
      className={cn(
        'fixed animate-in fade-in-0 zoom-in-95 duration-200',
        className
      )}
      style={{
        left: position.x,
        top: position.y,
        zIndex: 9999,
      }}
    >
      <Button
        size="sm"
        onClick={onQuote}
        className="shadow-lg border border-border/50 bg-popover text-popover-foreground hover:bg-accent hover:text-accent-foreground transition-all duration-200 hover:scale-105"
      >
        <QuoteIcon className="w-4 h-4" />
        Quote
      </Button>
    </div>
  );
}

const QuoteButton = memo(PureQuoteButton);
QuoteButton.displayName = 'QuoteButton';

export default QuoteButton; 

--- FILE: ./frontend/components/MessageEditor.tsx ---
// Dexie imports removed; operations will be handled via Convex
import { UseChatHelpers, useCompletion } from '@ai-sdk/react';
import { useState } from 'react';
import { UIMessage } from 'ai';
import { Dispatch, SetStateAction } from 'react';
import { Textarea } from './ui/textarea';
import { Button } from './ui/button';
import { useAPIKeyStore } from '@/frontend/stores/APIKeyStore';
import { useModelStore } from '@/frontend/stores/ModelStore';
import { toast } from 'sonner';
import { useMutation } from 'convex/react';
import { api } from '@/convex/_generated/api';
import type { Id } from '@/convex/_generated/dataModel';
import { isConvexId } from '@/lib/ids';
import { useSettingsStore } from '@/frontend/stores/SettingsStore';

export default function MessageEditor({
  threadId,
  message,
  content,
  setMessages,
  reload,
  setMode,
  stop,
}: {
  threadId: string;
  message: UIMessage;
  content: string;
  setMessages: UseChatHelpers['setMessages'];
  setMode: Dispatch<SetStateAction<'view' | 'edit'>>;
  reload: UseChatHelpers['reload'];
  stop: UseChatHelpers['stop'];
}) {
  const [draftContent, setDraftContent] = useState(content);
  const { keys } = useAPIKeyStore();
  const { selectedModel } = useModelStore();
  const { settings } = useSettingsStore();

  const { complete } = useCompletion({
    api: '/api/completion',
    ...(keys.google && {
      headers: { 'X-Google-API-Key': keys.google },
    }),
    onResponse: async (response) => {
      try {
        const payload = await response.json();

        if (response.ok) {
          const { title } = payload;
          // TODO: save summary via Convex
        } else {
          toast.error(
            payload.error || 'Failed to generate a summary for the message'
          );
        }
      } catch {
        /* ignore errors */
      }
    },
  });

  const removeAfter = useMutation(api.messages.removeAfter);
  const editMessage = useMutation(api.messages.edit);
  const createSnapshot = useMutation(api.messages.createDialogSnapshot);
  const sendMessage = useMutation(api.messages.send);

  const handleSave = async () => {
    if (!isConvexId(threadId)) return;
    
    // Only handle messages with valid Convex IDs to avoid validation errors
    if (!isConvexId(message.id)) {
      console.warn('Cannot edit message with non-Convex ID:', message.id);
      toast.error('Cannot edit this message');
      return;
    }

    try {
      // Create a new dialog version for the edit
      const { dialogVersion: nextVersion } = await createSnapshot({
        threadId: threadId as Id<'threads'>,
      });

      // Remove messages after the current one in the new version
      await removeAfter({
        threadId: threadId as Id<'threads'>,
        afterMessageId: message.id as Id<'messages'>,
      });

      // Create new message with edited content in the new version
      const newMessageId = await sendMessage({
        threadId: threadId as Id<'threads'>,
        content: draftContent,
        role: 'user',
        dialogVersion: nextVersion,
        isActive: true,
      });

      const updatedMessage = {
        ...message,
        id: newMessageId,
        content: draftContent,
        parts: [
          {
            type: 'text' as const,
            text: draftContent,
          },
        ],
        createdAt: new Date(),
      };

      setMessages((messages) => {
        const index = messages.findIndex((m) => m.id === message.id);
        if (index !== -1) {
          return [...messages.slice(0, index), updatedMessage];
        }
        return messages;
      });

      complete(draftContent, {
        body: {
          messageId: newMessageId,
          threadId,
        },
      });
      setMode('view');

      // stop the current stream if any
      stop();

      reload({
        body: {
          apiKeys: keys,
          model: selectedModel,
          threadId,
        },
      });
    } catch (error) {
      console.error('Error during message edit:', error);
      toast.error('Failed to save changes');
    }
  };

  return (
    <div>
      <Textarea
        value={draftContent}
        onChange={(e) => setDraftContent(e.target.value)}
        onKeyDown={(e) => {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSave();
          }
        }}
      />
      <div className="flex gap-2 mt-2">
        <Button onClick={handleSave}>Save</Button>
        <Button onClick={() => setMode('view')}>Cancel</Button>
      </div>
    </div>
  );
}


--- FILE: ./frontend/components/Error.tsx ---
import { CircleAlert } from 'lucide-react';

export default function Error({ message }: { message: string }) {
  return (
    <div className="rounded-md border border-red-500/50 px-4 py-3 text-red-600 flex items-center gap-4">
      <CircleAlert size={24} aria-hidden="true" />
      <p className="text-sm">{message}</p>
    </div>
  );
}


--- FILE: ./frontend/components/QuotedMessage.tsx ---
import { memo } from 'react';
import { cn } from '@/lib/utils';

interface QuotedMessageProps {
  content: string;
  className?: string;
}

function PureQuotedMessage({ content, className }: QuotedMessageProps) {
  // Разделяем сообщение на цитату и основной текст
  const lines = content.split('\n');
  const quoteLines: string[] = [];
  const messageLines: string[] = [];
  
  let isQuote = false;
  let foundEmptyLine = false;

  for (const line of lines) {
    if (line.startsWith('> ')) {
      isQuote = true;
      quoteLines.push(line.substring(2)); // Убираем "> "
    } else if (isQuote && line.trim() === '') {
      foundEmptyLine = true;
    } else if (foundEmptyLine || !isQuote) {
      messageLines.push(line);
    }
  }

  const hasQuote = quoteLines.length > 0;
  const quoteText = quoteLines.join('\n');
  const messageText = messageLines.join('\n').trim();

  if (!hasQuote) {
    return <p className={className}>{content}</p>;
  }

  return (
    <div className={cn('space-y-3', className)}>
      {/* Цитата */}
      <div className={cn(
        'relative bg-accent/20 border-l-4 border-accent-foreground/50 rounded-r-lg p-3 ml-2',
        'before:content-["""] before:absolute before:-left-1 before:top-0 before:text-lg before:text-muted-foreground/60 before:font-serif',
        'after:content-["""] after:absolute after:right-1 after:bottom-0 after:text-lg after:text-muted-foreground/60 after:font-serif'
      )}>
        <div className="text-sm text-foreground/70 italic pl-2 pr-2 whitespace-pre-wrap leading-relaxed">
          {quoteText}
        </div>
      </div>
      
      {/* Основное сообщение */}
      {messageText && (
        <div className="text-foreground whitespace-pre-wrap leading-relaxed">
          {messageText}
        </div>
      )}
    </div>
  );
}

const QuotedMessage = memo(PureQuotedMessage);
QuotedMessage.displayName = 'QuotedMessage';

export default QuotedMessage; 

--- FILE: ./frontend/components/SettingsButton.tsx ---
"use client"

import { useState, useCallback, memo } from 'react';
import { Button } from './ui/button';
import { Settings } from 'lucide-react';
import { WithTooltip } from './WithTooltip';
import SettingsDrawer from './SettingsDrawer';
import { cn } from '@/lib/utils';

interface SettingsButtonProps {
  className?: string;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
  size?: "default" | "sm" | "lg" | "icon";
}

const SettingsButton = memo(({ 
  className, 
  variant = "outline", 
  size = "icon" 
}: SettingsButtonProps) => {
  const [isOpen, setIsOpen] = useState(false);

  const handleOpenSettings = useCallback(() => {
    setIsOpen(true);
  }, []);

  return (
    <SettingsDrawer isOpen={isOpen} setIsOpen={setIsOpen}>
      <WithTooltip label="Settings" side="bottom">
        <Button
          variant={variant}
          size={size}
          className={cn('bg-background/80 backdrop-blur-sm border-border/50', className)}
          aria-label="Open settings"
          onClick={handleOpenSettings}
        >
          <Settings className="h-5 w-5" />
        </Button>
      </WithTooltip>
    </SettingsDrawer>
  );
});

SettingsButton.displayName = 'SettingsButton';

export default SettingsButton; 

--- FILE: ./frontend/components/Message.tsx ---
import { memo, useState, useEffect, useMemo } from 'react';
import MarkdownRenderer from '@/frontend/components/MemoizedMarkdown';
import { cn } from '@/lib/utils';
import { UIMessage } from 'ai';
import MessageControls from './MessageControls';
import { UseChatHelpers } from '@ai-sdk/react';
import dynamic from 'next/dynamic';
const MessageEditor = dynamic(() => import('./MessageEditor'), { ssr: false, loading: () => null });
import ErrorBoundary from './ErrorBoundary';
import MessageReasoning from './MessageReasoning';
import SelectableText from './SelectableText';
import QuotedMessage from './QuotedMessage';
import ImageModal from './ImageModal';
import { Input } from '@/frontend/components/ui/input';
import { Button } from '@/frontend/components/ui/button';
import { Label } from '@/components/ui/label';
import { useAPIKeyStore, type APIKeys } from '@/frontend/stores/APIKeyStore';
import { toast } from 'sonner';
import { useRouter } from 'next/navigation';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';
import { SearchIcon } from 'lucide-react';

function PureMessage({
  threadId,
  message,
  setMessages,
  messages,
  reload,
  append,
  isStreaming,
  stop,
}: {
  threadId: string;
  message: UIMessage;
  setMessages: UseChatHelpers['setMessages'];
  messages: UIMessage[];
  reload: UseChatHelpers['reload'];
  append: UseChatHelpers['append'];
  isStreaming: boolean;
  stop: UseChatHelpers['stop'];
}) {
  const [mode, setMode] = useState<'view' | 'edit'>('view');
  const [mobileControlsVisible, setMobileControlsVisible] = useState(false);
  const isWelcome = message.id === 'welcome';
  const attachments = (message as any).attachments as { id: string; url: string; name: string; type: string; ext?: string; size?: number }[] | undefined;
  const [lightbox, setLightbox] = useState<{
    url: string;
    name: string;
    type: string;
    size?: number;
  } | null>(null);
  const { keys, setKeys } = useAPIKeyStore();
  const [localKeys, setLocalKeys] = useState<APIKeys>(keys);
  const { isMobile } = useIsMobile();
  
  useEffect(() => { setLocalKeys(keys); }, [keys]);
  
  const saveKeys = () => { setKeys(localKeys); toast.success('API keys saved'); };
  const router = useRouter();
  const { hasRequiredKeys } = useAPIKeyStore();
  const canChat = hasRequiredKeys();

  const handleNewChat = () => {
    router.push(`/chat`);
  };

  const handleMobileMessageClick = () => {
    if (isMobile && !isWelcome) {
      setMobileControlsVisible(!mobileControlsVisible);
    }
  };

  // Извлекаем reasoning из первой текстовой части с мемоизацией
  const reasoningData = useMemo(() => {
    const extractReasoning = (text: string) => {
      const openTag = text.indexOf('<think>');
      const closeTag = text.indexOf('</think>');
      
      if (openTag === -1) return null;
      
      const startIndex = openTag + 7;
      const endIndex = closeTag > -1 ? closeTag : text.length;
      const rawReasoning = text.slice(startIndex, endIndex);
      const cleanReasoning = rawReasoning.replace(/g:"([^"]*)"/g, '$1');
      
      return {
        reasoning: cleanReasoning,
        isComplete: closeTag > -1
      };
    };

    // Находим первую текстовую часть с рассуждениями
    for (const part of message.parts) {
      if (part.type === 'text' && (part as any).text?.includes('<think>')) {
        return extractReasoning((part as any).text);
      }
    }
    return null;
  }, [message.id, message.parts.length, message.parts.map(p => p.type === 'text' ? (p as any).text : '').join('')]);

  return (
    <>
    <div
      id={`message-${message.id}`}
      role="article"
      data-role={message.role}
      className={cn(
        'flex flex-col',
        message.role === 'user' ? 'items-end' : 'items-start'
      )}
    >
      {/*
       * Препроцессинг частей сообщения.
       * 1. Если в текстовой части присутствует блок <think>…</think>,
       *    выносим его в отдельную часть type='reasoning'.
       * 2. Аналогично обрабатываем вывод в формате g:"…" (строки DeepSeek).
       */}

       {/* Показываем reasoning отдельно если найден */}
      {reasoningData && reasoningData.reasoning.trim() && (
        <MessageReasoning
          key={`reasoning-${message.id}`}
          reasoning={reasoningData.reasoning}
          id={message.id}
          isComplete={reasoningData.isComplete}
        />
      )}

      {message.parts.map((part, index) => {
        const { type } = part;
        const key = `message-${message.id}-part-${index}`;

        if (type === 'text') {
          if (isWelcome && message.role === 'assistant') {
            return (
              <div key={key} className="w-full px-2 sm:px-0 space-y-4">
                <h3 className="text-base font-semibold">Welcome to Pak.Chat</h3>
                <SelectableText messageId={message.id} disabled>
                  <MarkdownRenderer content={part.text} streaming={isStreaming} />
                </SelectableText>
                <div className="space-y-6 mt-4">
                  {(['google','openrouter','openai'] as const).map(provider => (
                    <div key={provider} className="flex flex-col gap-2">
                      <Label htmlFor={provider} className="flex gap-1 text-sm">
                        <span>{provider.charAt(0).toUpperCase()+provider.slice(1)} API Key</span>
                        {provider === 'google' && <span className="text-muted-foreground">(Required)</span>}
                      </Label>
                      <Input id={provider}
                        placeholder={provider === 'google' ? 'AIza...' : provider === 'openrouter' ? 'sk-or-...' : 'sk-...'}
                        value={localKeys[provider]||''}
                        onChange={e =>
                            setLocalKeys((prev: APIKeys) => ({
                              ...prev,
                              [provider]: e.target.value,
                            }))
                        }
                      />
                      <a href={provider === 'google' ? 'https://aistudio.google.com/apikey' : provider === 'openrouter' ? 'https://openrouter.ai/settings/keys' : 'https://platform.openai.com/settings/organization/api-keys'}
                         target="_blank" rel="noopener noreferrer"
                         className="text-xs text-blue-500 hover:underline inline w-fit">
                        Create {provider.charAt(0).toUpperCase()+provider.slice(1)} API Key
                      </a>
                    </div>
                  ))}
                </div>
                <div className="flex gap-2 mt-2">
                  <Button size="sm" variant="outline" className="bg-gray-50 text-gray-600 dark:bg-secondary dark:text-secondary-foreground" onClick={saveKeys}>
                    Save
                  </Button>
                  {canChat && (
                    <Button size="sm" variant="outline" onClick={handleNewChat}>
                      New Chat
                    </Button>
                  )}
                </div>
              </div>
            );
          }
          return message.role === 'user' ? (
            <div
              key={key}
              className={cn(
                'relative group px-4 py-3 rounded-xl bg-secondary border border-secondary-foreground/2 max-w-[90%] sm:max-w-[80%] mx-2 sm:mx-0',
                isMobile && 'cursor-pointer'
              )}
              onClick={handleMobileMessageClick}
            >
              {attachments && attachments.length > 0 && (
                <div className="flex gap-2 flex-wrap mb-3">
                  {attachments.map((a, index) =>
                    a.type.startsWith('image') ? (
                      <img
                        key={`${a.id}-${index}`}
                        src={a.url}
                        className="h-32 w-32 rounded cursor-pointer hover:scale-105 transition object-cover"
                        onClick={() => setLightbox({
                          url: a.url,
                          name: a.name,
                          type: a.type,
                          size: a.size,
                        })}
                        alt={a.name}
                        loading="eager"
                        decoding="async"
                      />
                    ) : (
                      <a
                        key={`${a.id}-${index}`}
                        href={a.url}
                        target="_blank"
                        className="h-10 w-28 bg-muted rounded flex flex-col items-center justify-center text-[10px] px-1 hover:bg-accent"
                      >
                        <span className="line-clamp-1">{a.name}</span>
                        <span className="text-muted-foreground">{a.ext}</span>
                      </a>
                    )
                  )}
                </div>
              )}

              {mode === 'edit' && (
                <ErrorBoundary>
                  <MessageEditor
                    threadId={threadId}
                    message={message}
                    content={part.text}
                    setMessages={setMessages}
                    reload={reload}
                    setMode={setMode}
                    stop={stop}
                  />
                </ErrorBoundary>
              )}
              {mode === 'view' && <QuotedMessage content={part.text} />}

              {mode === 'view' && (
                <MessageControls
                  threadId={threadId}
                  messages={messages}
                  content={part.text}
                  message={message}
                  setMode={setMode}
                  setMessages={setMessages}
                  append={append}
                  reload={reload}
                  stop={stop}
                  isVisible={mobileControlsVisible}
                  onToggleVisibility={() => setMobileControlsVisible(!mobileControlsVisible)}
                />
              )}
            </div>
          ) : (
            <div
              key={key}
              className={cn(
                'group flex flex-col gap-2 w-full px-2 sm:px-0',
                isMobile && 'cursor-pointer'
              )}
              onClick={handleMobileMessageClick}
            >
              <SelectableText messageId={message.id} disabled={isStreaming}>
                <MarkdownRenderer content={part.text} streaming={isStreaming} />
              </SelectableText>
              {attachments && attachments.length > 0 && (
                <div className="flex gap-2 flex-wrap mt-2">
                  {attachments.map((a, index) =>
                    a.type.startsWith('image') ? (
                      <img
                        key={`${a.id}-${index}`}
                        src={a.url}
                        className="h-24 w-24 rounded cursor-pointer hover:scale-105 transition"
                        onClick={() => setLightbox({
                          url: a.url,
                          name: a.name,
                          type: a.type,
                          size: a.size,
                        })}
                        loading="eager"
                        decoding="async"
                        alt={a.name}
                      />
                    ) : (
                      <a
                        key={`${a.id}-${index}`}
                        href={a.url}
                        target="_blank"
                        className="h-10 w-28 bg-muted rounded flex flex-col items-center justify-center text-[10px] px-1 hover:bg-accent"
                      >
                        <span className="line-clamp-1">{a.name}</span>
                        <span className="text-muted-foreground">{a.ext}</span>
                      </a>
                    )
                  )}
                </div>
              )}
              {!isStreaming && (
                <MessageControls
                  threadId={threadId}
                  messages={messages}
                  content={part.text}
                  message={message}
                  setMessages={setMessages}
                  append={append}
                  reload={reload}
                  stop={stop}
                  isVisible={mobileControlsVisible}
                  onToggleVisibility={() => setMobileControlsVisible(!mobileControlsVisible)}
                />
              )}
            </div>
          );
        }

        if (type === 'tool-invocation') {
          const inv = part.toolInvocation as any;
          if (!inv) return null;
          if (inv.state === 'call' || inv.state === 'result') {
            return null;
          }
        }

      })}
    </div>
    {lightbox && (
      <ImageModal
        isOpen={Boolean(lightbox)}
        onClose={() => setLightbox(null)}
        imageUrl={lightbox!.url}
        fileName={lightbox!.name}
        fileType={lightbox!.type}
        fileSize={lightbox!.size}
      />
    )}
    </>
  );
}

const PreviewMessage = memo(PureMessage);

PreviewMessage.displayName = 'PreviewMessage';

export default PreviewMessage;


--- FILE: ./frontend/components/Messages.tsx ---
import { memo } from 'react';
import PreviewMessage from './Message';
import VirtualMessages from './VirtualMessages';
import { UIMessage } from 'ai';
import { UseChatHelpers } from '@ai-sdk/react';
import equal from 'fast-deep-equal';
import MessageLoading from './ui/MessageLoading';
import Error from './Error';

function PureMessages({
  threadId,
  messages,
  status,
  setMessages,
  reload,
  append,
  error,
  stop,
}: {
  threadId: string;
  messages: UIMessage[];
  setMessages: UseChatHelpers['setMessages'];
  reload: UseChatHelpers['reload'];
  append: UseChatHelpers['append'];
  status: UseChatHelpers['status'];
  error: UseChatHelpers['error'];
  stop: UseChatHelpers['stop'];
}) {
  // Показываем прыгающие точки только когда сообщение отправлено но ответ не начался
  const lastMessage = messages[messages.length - 1];
  const shouldShowLoading = status === 'submitted' && lastMessage?.role === 'user';

  return (
    <section className="flex flex-col space-y-12">
      {messages.map((message) => (
        <PreviewMessage
          key={message.id}
          messages={messages}
          threadId={threadId}
          message={message}
          isStreaming={
            status === 'streaming' && messages[messages.length - 1]?.id === message.id
          }
          append={append}
          setMessages={setMessages}
          reload={reload}
          stop={stop}
        />
      ))}
      {shouldShowLoading && <MessageLoading />}
      {error && <Error message={error.message} />}
    </section>
  );
}

const PureMessagesMemo = memo(PureMessages, (prevProps, nextProps) => {
  if (prevProps.status !== nextProps.status) return false;
  if (prevProps.error !== nextProps.error) return false;
  if (prevProps.messages.length !== nextProps.messages.length) return false;
  if (!equal(prevProps.messages, nextProps.messages)) return false;
  return true;
});

PureMessagesMemo.displayName = 'Messages';

// Enable virtualization once the chat grows to 20 messages.
const LargeListBoundary = 20;

export default function Messages(props: React.ComponentProps<typeof PureMessages>) {
  return props.messages.length > LargeListBoundary ? (
    <div className="h-full flex-1">
      <VirtualMessages {...props} />
    </div>
  ) : (
    <PureMessagesMemo {...props} />
  );
}


--- FILE: ./frontend/components/Chat.tsx ---
"use client";

import ChatHistoryButton from './ChatHistoryButton';
import NewChatButton from './NewChatButton';
import SettingsButton from './SettingsButton';
import ChatView from './ChatView';
import { useRouter } from 'next/navigation';
import { Button } from './ui/button';
import { WithTooltip } from './WithTooltip';
import { ArrowLeft } from 'lucide-react';
import { useScrollHide } from '@/frontend/hooks/useScrollHide';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';
import { useKeyboardInsets } from '../hooks/useKeyboardInsets';
import { cn } from '@/lib/utils';
import React, { useEffect, useRef, useState } from 'react';
import { useSettingsStore } from '@/frontend/stores/SettingsStore';
import { useModelStore } from '@/frontend/stores/ModelStore';
import type { UIMessage } from 'ai';

interface ChatProps {
  threadId: string;
  initialMessages: UIMessage[];
}

function Chat({ threadId, initialMessages }: ChatProps) {
  const { isMobile } = useIsMobile();
  const { selectedModel } = useModelStore();
  const router = useRouter();
  const panelRef = useRef<HTMLDivElement>(null);
  const isHeaderVisible = useScrollHide<HTMLDivElement>({ threshold: 15, panelRef });
  const [isKeyboardVisible, setIsKeyboardVisible] = useState(false);
  const { settings } = useSettingsStore();

  useKeyboardInsets((h) => {
    document.documentElement.style.setProperty('--keyboard-inset-height', `${h}px`);
  });

  // Track virtual keyboard visibility on mobile
  useEffect(() => {
    if (!isMobile) return;
    const handleResize = () => {
      const viewportHeight = window.visualViewport?.height || window.innerHeight;
      const windowHeight = window.innerHeight;
      const heightDifference = windowHeight - viewportHeight;
      setIsKeyboardVisible(heightDifference > 150);
    };
    if (window.visualViewport) {
      window.visualViewport.addEventListener('resize', handleResize);
      return () => window.visualViewport?.removeEventListener('resize', handleResize);
    } else {
      window.addEventListener('resize', handleResize);
      return () => window.removeEventListener('resize', handleResize);
    }
  }, [isMobile]);

  return (
    <div className="w-full min-h-screen flex flex-col overflow-y-auto chat-smooth">
      {/* Header for new chat vs existing chat */}
      {isMobile ? (
        // МОБИЛЬНАЯ версия - плюсик везде
        <>
          {/* Top-right control panel - всегда показываем на мобильных */}
          <div
            ref={panelRef}
            className={cn(
              'fixed right-4 top-4 z-50 flex gap-2 p-1 bg-background/60 backdrop-blur-md rounded-lg border border-border/20 transition-transform duration-300 ease-in-out',
              (!isHeaderVisible || isKeyboardVisible) && 'transform translate-x-[calc(100%+1rem)]',
            )}
          >
            <NewChatButton className="backdrop-blur-sm" />
            {threadId && <ChatHistoryButton className="backdrop-blur-sm" />}
          </div>

          {threadId ? (
            // Existing chat - show logo
            <div
              className={cn(
                'fixed left-4 top-4 z-50 transition-all duration-300 ease-in-out',
                (!isHeaderVisible || isKeyboardVisible) && 'transform -translate-x-full opacity-0',
              )}
            >
              <div className="relative">
                <div className="absolute inset-0 -m-2 bg-background/60 backdrop-blur-md rounded-lg" />
                <span
                  className="relative text-xl font-bold text-foreground hover:text-primary transition-colors cursor-pointer"
                  onClick={() => router.push('/chat')}
                >
                  Pak.Chat
                </span>
              </div>
            </div>
          ) : (
            // New chat - show back button
            <div className="fixed left-4 top-4 z-50">
              <WithTooltip label="Back to Home" side="bottom">
                <Button
                  variant="ghost"
                  size="icon"
                  className="bg-background/80 backdrop-blur-sm border-border/50"
                  onClick={() => router.push(isMobile ? '/home' : '/chat')}
                  aria-label="Back to home"
                >
                  <ArrowLeft className="h-5 w-5" />
                </Button>
              </WithTooltip>
            </div>
          )}
        </>
      ) : (
        // ПК версия - всегда показываем заголовок и кнопки (как раньше)
        <>
          {/* Top-right control panel */}
          <div
            ref={panelRef}
            className="fixed right-4 top-4 z-50 flex gap-2 p-1 bg-background/60 backdrop-blur-md rounded-lg border border-border/20"
          >
            <NewChatButton className="backdrop-blur-sm" />
            <ChatHistoryButton className="backdrop-blur-sm" />
            <SettingsButton className="backdrop-blur-sm" />
          </div>

          {/* Top-left logo */}
          <div className="fixed left-4 top-4 z-50">
            <span
              className="text-xl font-bold text-foreground hover:text-primary transition-colors cursor-pointer"
              onClick={() => router.push('/chat')}
            >
              Pak.Chat
            </span>
          </div>
        </>
      )}

      {/* Core chat UI */}
      <ChatView
        key={threadId}
        threadId={threadId}
        initialMessages={initialMessages}
        showNavBars={settings.showNavBars}
      />
    </div>
  );
}

export default React.memo(Chat);


--- FILE: ./frontend/components/ConvexClientProvider.tsx ---
"use client";
import { ReactNode, useEffect, useState, useMemo, useCallback, useRef } from "react";
import { ConvexProviderWithAuth, ConvexReactClient } from "convex/react";
import { useAuthStore } from "@/frontend/stores/AuthStore";
import { auth } from "@/firebase";
import { onIdTokenChanged } from "firebase/auth";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export default function ConvexClientProvider({ children }: { children: ReactNode }) {
  const { user, loading } = useAuthStore();
  const [idToken, setIdToken] = useState<string | null | undefined>(undefined);
  const cachedToken = useRef<string | undefined>(undefined);
  const cachedExp = useRef<number>(0); // ms timestamp when cached token expires

  useEffect(() => {
    if (!user) {
      setIdToken(null);
      cachedToken.current = undefined;
      cachedExp.current = 0;
      return;
    }

    // Reactively update token when Firebase refreshes it
    const unsub = onIdTokenChanged(auth, async (u) => {
      if (!u) {
        setIdToken(null);
        cachedToken.current = undefined;
        cachedExp.current = 0;
        return;
      }

      const token = await u.getIdToken();
      setIdToken(token);
      cachedToken.current = token;
      const res = await u.getIdTokenResult();
      cachedExp.current = Date.parse(res.expirationTime);
    });

    return unsub;
  }, [user]);

  // Get ID token, refreshing only when requested or expired
  const getFreshToken = useCallback(
    async (force = false) => {
      if (!user) return "";
      if (!force && cachedToken.current && Date.now() < cachedExp.current - 60_000) {
        // token is still valid for at least a minute
        return cachedToken.current;
      }

      const t = await user.getIdToken(force);
      cachedToken.current = t;
      const res = await user.getIdTokenResult();
      cachedExp.current = Date.parse(res.expirationTime);
      return t;
    },
    [user]
  );

  const authState = useMemo(
    () => ({
      isLoading: idToken === undefined || loading,
      isAuthenticated: !!idToken,
      fetchAccessToken: async ({ forceRefreshToken }: { forceRefreshToken: boolean }) =>
        getFreshToken(forceRefreshToken),
    }),
    [idToken, loading, getFreshToken]
  );

  const useAuth = useCallback(() => authState, [authState]);

  return (
    <ConvexProviderWithAuth client={convex} useAuth={useAuth}>
      {children}
    </ConvexProviderWithAuth>
  );
}


--- FILE: ./frontend/components/ChatInput.tsx ---
"use client";

import { ChevronDown, Check, ArrowUpIcon, Star, ChevronUp, ChevronLeft, Globe } from 'lucide-react';
import { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { Textarea } from '@/frontend/components/ui/textarea';
import ScrollToBottomButton from './ScrollToBottomButton';
import { cn } from '@/lib/utils';
import { Button } from '@/frontend/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/frontend/components/ui/dropdown-menu';
import useAutoResizeTextarea from '@/hooks/useAutoResizeTextArea';
import { UseChatHelpers, useCompletion } from '@ai-sdk/react';
import { useMutation, useQuery } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { Id } from '@/convex/_generated/dataModel';
import { useAPIKeyStore, APIKeys } from '@/frontend/stores/APIKeyStore';
import { useModelStore, ReasoningEffort } from '@/frontend/stores/ModelStore';
import { useModelVisibilityStore } from '@/frontend/stores/ModelVisibilityStore';
import { useModelVisibilitySync } from '@/frontend/hooks/useModelVisibilitySync';
import { useQuoteStore } from '@/frontend/stores/QuoteStore';
import { useChatStore } from '@/frontend/stores/ChatStore';
import { AI_MODELS, AIModel, getModelConfig } from '@/lib/models';
import { UIMessage } from 'ai';
import AttachmentsBar from './AttachmentsBar';
import { useAttachmentsStore } from '../stores/AttachmentsStore';
import type { LocalAttachment } from '../stores/AttachmentsStore';
import { v4 as uuidv4 } from 'uuid';
import { isConvexId } from '@/lib/ids';
import { StopIcon } from './ui/icons';
import { toast } from 'sonner';
import { useMessageSummary } from '../hooks/useMessageSummary';
import QuoteDisplay from './QuoteDisplay';
import { Input } from '@/frontend/components/ui/input';
import { useRouter } from 'next/navigation';
import { useRecentFilesIntegration, addFileToRecent, addUploadedFileMetaToRecent } from './RecentFilesDropdown';
import { getCompanyIcon } from '@/frontend/components/ui/provider-icons';
import { createImagePreview } from '@/frontend/lib/image';

// Helper to convert File objects to Base64 data URLs
const fileToDataUrl = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = (error) => reject(error);
  });
};

// Helper to get image dimensions
const getImageDimensions = (file: File): Promise<{ width: number; height: number } | null> => {
  return new Promise((resolve) => {
    if (!file.type.startsWith('image/')) {
      resolve(null);
      return;
    }

    const img = new Image();
    const url = URL.createObjectURL(file);
    
    img.onload = () => {
      URL.revokeObjectURL(url);
      resolve({ width: img.naturalWidth, height: img.naturalHeight });
    };
    
    img.onerror = () => {
      URL.revokeObjectURL(url);
      resolve(null);
    };
    
    img.src = url;
  });
};

interface ChatInputProps {
  threadId: string;
  input: UseChatHelpers['input'];
  status: UseChatHelpers['status'];
  error: UseChatHelpers['error'];
  setInput: UseChatHelpers['setInput'];
  /** Reload chat with current messages without appending */
  reload: UseChatHelpers['reload'];
  setMessages: UseChatHelpers['setMessages'];
  append: UseChatHelpers['append'];
  stop: UseChatHelpers['stop'];
  messageCount: number;
  onThreadCreated?: (id: Id<'threads'>) => void;
}

interface StopButtonProps {
  stop: UseChatHelpers['stop'];
}

interface SendButtonProps {
  onSubmit: () => void;
  disabled: boolean;
}

interface ChatModelDropdownProps {
  messageCount?: number;
}

const createUserMessage = (id: string, text: string, attachments?: any[]): UIMessage & { attachments?: any[] } => {
  return {
    id,
    parts: [{ type: 'text', text }],
    role: 'user',
    content: text,
    createdAt: new Date(),
    attachments,
  };
};

const PureChatModelDropdown = ({ messageCount = 0 }: ChatModelDropdownProps) => {
  const { getKey } = useAPIKeyStore();
  const {
    selectedModel,
    setModel,
    getModelConfig: getModelConfigFromStore,
    setReasoningEffort,
    webSearchEnabled,
    setWebSearchEnabled,
    supportsWebSearch,
  } = useModelStore();
  const {
    getVisibleFavoriteModels,
    getVisibleGeneralModels,
    isFavoriteModel,
    toggleFavoriteModel,
    isProviderEnabled,
  } = useModelVisibilityStore();
  const { saveToConvex } = useModelVisibilitySync();
  const [isExpanded, setIsExpanded] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [isReasoningEffortOpen, setIsReasoningEffortOpen] = useState(false);

  const currentModelConfig = getModelConfigFromStore();
  const showReasoningEffortButton = selectedModel === 'o4-mini';
  const showWebSearchButton = supportsWebSearch();

  const reasoningEfforts: ReasoningEffort[] = ['high', 'medium', 'low'];

  // Helper to render provider icon
  const getProviderIcon = useCallback((model: AIModel) => {
    const config = getModelConfig(model);
    return getCompanyIcon(config.company, 'h-3 w-3');
  }, []);

  const isModelEnabled = useCallback(
    (model: AIModel) => {
      const config = getModelConfig(model);
      const apiKey = getKey(config.provider);
      return Boolean(apiKey) && isProviderEnabled(config.provider as any);
    },
    [getKey, isProviderEnabled]
  );

  // We call the selectors on each render so that UI reacts immediately to
  // store updates (e.g. when the user toggles a provider or favourites in
  // the Settings screen). Memoising only on the function reference caused
  // stale values because the function reference is stable between renders.

  const visibleFavoriteModels = getVisibleFavoriteModels();

  const visibleGeneralModels = getVisibleGeneralModels().filter((m) => !isFavoriteModel(m));

  // Показываем все избранные модели, но визуально отключаем те, которые
  // недоступны (например, отсутствует API-ключ). Это позволяет пользователю
  // видеть свои избранные модели на любом устройстве.
  const enabledFavorites = visibleFavoriteModels;

  const disabledModels = visibleGeneralModels.filter((m) => !isModelEnabled(m));

  const enabledNonFavorites = visibleGeneralModels.filter(isModelEnabled);

  const allOtherModelsSorted = [...enabledNonFavorites, ...disabledModels];

  const handleModelSelect = useCallback(
    (model: AIModel) => {
      if (isModelEnabled(model)) {
        setModel(model);
        saveToConvex();
        setIsOpen(false);
        setIsExpanded(false);
      }
    },
    [isModelEnabled, setModel, saveToConvex]
  );

  const handleToggleFavorite = useCallback(
    (model: AIModel, e: React.MouseEvent) => {
      e.stopPropagation();
      if (isModelEnabled(model)) {
        toggleFavoriteModel(model);
        saveToConvex();
      }
    },
    [toggleFavoriteModel, isModelEnabled, saveToConvex]
  );

  const handleShowAll = useCallback(() => {
    setIsExpanded(true);
  }, []);

  const handleBackToFavorites = useCallback(() => {
    setIsExpanded(false);
  }, []);

  return (
    <div className="flex items-center gap-2">
      <DropdownMenu
        open={isOpen}
        onOpenChange={(open) => {
          setIsOpen(open);
          if (!open) {
            setIsExpanded(false);
          }
        }}
      >
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            className="flex items-center gap-1 h-8 pl-3 pr-2 text-xs rounded-lg text-foreground hover:bg-accent/50 focus-visible:ring-1 focus-visible:ring-offset-0 focus-visible:ring-blue-500 transition-colors"
            aria-label={`Selected model: ${selectedModel}`}
          >
            <div className="flex items-center gap-1">
              {selectedModel}
              <ChevronDown className="w-3 h-3 opacity-50" />
            </div>
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent
          className={cn(
            !isExpanded ? 'w-64' : 'w-80',
            'border border-border/50 bg-popover/95 backdrop-blur-sm shadow-xl rounded-xl overflow-hidden max-h-[50vh]'
          )}
          align="center"
          side="top"
          sideOffset={12}
          avoidCollisions
        >
          <div className="overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-muted-foreground/30 scrollbar-thumb-rounded-full max-h-[45vh]">
            {!isExpanded ? (
              <div className="p-3">
                <div className="flex items-center justify-between mb-3">
                  <div className="px-2 py-1 text-xs font-semibold text-muted-foreground/80 uppercase tracking-wide flex items-center gap-2">
                    <Star className="w-3 h-3" />
                    Favorites
                  </div>
                  <button
                    onClick={handleShowAll}
                    className="inline-flex items-center gap-1 px-3 py-1.5 text-xs font-medium text-muted-foreground hover:text-foreground hover:bg-accent/50 rounded-lg hover:scale-105"
                  >
                    Show all
                    <ChevronUp className="w-3 h-3" />
                  </button>
                </div>
                {enabledFavorites.length === 0 ? (
                  <div className="text-center py-8 text-sm text-muted-foreground">
                    No favorite models
                  </div>
                ) : (
                  <div className="space-y-2 mb-4 max-h-64 overflow-y-auto pr-2">
                    {enabledFavorites.map((model) => {
                      const enabled = isModelEnabled(model);
                      return (
                        <div
                          key={model}
                          onClick={() => handleModelSelect(model)}
                          className={cn(
                            'relative flex items-center justify-between p-3 rounded-xl border-2 cursor-pointer group hover:scale-[1.02] transition-all',
                            selectedModel === model
                              ? 'border-primary bg-primary/10 shadow-md'
                              : 'border-border/60 hover:border-primary/40 hover:bg-accent hover:shadow-md',
                            !enabled && 'opacity-50 bg-muted/20 border-border/30'
                          )}
                        >
                          <div className="flex items-center gap-2">
                            {getProviderIcon(model)}
                            <div className="text-sm font-medium">{model}</div>
                            {!enabled && (
                              <div className="text-xs text-muted-foreground bg-muted px-1.5 py-0.5 rounded">
                                No API key
                              </div>
                            )}
                          </div>
                          <div className="flex items-center gap-2">
                            <Button
                              variant="ghost"
                              size="icon"
                              className="w-6 h-6 opacity-0 group-hover:opacity-100 transition-opacity"
                              onClick={(e) => handleToggleFavorite(model, e)}
                            >
                              <Star className="w-3 h-3 text-yellow-500 fill-yellow-500" />
                            </Button>
                            {selectedModel === model && <Check className="w-4 h-4 text-primary" />}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                )}
              </div>
            ) : (
              <div className="p-3">
                <div className="flex items-center justify-between mb-3">
                  <div className="px-2 py-1 text-xs font-semibold text-muted-foreground/80 uppercase tracking-wide flex items-center gap-2">
                    <Star className="w-3 h-3" />
                    Favorites
                  </div>
                  <button
                    onClick={handleBackToFavorites}
                    className="inline-flex items-center gap-1 px-3 py-1.5 text-xs font-medium text-muted-foreground hover:text-foreground hover:bg-accent/50 rounded-lg hover:scale-105"
                  >
                    <ChevronLeft className="w-3 h-3" />
                    Back to Favorites
                  </button>
                </div>
                {enabledFavorites.length > 0 && (
                  <div className="mb-6">
                    <div className="grid grid-cols-3 gap-2 overflow-visible">
                      {enabledFavorites.map((model) => {
                        const enabled = isModelEnabled(model);
                        return (
                          <div
                            key={model}
                            onClick={() => handleModelSelect(model)}
                            className={cn(
                              'relative flex flex-col items-center justify-center p-3 rounded-xl border-2 cursor-pointer group h-20 hover:scale-[1.05] hover:shadow-lg transition-all',
                              selectedModel === model
                                ? 'border-primary bg-primary/10 shadow-md'
                                : 'border-border/60 hover:border-primary/40 hover:bg-accent',
                              !enabled && 'opacity-50 bg-muted/20 border-border/30'
                            )}
                          >
                            <div className="mb-1 opacity-70 group-hover:opacity-100 transition-opacity">
                              {getProviderIcon(model)}
                            </div>
                            <div className="text-xs font-medium text-center leading-tight">{model}</div>
                            {!enabled && (
                              <div className="text-xs text-muted-foreground/70 text-center mt-1">
                                No API key
                              </div>
                            )}
                            <Button
                              variant="ghost"
                              size="icon"
                              className="absolute top-0.5 right-0.5 w-5 h-5 opacity-0 group-hover:opacity-100 transition-opacity"
                              onClick={(e) => handleToggleFavorite(model, e)}
                            >
                              <Star className="w-2.5 h-2.5 text-yellow-500 fill-yellow-500" />
                            </Button>
                            {selectedModel === model && (
                              <div className="absolute top-0.5 left-0.5">
                                <Check className="w-3 h-3 text-primary" />
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}
                {allOtherModelsSorted.length > 0 && (
                  <div className="mb-4">
                    <div className="px-2 py-1 text-xs font-semibold text-muted-foreground/80 mb-3 uppercase tracking-wide">
                      Others
                    </div>
                    <div className="max-h-[300px] overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-muted-foreground/30 scrollbar-thumb-rounded-full">
                      <div className="grid grid-cols-3 gap-2 pr-2 overflow-visible">
                        {allOtherModelsSorted.map((model) => {
                          const enabled = isModelEnabled(model);
                          const isFav = isFavoriteModel(model);
                          return (
                            <div
                              key={model}
                              onClick={() => handleModelSelect(model)}
                              className={cn(
                                'relative flex flex-col items-center justify-center p-3 rounded-xl border-2 cursor-pointer group h-20 hover:scale-[1.05] hover:shadow-lg transition-all',
                                selectedModel === model
                                  ? 'border-primary bg-primary/10 shadow-md'
                                  : 'border-border/60 hover:border-primary/40 hover:bg-accent',
                                !enabled && 'bg-muted/50 border-muted-foreground/20 opacity-60'
                              )}
                            >
                              <div className="mb-1 opacity-70 group-hover:opacity-100 transition-opacity">
                                {getProviderIcon(model)}
                              </div>
                              <div className="text-xs font-medium text-center leading-tight">{model}</div>
                              {!enabled && (
                                <div className="text-xs text-muted-foreground/70 text-center mt-1">
                                  No API key
                                </div>
                              )}
                              <Button
                                variant="ghost"
                                size="icon"
                                className={cn(
                                  'absolute top-0.5 right-0.5 w-5 h-5 opacity-0 group-hover:opacity-100 transition-opacity',
                                  isFav && 'hidden'
                                )}
                                onClick={(e) => handleToggleFavorite(model, e)}
                              >
                                <Star className="w-2.5 h-2.5 text-muted-foreground hover:text-yellow-500" />
                              </Button>
                              {selectedModel === model && (
                                <div className="absolute top-0.5 left-0.5">
                                  <Check className="w-3 h-3 text-primary" />
                                </div>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </DropdownMenuContent>
      </DropdownMenu>
      {showReasoningEffortButton && (
        <DropdownMenu open={isReasoningEffortOpen} onOpenChange={setIsReasoningEffortOpen}>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              className="flex items-center gap-1 h-8 pl-3 pr-2 text-xs rounded-lg text-foreground hover:bg-accent/50 focus-visible:ring-1 focus-visible:ring-offset-0 focus-visible:ring-blue-500 transition-colors"
              aria-label={`Reasoning effort: ${currentModelConfig.reasoningEffort || 'medium'}`}
            >
              <div className="flex items-center gap-1">
                {currentModelConfig.reasoningEffort || 'medium'}
                <ChevronDown className="w-3 h-3 opacity-50" />
              </div>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className={cn(
              'w-40',
              'border border-border/50 bg-popover/95 backdrop-blur-sm shadow-xl rounded-xl overflow-hidden max-h-[50vh]'
            )}
            align="center"
            side="top"
            sideOffset={12}
            avoidCollisions
          >
            <div className="p-1">
              {reasoningEfforts.map((effort) => (
                <DropdownMenuItem
                  key={effort}
                  onSelect={() => setReasoningEffort(selectedModel, effort)}
                  className="flex items-center justify-between gap-2 p-2 rounded-lg cursor-pointer text-sm font-medium hover:bg-accent hover:text-accent-foreground"
                >
                  {effort}
                  {currentModelConfig.reasoningEffort === effort && (
                    <Check className="w-4 h-4 text-primary" />
                  )}
                </DropdownMenuItem>
              ))}
            </div>
          </DropdownMenuContent>
        </DropdownMenu>
      )}
      {showWebSearchButton && (
        <Button
          variant={webSearchEnabled ? "default" : "ghost"}
          size="icon"
          onClick={() => setWebSearchEnabled(!webSearchEnabled)}
          className={cn(
            "h-8 w-8 rounded-lg transition-colors",
            webSearchEnabled 
              ? "bg-primary text-primary-foreground hover:bg-primary/90" 
              : "text-foreground hover:bg-accent/50"
          )}
          aria-label={`Web search: ${webSearchEnabled ? 'enabled' : 'disabled'}`}
        >
          <Globe className="w-4 h-4" />
        </Button>
      )}
    </div>
  );
};

const ChatModelDropdown = memo(PureChatModelDropdown);
ChatModelDropdown.displayName = 'ChatModelDropdown';

const PureStopButton = ({ stop }: StopButtonProps) => (
  <Button
    variant="outline"
    size="icon"
    onClick={stop}
    aria-label="Stop generating response"
    className="rounded-full"
  >
    <StopIcon size={20} />
  </Button>
);

const StopButton = memo(PureStopButton);
StopButton.displayName = 'StopButton';

const PureSendButton = ({ onSubmit, disabled }: SendButtonProps) => (
  <Button
    onClick={onSubmit}
    variant="default"
    size="icon"
    disabled={disabled}
    aria-label="Send message"
    className="rounded-full"
  >
    <ArrowUpIcon size={18} />
  </Button>
);

const SendButton = memo(PureSendButton, (p, n) => p.disabled === n.disabled);
SendButton.displayName = 'SendButton';

function PureChatInput({
  threadId,
  input,
  status,
  error,
  setInput,
  reload,
  setMessages,
  append,
  stop,
  messageCount,
  onThreadCreated,
}: ChatInputProps) {
  // Все хуки должны быть вызваны до любых условных возвратов
  const { hasRequiredKeys, keys, setKeys } = useAPIKeyStore();
  const canChat = hasRequiredKeys();
  const { currentQuote, clearQuote } = useQuoteStore();
  const [localKeys, setLocalKeys] = useState(keys);
  const router = useRouter();
  const containerRef = useRef<HTMLDivElement>(null);
  const { textareaRef, adjustHeight } = useAutoResizeTextarea({
    minHeight: 72,
    maxHeight: 200,
  });
  const createThread = useMutation(api.threads.create);
  const sendMessage = useMutation<typeof api.messages.send>(api.messages.send);
  const generateUploadUrl = useMutation(api.attachments.generateUploadUrl);
  const saveAttachments = useMutation(api.attachments.save as any);
  const updateAttachmentMessageId = useMutation(api.attachments.updateMessageId);
  // Remove this line as we'll use a different approach
  const { complete } = useMessageSummary();
  const { attachments, clear } = useAttachmentsStore();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { selectedModel, webSearchEnabled } = useModelStore();
  const { consumeNextDialogVersion } = useChatStore();
  
  // Get current dialog version for existing threads
  const currentVersion = useQuery(
    api.messages.getCurrentDialogVersion,
    isConvexId(threadId) ? { threadId: threadId as Id<'threads'> } : 'skip'
  );

  // Интеграция с недавними файлами
  useRecentFilesIntegration();

  const isDisabled = useMemo(
    () => !input.trim() || status === 'streaming' || status === 'submitted' || isSubmitting,
    [input, status, isSubmitting]
  );
  
  // Синхронизируем localKeys с основным состоянием
  useEffect(() => {
    setLocalKeys(keys);
  }, [keys]);
  
  const saveKeys = useCallback(async () => {
    await setKeys(localKeys);
    toast.success('API keys saved');
  }, [setKeys, localKeys]);

  const handleSubmit = useCallback(async () => {
    if (isDisabled) return;
    setIsSubmitting(true);

    const currentInput = textareaRef.current?.value || input;
    let finalMessage = currentInput.trim();
    if (currentQuote) {
      finalMessage = `> ${currentQuote.text.replace(/\n/g, '\n> ')}\n\n${currentInput.trim()}`;
    }

    // Reset UI early
    setInput('');
    clearQuote();
    adjustHeight(true);

    try {
      // 1. Если это черновик, создаем тред заранее и сразу приводим тип
      const ensuredThreadId: Id<'threads'> = isConvexId(threadId)
        ? (threadId as Id<'threads'>)
        : await createThread({
            title: finalMessage.slice(0, 30) || 'New Chat',
          });

      // 2. Если тред новый, обновляем состояние без редиректа
      if (!isConvexId(threadId)) {
        onThreadCreated?.(ensuredThreadId);
        // Обновляем URL плавно без перезагрузки страницы (только на клиенте)
        if (typeof window !== 'undefined') {
          window.history.replaceState(null, '', `/chat/${ensuredThreadId}`);
        }
      }

      // 3. Оптимистично добавляем сообщение в UI
      const localAttachments = attachments.filter((att): att is LocalAttachment => !att.remote);
      const remoteAttachments = attachments.filter(att => att.remote);
      const clientMsgId = uuidv4();

      // 3.a Создаем optimistic attachments для UI рендера
      const attachmentsForMessage = await Promise.all(
        attachments.map(async (att) => {
          if (att.remote) {
            return {
              ...att,
              url: att.preview || '',
            };
          } else {
            return {
              ...att,
              url: await fileToDataUrl(att.file),
            };
          }
        })
      );

      // 3.b Создаем и отображаем user message
      const userMessage = createUserMessage(
        clientMsgId,
        finalMessage,
        attachmentsForMessage,
      );
      append(userMessage, {
        body: {
          model: selectedModel,
          apiKeys: keys,
          threadId: ensuredThreadId,
          search: webSearchEnabled,
        },
      });
      clear();

      // 4. Загрузка файлов (оригинал + превью)
      const uploadedFiles = await Promise.all(
        localAttachments.map(async (attachment) => {
          // 1. Upload the original file
          const uploadUrl = await generateUploadUrl();
          const resOrig = await fetch(uploadUrl, {
            method: 'POST',
            headers: { 'Content-Type': attachment.file.type },
            body: attachment.file,
          });
          if (!resOrig.ok) throw new Error(`Failed to upload ${attachment.name}`);
          const { storageId } = await resOrig.json();

          // 2. Create preview if needed and upload it
          let previewId: string | undefined = undefined;
          const previewFile = await createImagePreview(attachment.file);
          if (previewFile) {
            const previewUploadUrl = await generateUploadUrl();
            const resPrev = await fetch(previewUploadUrl, {
              method: 'POST',
              headers: { 'Content-Type': previewFile.type },
              body: previewFile,
            });
            if (resPrev.ok) {
              const { storageId: pId } = await resPrev.json();
              previewId = pId;
            }
          }

          // 3. Image dimensions
          const dimensions = await getImageDimensions(attachment.file);

          return {
            storageId,
            previewId,
            name: attachment.name,
            type: attachment.type,
            messageId: clientMsgId,
            width: dimensions?.width,
            height: dimensions?.height,
            size: attachment.size,
          };
        })
      );

      // 4b. Добавляем уже загруженные удаленные файлы
      const reusedFiles = remoteAttachments.map(att => {
        const remoteAtt = att as any; // Cast to access remote properties
        return {
          storageId: remoteAtt.storageId,
          previewId: remoteAtt.previewId,
          name: att.name,
          type: att.type,
          messageId: clientMsgId,
          width: undefined,
          height: undefined,
          size: att.size,
        };
      });
      uploadedFiles.push(...reusedFiles);

      // 5. Сохраняем метаданные вложений в БД
      let savedAttachments: any[] = [];
      if (uploadedFiles.length > 0) {
        try {
          savedAttachments = await saveAttachments({
            threadId: ensuredThreadId,
            attachments: uploadedFiles,
          });
        } catch (err) {
          toast.error('Failed to upload attachments');
          console.error(err);
        }
      }

      // 6. Сохраняем текст сообщения в БД
      // Определяем текущую версию диалога или используем 1 для новых тредов
      const dialogVersion = currentVersion ?? 1;
      const dbMsgId = await sendMessage({
        threadId: ensuredThreadId,
        content: finalMessage,
        role: 'user',
        dialogVersion: dialogVersion,
        isActive: true,
      });

      if (savedAttachments.length > 0) {
        await updateAttachmentMessageId({
          attachmentIds: savedAttachments.map((a) => a.id),
          messageId: dbMsgId,
        });
      }

      // 7. Добавляем файлы в recent ТОЛЬКО после успешной отправки (F1.2 + F1.4)
      if (localAttachments.length > 0) {
        localAttachments.forEach(attachment => {
          const success = addFileToRecent(attachment.file);
          if (!success) {
            console.warn(`Failed to add file "${attachment.file.name}" to recent files`);
          }
        });
        

      }

      // 8. Обновляем UI с реальным ID
      setMessages((prev) => prev.map((m) => (m.id === clientMsgId ? { ...m, id: dbMsgId } : m)));

      // 9. Генерация заголовка в фоне для нового чата
      if (!isConvexId(threadId)) {
        complete(finalMessage, {
          body: { threadId: ensuredThreadId, messageId: dbMsgId, isTitle: true },
        });
      }

    } catch (error) {
      toast.error('Failed to send message.');
      setInput(currentInput);
    } finally {
      setIsSubmitting(false);
    }
  }, [
    isDisabled,
    input,
    threadId,
    attachments,
    currentQuote,
    setInput,
    clearQuote,
    adjustHeight,
    clear,
    createThread,
    sendMessage,
    generateUploadUrl,
    saveAttachments,
    updateAttachmentMessageId,
    setMessages,
    complete,
    router,
    onThreadCreated,
    append,
    selectedModel,
    webSearchEnabled,
    keys,
  ]);

  const handleKeyDown = useCallback(
    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        handleSubmit();
      }
    },
    [handleSubmit]
  );

  const handleInputChange = useCallback(
    (e: React.ChangeEvent<HTMLTextAreaElement>) => {
      setInput(e.target.value);
      adjustHeight();
    },
    [setInput, adjustHeight]
  );

  const handleFocus = useCallback(() => {
    if (window.innerWidth <= 768) {
      setTimeout(() => {
        textareaRef.current?.scrollIntoView({
          behavior: 'smooth',
          block: 'center',
        });
      }, 300);
    }
  }, []);

  // Если есть ошибка и нельзя отправлять сообщения, показываем форму для ввода API ключей
  if (error && !canChat) {
    return (
      <div className="w-full flex justify-center pb-safe mobile-keyboard-fix">
        <div className={cn('backdrop-blur-md bg-secondary p-4 pb-2 border-t border-border/50 max-w-3xl w-full', messageCount === 0 ? 'rounded-[20px]' : 'rounded-t-[20px]')}>
          <div className="space-y-2">
            {(['google','openrouter','openai'] as const).map(provider => (
              <Input key={provider}
                value={localKeys[provider]||''}
                onChange={e => setLocalKeys((prev: APIKeys) => ({ ...prev, [provider]: e.target.value }))}
                placeholder={`${provider.charAt(0).toUpperCase()+provider.slice(1)} API Key`} />
            ))}
          </div>
          <Button className="mt-2 w-full" onClick={saveKeys}>Save API Keys</Button>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="w-full flex justify-center pb-safe mobile-keyboard-fix">
        <div ref={containerRef} className={cn('backdrop-blur-md bg-secondary p-2 pb-0 border-t border-border/50 max-w-3xl w-full', messageCount === 0 ? 'rounded-[20px]' : 'rounded-t-[20px]')}>
          {/* Scroll to bottom button */}
          {messageCount > 0 && (
            <div className="absolute right-4 -top-12 z-50">
              <ScrollToBottomButton />
            </div>
          )}
          <div className="relative rounded-[16px] overflow-hidden">
            {/* Provider links when no API keys */}
            {!canChat && messageCount > 1 && (
              <div className="flex flex-wrap justify-around gap-4 px-4 py-2 bg-secondary">
                <a href="https://aistudio.google.com/apikey" target="_blank" rel="noopener noreferrer" className="text-xs text-blue-500 hover:underline">
                  Create Google API Key
                </a>
                <a href="https://openrouter.ai/settings/keys" target="_blank" rel="noopener noreferrer" className="text-xs text-blue-500 hover:underline">
                  Create OpenRouter API Key
                </a>
                <a href="https://platform.openai.com/settings/organization/api-keys" target="_blank" rel="noopener noreferrer" className="text-xs text-blue-500 hover:underline">
                  Create OpenAI API Key
                </a>
              </div>
            )}

            <div className="flex flex-col">
              {/* Attachments at the top */}
              {attachments.length > 0 && (
                <div className="bg-secondary px-4 pt-3">
                  <AttachmentsBar mode="full" />
                </div>
              )}
              
              {/* Quote display */}
              {currentQuote && (
                <div className="bg-secondary px-4 pt-3">
                  <QuoteDisplay quote={currentQuote} onRemove={clearQuote} />
                </div>
              )}
              
              {/* Text input */}
              <div className="bg-secondary overflow-y-auto max-h-[300px]">
                <Textarea
                  id="chat-input"
                  value={input}
                  placeholder={!canChat ? "Enter API key to enable chat" : "What can I do for you?"}
                  className={cn(
                    'w-full px-4 py-3 border-none shadow-none dark:bg-transparent',
                    'placeholder:text-muted-foreground resize-none',
                    'focus-visible:ring-0 focus-visible:ring-offset-0',
                    'scrollbar-thin scrollbar-track-transparent scrollbar-thumb-muted-foreground/30',
                    'scrollbar-thumb-rounded-full',
                    'min-h-[72px]'
                  )}
                  ref={textareaRef}
                  onKeyDown={handleKeyDown}
                  onChange={handleInputChange}
                  onFocus={handleFocus}
                  aria-label="Chat message input"
                  aria-describedby="chat-input-description"
                  disabled={!canChat}
                />
                <span id="chat-input-description" className="sr-only">
                  {canChat ? 'Press Enter to send, Shift+Enter for new line' : 'Enter API key to enable chat'}
                </span>
              </div>
            </div>
            
            {/* Bottom controls */}
            <div className="h-14 flex items-center px-2">
              <div className="flex items-center justify-between w-full gap-2 overflow-x-auto">
                {/* Left side: Add file button and model selection */}
                <div className="flex items-center gap-2">
                  <AttachmentsBar mode="compact" messageCount={messageCount} />
                  <ChatModelDropdown messageCount={messageCount} />
                </div>
                
                {/* Right side: Send/Stop button */}
                <div className="flex items-center gap-2">
                  {status === 'submitted' || status === 'streaming' ? (
                    <StopButton stop={stop} />
                  ) : (
                    <SendButton onSubmit={handleSubmit} disabled={isDisabled || !canChat} />
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

const ChatInput = memo(PureChatInput, (prevProps, nextProps) => {
  return (
    prevProps.input === nextProps.input &&
    prevProps.status === nextProps.status &&
    prevProps.messageCount === nextProps.messageCount
  );
});
ChatInput.displayName = 'ChatInput';


// Обёртка для решения проблемы с Rules of Hooks
function ChatInputWrapper(props: ChatInputProps) {
  const { keysLoading } = useAPIKeyStore();
  // Always render ChatInput immediately; if keys still loading, ChatInput will handle missing keys gracefully.
  return <ChatInput {...props} />;
}

export default ChatInputWrapper;


--- FILE: ./frontend/components/ErrorBoundary.tsx ---
import React from 'react';
import Error from './Error';

type Props = { children: React.ReactNode };

type State = { error: Error | null };

export default class ErrorBoundary extends React.Component<Props, State> {
  // Track any rendering errors encountered in child components
  state: State = { error: null };

  // Update state so the next render shows the fallback UI
  static getDerivedStateFromError(error: Error): State {
    return { error };
  }

  // Log error details for debugging purposes
  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {
    console.error('Uncaught error:', error, errorInfo);
  }

  render() {
    if (this.state.error) {
      return (
        <Error message={`Something went wrong: ${this.state.error.message}`} />
      );
    }
    return this.props.children;
  }
}


--- FILE: ./frontend/components/VirtualMessages.tsx ---
import { VariableSizeList as List } from 'react-window';
import AutoSizer from 'react-virtualized-auto-sizer';
import PreviewMessage from './Message';
import { UIMessage } from 'ai';
import { UseChatHelpers } from '@ai-sdk/react';

interface Props {
  messages: UIMessage[];
  threadId: string;
  setMessages: UseChatHelpers['setMessages'];
  reload: UseChatHelpers['reload'];
  append: UseChatHelpers['append'];
  status: UseChatHelpers['status'];
  error: UseChatHelpers['error'];
  stop: UseChatHelpers['stop'];
}

export default function VirtualMessages({ messages, ...rest }: Props) {
  const getItemSize = (index: number) => {
    const msg = messages[index];
    const textLength = msg.parts
      .map((p) => (p.type === 'text' ? p.text.length : 0))
      .reduce((a, b) => a + b, 0);
    const lines = Math.max(1, Math.ceil(textLength / 80));
    return 80 + lines * 24;
  };
  return (
    <AutoSizer>
      {({ height, width }) => (
        <List
          height={height}
          itemCount={messages.length}
          itemSize={getItemSize}
          width={width}
          overscanCount={4}
        >
          {({ index, style }) => (
            <div style={style}>
              <PreviewMessage
                {...rest}
                messages={messages}
                message={messages[index]}
                isStreaming={
                  rest.status === 'streaming' && index === messages.length - 1
                }
                append={rest.append}
              />
            </div>
          )}
        </List>
      )}
    </AutoSizer>
  );
}


--- FILE: ./frontend/components/Providers.tsx ---
"use client";

import React from 'react';
import { useSettings } from '@/frontend/hooks/useSettings';
import { useSettingsSync } from '@/frontend/stores/SettingsStore';
import { ThemeProvider } from '@/frontend/components/ui/ThemeProvider';
import { useModelVisibilitySync } from '@/frontend/hooks/useModelVisibilitySync';
import { useModelSync } from '@/frontend/hooks/useModelSync';

export default function Providers({ children }: { children: React.ReactNode }) {
  useSettings();
  useSettingsSync();
  // Sync model visibility (favorite models & enabled providers) with Convex
  useModelVisibilitySync();
  // Sync selected model between local storage and Convex
  useModelSync();
  return (
    <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
      {children}
    </ThemeProvider>
  );
}


--- FILE: ./frontend/components/ui/animated-tabs.tsx ---
"use client"

import * as React from "react"
import { motion } from "framer-motion"
import { cn } from "@/lib/utils"

interface AnimatedTabsProps {
  tabs: Array<{
    value: string
    label: string
    icon?: React.ReactNode
  }>
  value: string
  onValueChange: (value: string) => void
  className?: string
}

export function AnimatedTabs({ tabs, value, onValueChange, className }: AnimatedTabsProps) {
  const [activeIndex, setActiveIndex] = React.useState(0)
  const containerRef = React.useRef<HTMLDivElement>(null)
  const [tabHeight, setTabHeight] = React.useState(0)

  React.useEffect(() => {
    const index = tabs.findIndex(tab => tab.value === value)
    if (index !== -1) {
      setActiveIndex(index)
    }
  }, [value, tabs])

  React.useEffect(() => {
    if (containerRef.current) {
      const containerHeight = containerRef.current.offsetHeight - 8 // minus padding
      setTabHeight(containerHeight / tabs.length)
    }
  }, [tabs.length])

  return (
    <div className={cn("relative", className)}>
      <div ref={containerRef} className="relative flex flex-col bg-muted/50 p-1 rounded-lg">
        {tabs.map((tab, index) => (
          <button
            key={tab.value}
            onClick={() => onValueChange(tab.value)}
            className={cn(
              "relative flex items-center justify-start gap-3 text-sm h-11 px-4 rounded-md transition-colors duration-200 z-10",
              "hover:text-foreground",
              value === tab.value 
                ? "text-foreground" 
                : "text-muted-foreground"
            )}
          >
            {tab.icon}
            <span>{tab.label}</span>
          </button>
        ))}
        
        <motion.div
          className="absolute bg-background shadow-sm rounded-md border border-border/50"
          layoutId="activeTab"
          initial={false}
          animate={{
            y: activeIndex * 44 + 4, // 44px высота каждого таба + отступ
            height: 44 - 8, // высота таба минус отступы
          }}
          transition={{
            type: "spring",
            stiffness: 300,
            damping: 30,
          }}
          style={{
            width: "calc(100% - 8px)",
            left: "4px",
          }}
        />
      </div>
    </div>
  )
} 

--- FILE: ./frontend/components/ui/card.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}


--- FILE: ./frontend/components/ui/provider-icons.tsx ---
import React from 'react';
import { Key } from 'lucide-react';

export type ProviderType = 'google' | 'openrouter' | 'openai' | 'groq' | 'deepseek';

interface ProviderIconProps {
  provider: ProviderType;
  className?: string;
}

export const ProviderIcon: React.FC<ProviderIconProps> = ({ provider, className = "h-4 w-4" }) => {
  switch (provider) {
    case 'google':
      return (
        <svg className={`text-foreground ${className}`} fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
          <path d="M16 8.016A8.522 8.522 0 008.016 16h-.032A8.521 8.521 0 000 8.016v-.032A8.521 8.521 0 007.984 0h.032A8.522 8.522 0 0016 7.984v.032z"/>
        </svg>
      );
    
    case 'openrouter':
      return (
        <svg className={`text-foreground ${className}`} fill="currentColor" fillRule="evenodd" height="1em" style={{flex:'none',lineHeight:1}} viewBox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg">
          <title>OpenRouter</title>
          <path d="M16.804 1.957l7.22 4.105v.087L16.73 10.21l.017-2.117-.821-.03c-1.059-.028-1.611.002-2.268.11-1.064.175-2.038.577-3.147 1.352L8.345 11.03c-.284.195-.495.336-.68.455l-.515.322-.397.234.385.23.53.338c.476.314 1.17.796 2.701 1.866 1.11.775 2.083 1.177 3.147 1.352l.3.045c.694.091 1.375.094 2.825.033l.022-2.159 7.22 4.105v.087L16.589 22l.014-1.862-.635.022c-1.386.042-2.137.002-3.138-.162-1.694-.28-3.26-.926-4.881-2.059l-2.158-1.5a21.997 21.997 0 00-.755-.498l-.467-.28a55.927 55.927 0 00-.76-.43C2.908 14.73.563 14.116 0 14.116V9.888l.14.004c.564-.007 2.91-.622 3.809-1.124l1.016-.58.438-.274c.428-.28 1.072-.726 2.686-1.853 1.621-1.133 3.186-1.78 4.881-2.059 1.152-.19 1.974-.213 3.814-.138l.02-1.907z"></path>
        </svg>
      );
    
    case 'openai':
      return (
        <svg className={`text-foreground ${className}`} fill="currentColor" viewBox="0 0 24 24" role="img" xmlns="http://www.w3.org/2000/svg">
          <title>OpenAI icon</title>
          <path d="M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z"></path>
        </svg>
      );
    
    case 'groq':
      return (
        <svg className={`text-foreground ${className}`} fill="currentColor" fillRule="evenodd" height="1em" style={{flex:'none',lineHeight:1}} viewBox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg">
          <title>Groq</title>
          <path d="M12.036 2c-3.853-.035-7 3-7.036 6.781-.035 3.782 3.055 6.872 6.908 6.907h2.42v-2.566h-2.292c-2.407.028-4.38-1.866-4.408-4.23-.029-2.362 1.901-4.298 4.308-4.326h.1c2.407 0 4.358 1.915 4.365 4.278v6.305c0 2.342-1.944 4.25-4.323 4.279a4.375 4.375 0 01-3.033-1.252l-1.851 1.818A7 7 0 0012.029 22h.092c3.803-.056 6.858-3.083 6.879-6.816v-6.5C18.907 4.963 15.817 2 12.036 2z"></path>
        </svg>
      );
    
    case 'deepseek':
      return (
        <svg className={`text-foreground ${className}`} viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <title>DeepSeek</title>
          <path fill="currentColor" d="M23.748 4.482c-.254-.124-.364.113-.512.234-.051.039-.094.09-.137.136-.372.397-.806.657-1.373.626-.829-.046-1.537.214-2.163.848-.133-.782-.575-1.248-1.247-1.548-.352-.156-.708-.311-.955-.65-.172-.241-.219-.51-.305-.774-.055-.16-.11-.323-.293-.35-.2-.031-.278.136-.356.276-.313.572-.434 1.202-.422 1.84.027 1.436.633 2.58 1.838 3.393.137.093.172.187.129.323-.082.28-.18.552-.266.833-.055.179-.137.217-.329.14a5.526 5.526 0 01-1.736-1.18c-.857-.828-1.631-1.742-2.597-2.458a11.365 11.365 0 00-.689-.471c-.985-.957.13-1.743.388-1.836.27-.098.093-.432-.779-.428-.872.004-1.67.295-2.687.684a3.055 3.055 0 01-.465.137 9.597 9.597 0 00-2.883-.102c-1.885.21-3.39 1.102-4.497 2.623C.082 8.606-.231 10.684.152 12.85c.403 2.284 1.569 4.175 3.36 5.653 1.858 1.533 3.997 2.284 6.438 2.14 1.482-.085 3.133-.284 4.994-1.86.47.234.962.327 1.78.397.63.059 1.236-.03 1.705-.128.735-.156.684-.837.419-.961-2.155-1.004-1.682-.595-2.113-.926 1.096-1.296 2.746-2.642 3.392-7.003.05-.347.007-.565 0-.845-.004-.17.035-.237.23-.256a4.173 4.173 0 001.545-.475c1.396-.763 1.96-2.015 2.093-3.517.02-.23-.004-.467-.247-.588zM11.581 18c-2.089-1.642-3.102-2.183-3.52-2.16-.392.024-.321.471-.235.763.09.288.207.486.371.739.114.167.192.416-.113.603-.673.416-1.842-.14-1.897-.167-1.361-.802-2.5-1.86-3.301-3.307-.774-1.393-1.224-2.887-1.298-4.482-.02-.386.093-.522.477-.592a4.696 4.696 0 011.529-.039c2.132.312 3.946 1.265 5.468 2.774.868.86 1.525 1.887 2.202 2.891.72 1.066 1.494 2.082 2.48 2.914.348.292.625.514.891.677-.802.09-2.14.11-3.054-.614zm1-6.44a.306.306 0 01.415-.287.302.302 0 01.2.288.306.306 0 01-.31.307.303.303 0 01-.304-.308zm3.11 1.596c-.2.081-.399.151-.59.16a1.245 1.245 0 01-.798-.254c-.274-.23-.47-.358-.552-.758a1.73 1.73 0 01.016-.588c.07-.327-.008-.537-.239-.727-.187-.156-.426-.199-.688-.199a.559.559 0 01-.254-.078c-.11-.054-.2-.19-.114-.358.028-.054.16-.186.192-.21.356-.202.767-.136 1.146.016.352.144.618.408 1.001.782.391.451.462.576.685.914.176.265.336.537.445.848.067.195-.019.354-.25.452z"/>
        </svg>
      );
    
    default:
      return <Key className={className} />;
  }
};

// Утилитарная функция для получения иконки по provider string
export const getProviderIcon = (provider: string, className?: string) => {
  return <ProviderIcon provider={provider as ProviderType} className={className} />;
};

// Утилитарная функция для получения иконки по компании
export const getCompanyIcon = (company: string, className?: string) => {
  const providerMap: Record<string, ProviderType> = {
    'Google': 'google',
    'OpenAI': 'openai',
    'DeepSeek': 'deepseek',
    'Groq': 'groq'
  };
  
  const provider = providerMap[company] || 'google';
  return <ProviderIcon provider={provider} className={className} />;
}; 

--- FILE: ./frontend/components/ui/sheet.tsx ---
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


--- FILE: ./frontend/components/ui/sonner.tsx ---
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  )
}

export { Toaster }


--- FILE: ./frontend/components/ui/custom-switch.tsx ---
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"
import { cn } from "@/lib/utils"

const CustomSwitch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-4 w-7 shrink-0 cursor-pointer items-center rounded-full border border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50",
      "data-[state=checked]:bg-primary/20 data-[state=unchecked]:bg-muted/50",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-3 w-3 rounded-full bg-background shadow-sm ring-0 transition-transform",
        "data-[state=checked]:translate-x-3 data-[state=unchecked]:translate-x-0",
        "data-[state=checked]:bg-primary data-[state=unchecked]:bg-muted-foreground/60"
      )}
    />
  </SwitchPrimitives.Root>
))
CustomSwitch.displayName = SwitchPrimitives.Root.displayName

export { CustomSwitch } 

--- FILE: ./frontend/components/ui/tooltip.tsx ---
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 700,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  delayDuration = 700,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root> & { delayDuration?: number }) {
  return (
    <TooltipPrimitive.Provider delayDuration={delayDuration}>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipPrimitive.Provider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 4,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground border border-border animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance shadow-md",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-popover border-l border-t border-border fill-popover z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


--- FILE: ./frontend/components/ui/switch.tsx ---
import * as React from 'react';
import * as SwitchPrimitives from '@radix-ui/react-switch';
import { cn } from '@/lib/utils';

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    ref={ref}
    className={cn(
      'peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',
      className,
    )}
    {...props}
  >
    <SwitchPrimitives.Thumb
      className="pointer-events-none block h-5 w-5 rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };


--- FILE: ./frontend/components/ui/ThemeProvider.tsx ---
'use client';

import * as React from 'react';
import { ThemeProvider as NextThemesProvider } from 'next-themes';

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}


--- FILE: ./frontend/components/ui/CopyButton.tsx ---
'use client';

import { useState, useCallback } from 'react';
import { Check, Copy } from 'lucide-react';

interface CopyButtonProps {
  /** Text that will be copied to the clipboard */
  code: string;
}

export default function CopyButton({ code }: CopyButtonProps) {
  const [copied, setCopied] = useState(false);

  // Copy provided code snippet to the clipboard
  const handleCopy = useCallback(() => {
    navigator.clipboard.writeText(code).then(() => {
      setCopied(true);
      // Reset indicator after a short delay
      setTimeout(() => setCopied(false), 2000);
    });
  }, [code]);

  return (
    <button
      onClick={handleCopy}
      className="p-1.5 rounded-md text-muted-foreground hover:bg-muted hover:text-foreground transition-colors"
      aria-label={copied ? 'Скопировано!' : 'Копировать код'}
    >
      {copied ? (
        <Check className="w-4 h-4 text-green-500" />
      ) : (
        <Copy className="w-4 h-4" />
      )}
    </button>
  );
}


--- FILE: ./frontend/components/ui/icons.tsx ---
export const StopIcon = ({ size = 16 }: { size?: number }) => {
  return (
    <svg
      height={size}
      viewBox="0 0 16 16"
      width={size}
      style={{ color: 'currentcolor' }}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M3 3H13V13H3V3Z"
        fill="currentColor"
      />
    </svg>
  );
};


--- FILE: ./frontend/components/ui/dialog.tsx ---
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}


--- FILE: ./frontend/components/ui/badge.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }


--- FILE: ./frontend/components/ui/sidebar.tsx ---
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { VariantProps, cva } from 'class-variance-authority';
import { PanelLeftIcon } from 'lucide-react';

import { useIsMobile } from '@/frontend/hooks/useIsMobile';
import { cn } from '@/lib/utils';
import { Button } from '@/frontend/components/ui/button';
import { Input } from '@/frontend/components/ui/input';
import { Separator } from '@/frontend/components/ui/separator';
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from '@/frontend/components/ui/sheet';
import { Skeleton } from '@/frontend/components/ui/skeleton';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/frontend/components/ui/tooltip';

const SIDEBAR_COOKIE_NAME = 'sidebar_state';
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = '19rem';
const SIDEBAR_WIDTH_MOBILE = '18rem';
const SIDEBAR_WIDTH_ICON = '3rem';
const SIDEBAR_KEYBOARD_SHORTCUT = 'b';

type SidebarContextProps = {
  state: 'expanded' | 'collapsed';
  open: boolean;
  setOpen: (open: boolean) => void;
  openMobile: boolean;
  setOpenMobile: (open: boolean) => void;
  isMobile: boolean;
  toggleSidebar: () => void;
};

const SidebarContext = React.createContext<SidebarContextProps | null>(null);

function useSidebar() {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error('useSidebar must be used within a SidebarProvider.');
  }

  return context;
}

function SidebarProvider({
  defaultOpen = true,
  open: openProp,
  onOpenChange: setOpenProp,
  className,
  style,
  children,
  ...props
}: React.ComponentProps<'div'> & {
  defaultOpen?: boolean;
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
}) {
  const { isMobile, mounted } = useIsMobile();
  const [openMobile, setOpenMobile] = React.useState(false);

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen);
  const open = openProp ?? _open;
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === 'function' ? value(open) : value;
      if (setOpenProp) {
        setOpenProp(openState);
      } else {
        _setOpen(openState);
      }

      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
    },
    [setOpenProp, open]
  );

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);
  }, [isMobile, setOpen, setOpenMobile]);

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (
        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
        (event.metaKey || event.ctrlKey)
      ) {
        event.preventDefault();
        toggleSidebar();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [toggleSidebar]);

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? 'expanded' : 'collapsed';

  const contextValue = React.useMemo<SidebarContextProps>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
  );

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          data-slot="sidebar-wrapper"
          style={
            {
              '--sidebar-width': SIDEBAR_WIDTH,
              '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn(
            'group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full',
            className
          )}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  );
}

function Sidebar({
  side = 'left',
  variant = 'sidebar',
  collapsible = 'offcanvas',
  className,
  children,
  ...props
}: React.ComponentProps<'div'> & {
  side?: 'left' | 'right';
  variant?: 'sidebar' | 'floating' | 'inset';
  collapsible?: 'offcanvas' | 'icon' | 'none';
}) {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

  if (collapsible === 'none') {
    return (
      <div
        data-slot="sidebar"
        className={cn(
          'bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col',
          className
        )}
        {...props}
      >
        {children}
      </div>
    );
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-slot="sidebar"
          data-mobile="true"
          className="bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden"
          style={
            {
              '--sidebar-width': SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <div
      className="group peer text-sidebar-foreground hidden md:block"
      data-state={state}
      data-collapsible={state === 'collapsed' ? collapsible : ''}
      data-variant={variant}
      data-side={side}
      data-slot="sidebar"
    >
      {/* This is what handles the sidebar gap on desktop */}
      <div
        data-slot="sidebar-gap"
        className={cn(
          'relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear',
          'group-data-[collapsible=offcanvas]:w-0',
          'group-data-[side=right]:rotate-180',
          variant === 'floating' || variant === 'inset'
            ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]'
            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon)'
        )}
      />
      <div
        data-slot="sidebar-container"
        className={cn(
          'fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex',
          side === 'left'
            ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'
            : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',
          // Adjust the padding for floating and inset variants.
          variant === 'floating' || variant === 'inset'
            ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]'
            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l',
          className
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          data-slot="sidebar-inner"
          className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm"
        >
          {children}
        </div>
      </div>
    </div>
  );
}

function SidebarTrigger({
  className,
  onClick,
  ...props
}: React.ComponentProps<typeof Button>) {
  const { toggleSidebar } = useSidebar();

  return (
    <Button
      data-sidebar="trigger"
      data-slot="sidebar-trigger"
      variant="ghost"
      size="icon"
      className={cn('size-7', className)}
      onClick={(event) => {
        onClick?.(event);
        toggleSidebar();
      }}
      {...props}
    >
      <PanelLeftIcon className="size-4" />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
}

function SidebarRail({ className, ...props }: React.ComponentProps<'button'>) {
  const { toggleSidebar } = useSidebar();

  return (
    <button
      data-sidebar="rail"
      data-slot="sidebar-rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        'hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex',
        'in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize',
        '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',
        'hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full',
        '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',
        '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',
        className
      )}
      {...props}
    />
  );
}

function SidebarInset({ className, ...props }: React.ComponentProps<'main'>) {
  return (
    <main
      data-slot="sidebar-inset"
      className={cn(
        'bg-background relative flex w-full flex-1 flex-col',
        'md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2',
        className
      )}
      {...props}
    />
  );
}

function SidebarInput({
  className,
  ...props
}: React.ComponentProps<typeof Input>) {
  return (
    <Input
      data-slot="sidebar-input"
      data-sidebar="input"
      className={cn('bg-background h-8 w-full shadow-none', className)}
      {...props}
    />
  );
}

function SidebarHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-header"
      data-sidebar="header"
      className={cn('flex flex-col gap-2 p-2', className)}
      {...props}
    />
  );
}

function SidebarFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-footer"
      data-sidebar="footer"
      className={cn('flex flex-col gap-2 p-2', className)}
      {...props}
    />
  );
}

function SidebarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof Separator>) {
  return (
    <Separator
      data-slot="sidebar-separator"
      data-sidebar="separator"
      className={cn('bg-sidebar-border mx-2 w-auto', className)}
      {...props}
    />
  );
}

function SidebarContent({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-content"
      data-sidebar="content"
      className={cn(
        'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',
        className
      )}
      {...props}
    />
  );
}

function SidebarGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-group"
      data-sidebar="group"
      className={cn('relative flex w-full min-w-0 flex-col p-2', className)}
      {...props}
    />
  );
}

function SidebarGroupLabel({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<'div'> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : 'div';

  return (
    <Comp
      data-slot="sidebar-group-label"
      data-sidebar="group-label"
      className={cn(
        'text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',
        className
      )}
      {...props}
    />
  );
}

function SidebarGroupAction({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<'button'> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : 'button';

  return (
    <Comp
      data-slot="sidebar-group-action"
      data-sidebar="group-action"
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        // Increases the hit area of the button on mobile.
        'after:absolute after:-inset-2 md:after:hidden',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  );
}

function SidebarGroupContent({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-group-content"
      data-sidebar="group-content"
      className={cn('w-full text-sm', className)}
      {...props}
    />
  );
}

function SidebarMenu({ className, ...props }: React.ComponentProps<'ul'>) {
  return (
    <ul
      data-slot="sidebar-menu"
      data-sidebar="menu"
      className={cn('flex w-full min-w-0 flex-col gap-1', className)}
      {...props}
    />
  );
}

function SidebarMenuItem({ className, ...props }: React.ComponentProps<'li'>) {
  return (
    <li
      data-slot="sidebar-menu-item"
      data-sidebar="menu-item"
      className={cn('group/menu-item relative', className)}
      {...props}
    />
  );
}

const sidebarMenuButtonVariants = cva(
  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',
        outline:
          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',
      },
      size: {
        default: 'h-8 text-sm',
        sm: 'h-7 text-xs',
        lg: 'h-12 text-sm group-data-[collapsible=icon]:p-0!',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

function SidebarMenuButton({
  asChild = false,
  isActive = false,
  variant = 'default',
  size = 'default',
  tooltip,
  className,
  ...props
}: React.ComponentProps<'button'> & {
  asChild?: boolean;
  isActive?: boolean;
  tooltip?: string | React.ComponentProps<typeof TooltipContent>;
} & VariantProps<typeof sidebarMenuButtonVariants>) {
  const Comp = asChild ? Slot : 'button';
  const { isMobile, state } = useSidebar();

  const button = (
    <Comp
      data-slot="sidebar-menu-button"
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props}
    />
  );

  if (!tooltip) {
    return button;
  }

  if (typeof tooltip === 'string') {
    tooltip = {
      children: tooltip,
    };
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side="right"
        align="center"
        hidden={state !== 'collapsed' || isMobile}
        {...tooltip}
      />
    </Tooltip>
  );
}

function SidebarMenuAction({
  className,
  asChild = false,
  showOnHover = false,
  ...props
}: React.ComponentProps<'button'> & {
  asChild?: boolean;
  showOnHover?: boolean;
}) {
  const Comp = asChild ? Slot : 'button';

  return (
    <Comp
      data-slot="sidebar-menu-action"
      data-sidebar="menu-action"
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        // Increases the hit area of the button on mobile.
        'after:absolute after:-inset-2 md:after:hidden',
        'peer-data-[size=sm]/menu-button:top-1',
        'peer-data-[size=default]/menu-button:top-1.5',
        'peer-data-[size=lg]/menu-button:top-2.5',
        'group-data-[collapsible=icon]:hidden',
        showOnHover &&
          'peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0',
        className
      )}
      {...props}
    />
  );
}

function SidebarMenuBadge({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-menu-badge"
      data-sidebar="menu-badge"
      className={cn(
        'text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none',
        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',
        'peer-data-[size=sm]/menu-button:top-1',
        'peer-data-[size=default]/menu-button:top-1.5',
        'peer-data-[size=lg]/menu-button:top-2.5',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  );
}

function SidebarMenuSkeleton({
  className,
  showIcon = false,
  ...props
}: React.ComponentProps<'div'> & {
  showIcon?: boolean;
}) {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);

  return (
    <div
      data-slot="sidebar-menu-skeleton"
      data-sidebar="menu-skeleton"
      className={cn('flex h-8 items-center gap-2 rounded-md px-2', className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-(--skeleton-width) flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            '--skeleton-width': width,
          } as React.CSSProperties
        }
      />
    </div>
  );
}

function SidebarMenuSub({ className, ...props }: React.ComponentProps<'ul'>) {
  return (
    <ul
      data-slot="sidebar-menu-sub"
      data-sidebar="menu-sub"
      className={cn(
        'border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  );
}

function SidebarMenuSubItem({
  className,
  ...props
}: React.ComponentProps<'li'>) {
  return (
    <li
      data-slot="sidebar-menu-sub-item"
      data-sidebar="menu-sub-item"
      className={cn('group/menu-sub-item relative', className)}
      {...props}
    />
  );
}

function SidebarMenuSubButton({
  asChild = false,
  size = 'md',
  isActive = false,
  className,
  ...props
}: React.ComponentProps<'a'> & {
  asChild?: boolean;
  size?: 'sm' | 'md';
  isActive?: boolean;
}) {
  const Comp = asChild ? Slot : 'a';

  return (
    <Comp
      data-slot="sidebar-menu-sub-button"
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',
        size === 'sm' && 'text-xs',
        size === 'md' && 'text-sm',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  );
}

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};


--- FILE: ./frontend/components/ui/separator.tsx ---
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }


--- FILE: ./frontend/components/ui/button.tsx ---
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const buttonVariants = cva(
  'cursor-pointer inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:opacity-50 disabled:cursor-not-allowed [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',
  {
    variants: {
      variant: {
        default:
          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90 disabled:hover:bg-primary',
        destructive:
          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60 disabled:hover:bg-destructive dark:disabled:hover:bg-destructive/60',
        outline:
          'border border-white bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 disabled:hover:bg-background disabled:hover:text-foreground dark:disabled:hover:bg-input/30',
        secondary:
          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80 disabled:hover:bg-secondary',
        ghost:
          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50 disabled:hover:bg-transparent disabled:hover:text-foreground',
        link: 'text-primary underline-offset-4 hover:underline disabled:hover:no-underline',
      },
      size: {
        default: 'h-9 px-4 py-2 has-[>svg]:px-3',
        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',
        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',
        icon: 'size-9',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

const Button = React.forwardRef<
  HTMLButtonElement,
  React.ComponentPropsWithoutRef<'button'> &
    VariantProps<typeof buttonVariants> & {
      asChild?: boolean;
    }
>(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : 'button';

  return (
    <Comp
      ref={ref}
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
});

Button.displayName = 'Button';

export { Button, buttonVariants };


--- FILE: ./frontend/components/ui/dropdown-menu.tsx ---
'use client';

import * as React from 'react';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />;
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  );
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  );
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  );
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  );
}

function DropdownMenuItem({
  className,
  inset,
  variant = 'default',
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean;
  variant?: 'default' | 'destructive';
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  );
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  );
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  );
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  );
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',
        className
      )}
      {...props}
    />
  );
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn('bg-border -mx-1 my-1 h-px', className)}
      {...props}
    />
  );
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        'text-muted-foreground ml-auto text-xs tracking-widest',
        className
      )}
      {...props}
    />
  );
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />;
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  );
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',
        className
      )}
      {...props}
    />
  );
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
};


--- FILE: ./frontend/components/ui/textarea.tsx ---
import * as React from 'react';

import { cn } from '@/lib/utils';

function Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    />
  );
}

export { Textarea };


--- FILE: ./frontend/components/ui/input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }


--- FILE: ./frontend/components/ui/skeleton.tsx ---
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }


--- FILE: ./frontend/components/ui/ThemeToggler.tsx ---
'use client';

import * as React from 'react';
import { Moon, Sun } from 'lucide-react';
import { useTheme } from 'next-themes';

import { Button } from '@/frontend/components/ui/button';

export default function ThemeToggler() {
  const { setTheme, theme } = useTheme();

  return (
    <Button
      variant="outline"
      size="icon"
      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
      className="fixed top-4 right-4"
    >
      <Sun className="h-[1.2rem] w-[1.2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  );
}


--- FILE: ./frontend/components/ui/MessageLoading.tsx ---
export default function MessageLoading() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      className="text-foreground"
    >
      <circle cx="4" cy="12" r="2" fill="currentColor">
        <animate
          id="spinner_qFRN"
          begin="0;spinner_OcgL.end+0.25s"
          attributeName="cy"
          calcMode="spline"
          dur="0.6s"
          values="12;6;12"
          keySplines=".33,.66,.66,1;.33,0,.66,.33"
        />
      </circle>
      <circle cx="12" cy="12" r="2" fill="currentColor">
        <animate
          begin="spinner_qFRN.begin+0.1s"
          attributeName="cy"
          calcMode="spline"
          dur="0.6s"
          values="12;6;12"
          keySplines=".33,.66,.66,1;.33,0,.66,.33"
        />
      </circle>
      <circle cx="20" cy="12" r="2" fill="currentColor">
        <animate
          id="spinner_OcgL"
          begin="spinner_qFRN.begin+0.2s"
          attributeName="cy"
          calcMode="spline"
          dur="0.6s"
          values="12;6;12"
          keySplines=".33,.66,.66,1;.33,0,.66,.33"
        />
      </circle>
    </svg>
  );
}


--- FILE: ./frontend/hooks/useModelVisibilitySync.ts ---
import { useEffect, useRef, useCallback } from 'react';
import { useQuery, useMutation, useConvexAuth } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { useModelVisibilityStore } from '@/frontend/stores/ModelVisibilityStore';

export function useModelVisibilitySync() {
  const { isAuthenticated } = useConvexAuth();
  const store = useModelVisibilityStore; // ссылка на стор
  const {
    syncWithConvex,
    setLoading,
  } = store();

  const saveTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const isSavingRef = useRef(false);

  // Fetch model visibility settings from Convex
  const visibilityData = useQuery(
    api.modelVisibility.getModelVisibility,
    isAuthenticated ? {} : 'skip'
  );
  const saveVisibility = useMutation(api.modelVisibility.setModelVisibility);

  // Sync data from Convex to local store
  useEffect(() => {
    if (visibilityData) {
      syncWithConvex(visibilityData);
    } else if (visibilityData === null) {
      setLoading(false);
    }
  }, [visibilityData, syncWithConvex, setLoading]);

  // Save changes to Convex with debouncing and duplicate prevention
  const saveToConvex = useCallback(() => {
    if (!isAuthenticated || isSavingRef.current) return;

    // Очищаем предыдущий таймер
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }

    // Устанавливаем новый таймер
    saveTimeoutRef.current = setTimeout(async () => {
      if (isSavingRef.current) return;

      const { favoriteModels, enabledProviders, selectedModel } = store.getState(); // Актуальные данные

      isSavingRef.current = true;
      try {
        await saveVisibility({
          favoriteModels,
          enabledProviders,
          selectedModel,
        });
      } catch (error) {
        console.error('Failed to save model visibility settings:', error);
      } finally {
        isSavingRef.current = false;
      }
    }, 150);
  }, [isAuthenticated, saveVisibility]);

  // Очищаем таймер при размонтировании
  useEffect(() => {
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, []);

  return { saveToConvex };
} 

--- FILE: ./frontend/hooks/useQuoteShortcuts.ts ---
import { useEffect } from 'react';
import { useQuoteStore } from '@/frontend/stores/QuoteStore';

export function useQuoteShortcuts() {
  const { clearQuote } = useQuoteStore();

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      // Escape - очистить цитату
      if (event.key === 'Escape') {
        clearQuote();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [clearQuote]);
} 

--- FILE: ./frontend/hooks/useUserSync.ts ---
import { useEffect } from 'react';
import { useMutation, useConvexAuth } from 'convex/react';
import { api } from '@/convex/_generated/api';

export function useUserSync() {
  const { isAuthenticated, isLoading } = useConvexAuth();
  const syncUser = useMutation(api.users.sync);

  useEffect(() => {
    if (!isLoading && isAuthenticated) {
      syncUser().catch(() => {
        /* error ignored */
      });
    }
  }, [isAuthenticated, isLoading, syncUser]);
}


--- FILE: ./frontend/hooks/useConvexMessages.ts ---
import { useQuery, useMutation } from "convex/react";
import { api } from "@/convex/_generated/api";
import { Id } from "@/convex/_generated/dataModel";

export function useConvexMessages(threadId: Id<"threads"> | null) {
  // Получение сообщений треда
  const messages = useQuery(
    api.messages.get,
    threadId ? { threadId } : "skip"
  );

  // Мутации
  const addMessage = useMutation<typeof api.messages.send>(api.messages.send);
  const updateMessage = useMutation(api.messages.edit);
  const deleteMessage = useMutation(api.messages.remove);
  const deleteMessagesAfter = useMutation(api.messages.removeAfter);

  // Обертки для удобства использования
  const handleAddMessage = async (
    role: "user" | "assistant",
    content: string
  ) => {
    if (!threadId) return null;
    return await addMessage({
      threadId,
      role,
      content,
    });
  };

  const handleUpdateMessage = async (
    messageId: Id<"messages">,
    content: string
  ) => {
    await updateMessage({ messageId, content });
  };

  const handleDeleteMessage = async (messageId: Id<"messages">) => {
    await deleteMessage({ messageId });
  };

  const handleDeleteMessagesAfter = async (afterMessageId: Id<"messages">) => {
    if (!threadId) return;
    await deleteMessagesAfter({ threadId, afterMessageId });
  };

  return {
    messages: messages || [],
    isLoading: messages === undefined,
    addMessage: handleAddMessage,
    updateMessage: handleUpdateMessage,
    deleteMessage: handleDeleteMessage,
    deleteMessagesAfter: handleDeleteMessagesAfter,
  };
} 

--- FILE: ./frontend/hooks/useConvexThreads.ts ---
import { useQuery, useMutation } from "convex/react";
import { api } from "@/convex/_generated/api";
import { useAuthStore } from "@/frontend/stores/AuthStore";
import { Id } from "@/convex/_generated/dataModel";

export function useConvexThreads() {
  const { user } = useAuthStore();
  
  // Получение тредов пользователя
  const threads = useQuery(
    api.threads.list,
    user ? {} : "skip"
  );

  // Мутации
  const createThread = useMutation(api.threads.create);
  const updateThreadTitle = useMutation(api.threads.rename);
  const deleteThread = useMutation(api.threads.remove);

  // Обертки для удобства использования
  const handleCreateThread = async (title: string) => {
    if (!user) return null;
    return await createThread({
      title,
    });
  };

  const handleUpdateThreadTitle = async (threadId: Id<"threads">, title: string) => {
    await updateThreadTitle({ threadId, title });
  };

  const handleDeleteThread = async (threadId: Id<"threads">) => {
    await deleteThread({ threadId });
  };

  return {
    threads: threads || [],
    isLoading: threads === undefined,
    createThread: handleCreateThread,
    updateThreadTitle: handleUpdateThreadTitle,
    deleteThread: handleDeleteThread,
  };
} 

--- FILE: ./frontend/hooks/useMessageSummary.ts ---
import { useCompletion } from '@ai-sdk/react';
import { useAPIKeyStore } from '@/frontend/stores/APIKeyStore';
import { toast } from 'sonner';

import { useMutation } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { Id } from '@/convex/_generated/dataModel';

interface MessageSummaryPayload {
  title: string;
  isTitle?: boolean;
  messageId: string;
  threadId: Id<'threads'>;
}

export const useMessageSummary = () => {
  const { getKey } = useAPIKeyStore();
  const renameThread = useMutation(api.threads.rename);

  const googleApiKey = getKey('google');

  const { complete, isLoading } = useCompletion({
    api: '/api/completion',
    headers: googleApiKey ? { 'X-Google-API-Key': googleApiKey } : undefined,
    onResponse: async (response) => {
      try {
        const payload: MessageSummaryPayload = await response.json();

        if (response.ok) {
          const { title, isTitle, threadId } = payload;

          if (isTitle) {
            await renameThread({ threadId, title });
          }
        } else {
          toast.error('Failed to generate a summary for the message');
        }
      } catch {
        /* ignore errors */
      }
    },
  });

  return {
    complete,
    isLoading,
  };
};


--- FILE: ./frontend/hooks/useScrollHide.ts ---
import { useState, useEffect, useCallback, RefObject } from 'react';

/**
 * Options for {@link useScrollHide}.
 *
 * @template T Element type for the panel reference.
 */
interface UseScrollHideOptions<T extends HTMLElement = HTMLElement> {
  /** Minimum scroll difference before the panel reacts. */
  threshold?: number;
  /** Hides the panel when scrolling down if `true`. */
  hideOnScrollDown?: boolean;
  /** Shows the panel when scrolling up if `true`. */
  showOnScrollUp?: boolean;
  /** Optional ref to the panel element that moves with the scroll. */
  panelRef?: RefObject<T | null>;
}

export function useScrollHide<T extends HTMLElement = HTMLElement>({
  threshold = 10,
  hideOnScrollDown = true,
  showOnScrollUp = true,
  panelRef,
}: UseScrollHideOptions<T> = {}) {
  const [isVisible, setIsVisible] = useState(true);
  const [lastScrollY, setLastScrollY] = useState(0);

  const handleScroll = useCallback(() => {
    const currentScrollY = window.scrollY;
    const scrollDifference = Math.abs(currentScrollY - lastScrollY);

    // Если прокрутка слишком мала, игнорируем
    if (scrollDifference < threshold) {
      return;
    }

    // Если мы в самом верху страницы, всегда показываем элементы
    if (currentScrollY <= 50) {
      setIsVisible(true);
      setLastScrollY(currentScrollY);
      return;
    }

    // Проверяем, мобильное ли устройство
    const isMobile = window.innerWidth <= 768;

    if (currentScrollY > lastScrollY && hideOnScrollDown) {
      // Прокрутка вниз - скрываем
      setIsVisible(false);
      // Применяем трансформацию только на мобильных устройствах
      if (panelRef?.current && isMobile) {
        const max = panelRef.current.offsetWidth - 48;
        const delta = Math.min(currentScrollY - lastScrollY, max);
        panelRef.current.style.transform = `translateX(${delta}px)`;
      }
    } else if (currentScrollY < lastScrollY && showOnScrollUp) {
      // Прокрутка вверх - показываем
      setIsVisible(true);
      if (panelRef?.current && isMobile) {
        panelRef.current.style.transform = 'translateX(0)';
      }
    }

    setLastScrollY(currentScrollY);
  }, [lastScrollY, threshold, hideOnScrollDown, showOnScrollUp, panelRef]);

  // Захватываем начальное значение scrollY только один раз при монтировании
  useEffect(() => {
    setLastScrollY(window.scrollY);
  }, []);

  // Регистрируем и снимаем обработчик прокрутки. Зависим от handleScroll, но этот
  // эффект больше не изменяет состояние, поэтому не вызывает бесконечные циклы.
  useEffect(() => {
    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, [handleScroll]);

  return isVisible;
} 

--- FILE: ./frontend/hooks/useStreamBuffer.ts ---
import { useRef } from 'react';

export function useStreamBuffer(onFlush: (text: string) => void) {
  const buffer = useRef('');
  const raf = useRef<number | undefined>(undefined);

  const push = (chunk: string) => {
    buffer.current += chunk;
    if (!raf.current) {
      raf.current = requestAnimationFrame(() => {
        onFlush(buffer.current);
        buffer.current = '';
        raf.current = undefined;
      });
    }
  };
  return push;
}


--- FILE: ./frontend/hooks/useWelcomeThread.ts ---
import { useEffect } from 'react';
import { useMutation, useQuery } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { useAPIKeyStore } from '@/frontend/stores/APIKeyStore';
import { useRouter } from 'next/navigation';

export default function useWelcomeThread() {
  const router = useRouter();
  const { hasRequiredKeys } = useAPIKeyStore();

  const welcome = useQuery(api.threads.listSystem, {});
  const createThread = useMutation(api.threads.create);
  const sendMessage = useMutation(api.messages.send);

  useEffect(() => {
    if (hasRequiredKeys()) return;
    (async () => {
      let id = welcome?.[0]?._id;
      if (!id) {
        id = await createThread({ title: 'API Keys', system: true });
        await sendMessage({
          threadId: id,
          role: 'assistant',
          content: 'To use Pak.chat you need to enter your API keys.',
        });
      }
      router.replace(`/chat/${id}`);
    })();
  }, [welcome, hasRequiredKeys, createThread, sendMessage, router]);
}


--- FILE: ./frontend/hooks/useKeyboardInsets.ts ---
import { useEffect } from 'react';

export function useKeyboardInsets(onChange: (height: number) => void) {
  useEffect(() => {
    const handle = () => {
      const height = window.visualViewport
        ? window.innerHeight - window.visualViewport.height
        : 0;
      onChange(height);
    };
    window.visualViewport?.addEventListener('resize', handle);
    return () => window.visualViewport?.removeEventListener('resize', handle);
  }, [onChange]);
}


--- FILE: ./frontend/hooks/useSettings.ts ---
import { useEffect } from 'react';
import { useSettingsStore } from '@/frontend/stores/SettingsStore';
import { useAuthStore } from '@/frontend/stores/AuthStore';

export function useSettings() {
  const { settings } = useSettingsStore();
  const setBlur = useAuthStore((s) => s.toggleBlur);
  const blurPersonalData = useAuthStore((s) => s.blurPersonalData);

  useEffect(() => {
    const applyFontSettings = () => {
      const root = document.documentElement;
      
      // Apply general font
      if (settings.generalFont === 'Proxima Vara') {
        root.style.setProperty('--font-sans', 'Proxima Vara, sans-serif');
      } else {
        root.style.setProperty('--font-sans', 'system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif');
      }

      // Apply code font
      if (settings.codeFont === 'Berkeley Mono') {
        root.style.setProperty('--font-mono', 'Berkeley Mono, "JetBrains Mono", "Fira Code", "Cascadia Code", Consolas, monospace');
      } else {
        root.style.setProperty('--font-mono', 'ui-monospace, "SF Mono", Monaco, "Cascadia Code", "Roboto Mono", Consolas, "Courier New", monospace');
      }
    };

    applyFontSettings();
    if (blurPersonalData !== settings.hidePersonal) {
      setBlur();
    }
  }, [settings.generalFont, settings.codeFont, settings.hidePersonal]);

  return settings;
} 

--- FILE: ./frontend/hooks/useModelSync.ts ---
import { useEffect, useRef } from 'react';
import { useModelStore } from '@/frontend/stores/ModelStore';
import { useModelVisibilityStore } from '@/frontend/stores/ModelVisibilityStore';
import { useModelVisibilitySync } from './useModelVisibilitySync';
import { useConvexAuth } from 'convex/react';

export function useModelSync() {
  const { isAuthenticated } = useConvexAuth();
  const { selectedModel: localSelectedModel, syncSelectedModel } = useModelStore();
  const { selectedModel: convexSelectedModel, setSelectedModel } = useModelVisibilityStore();
  const { saveToConvex } = useModelVisibilitySync();
  
  const isInitialized = useRef(false);
  const lastSynced = useRef<string | null>(null);

  // Синхронизация из Convex в локальное хранилище при первой загрузке
  useEffect(() => {
    if (isAuthenticated && convexSelectedModel && !isInitialized.current) {
      if (localSelectedModel !== convexSelectedModel) {
        syncSelectedModel(convexSelectedModel);
        lastSynced.current = convexSelectedModel;
      }
      isInitialized.current = true;
    }
  }, [isAuthenticated, convexSelectedModel, localSelectedModel, syncSelectedModel]);

  // Синхронизация изменений локальной модели в Convex
  useEffect(() => {
    if (isAuthenticated && isInitialized.current && localSelectedModel !== lastSynced.current) {
      setSelectedModel(localSelectedModel);
      saveToConvex();
      lastSynced.current = localSelectedModel;
    }
  }, [isAuthenticated, localSelectedModel, setSelectedModel, saveToConvex]);

  // Синхронизация изменений из Convex в локальное хранилище
  useEffect(() => {
    if (isAuthenticated && isInitialized.current && convexSelectedModel !== lastSynced.current) {
      syncSelectedModel(convexSelectedModel);
      lastSynced.current = convexSelectedModel;
    }
  }, [isAuthenticated, convexSelectedModel, syncSelectedModel]);
} 

--- FILE: ./frontend/hooks/useTextSelection.ts ---
import { useCallback, useEffect, useState } from 'react';

export interface TextSelection {
  text: string;
  range: Range | null;
  rect: DOMRect | null;
}

export function useTextSelection() {
  const [selection, setSelection] = useState<TextSelection | null>(null);

  const handleSelectionChange = useCallback(() => {
    const sel = window.getSelection();
    
    if (!sel || sel.rangeCount === 0) {
      setSelection(null);
      return;
    }

    const range = sel.getRangeAt(0);
    const text = sel.toString().trim();

    if (!text) {
      setSelection(null);
      return;
    }

    // Получаем позицию выделенного текста
    const rect = range.getBoundingClientRect();

    // Проверяем, что выделение видимо на экране
    if (rect.width === 0 || rect.height === 0) {
      setSelection(null);
      return;
    }

    setSelection({
      text,
      range,
      rect,
    });
  }, []);

  const clearSelection = useCallback(() => {
    const sel = window.getSelection();
    if (sel) {
      sel.removeAllRanges();
    }
    setSelection(null);
  }, []);

  useEffect(() => {
    document.addEventListener('selectionchange', handleSelectionChange);
    
    return () => {
      document.removeEventListener('selectionchange', handleSelectionChange);
    };
  }, [handleSelectionChange]);

  return {
    selection,
    clearSelection,
  };
} 

--- FILE: ./frontend/hooks/useIsMobile.ts ---
import { useState, useEffect } from 'react';

export function useIsMobile(breakpoint: number = 768) {
  const [isMobile, setIsMobile] = useState(false);
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
    
    const checkMobile = () => {
      setIsMobile(window.innerWidth < breakpoint);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    
    return () => window.removeEventListener('resize', checkMobile);
  }, [breakpoint]);

  return { isMobile: mounted ? isMobile : false, mounted };
} 

--- FILE: ./frontend/lib/image.ts ---
export async function createImagePreview(file: File, maxDim = 400): Promise<File | null> {
  if (!file.type.startsWith('image/')) return null;

  // Skip very small images to save CPU; preview not necessary
  if (file.size <= 200 * 1024) return null; // 200 KB

  // Read the file into a data URL
  const dataUrl: string = await new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = (e) => reject(e);
    reader.readAsDataURL(file);
  });

  // Create HTMLImageElement to get dimensions
  const img: HTMLImageElement = await new Promise((resolve, reject) => {
    const image = new Image();
    image.onload = () => resolve(image);
    image.onerror = (e) => reject(e);
    image.src = dataUrl;
  });

  let { width, height } = img;
  if (width === 0 || height === 0) return null;

  // Calculate new size keeping aspect ratio
  if (width > height) {
    if (width > maxDim) {
      height = Math.round((height * maxDim) / width);
      width = maxDim;
    }
  } else {
    if (height > maxDim) {
      width = Math.round((width * maxDim) / height);
      height = maxDim;
    }
  }

  const canvas = document.createElement('canvas');
  canvas.width = width;
  canvas.height = height;
  const ctx = canvas.getContext('2d');
  if (!ctx) return null;
  ctx.drawImage(img, 0, 0, width, height);

  // Convert canvas back to Blob (JPEG 0.7 quality)
  const blob: Blob | null = await new Promise((resolve) => {
    canvas.toBlob((b) => resolve(b), 'image/jpeg', 0.7);
  });

  if (!blob) return null;

  // Return as File object
  const previewFileName = file.name.replace(/\.[^/.]+$/, '') + '_preview.jpg';
  return new File([blob], previewFileName, { type: 'image/jpeg' });
} 

--- FILE: ./frontend/lib/crypto.ts ---
import CryptoJS from 'crypto-js';

/**
 * Encrypt arbitrary data with a passphrase.
 */
export function encryptData<T>(data: T, passphrase: string): string {
  const json = JSON.stringify(data);
  return CryptoJS.AES.encrypt(json, passphrase).toString();
}

/**
 * Decrypt data using the same passphrase used for encryption.
 */
export function decryptData<T>(cipher: string, passphrase: string): T {
  const bytes = CryptoJS.AES.decrypt(cipher, passphrase);
  const json = bytes.toString(CryptoJS.enc.Utf8);
  return JSON.parse(json) as T;
}


--- FILE: ./frontend/worker/shikiWorkerFactory.ts ---
const cache: Record<string, Worker> = {};

export async function getShikiWorker(lang: string): Promise<Worker> {
  if (cache[lang]) return cache[lang];
  const worker = new Worker(new URL('./shikiWorker.ts', import.meta.url), {
    type: 'module',
  });
  cache[lang] = worker;
  return worker;
}


--- FILE: ./frontend/worker/shikiWorker.ts ---
import { getSingletonHighlighter } from 'shiki/bundle/web';

interface Msg {
  code: string;
  lang: string;
}

const theme = 'css-variables';
const cache = new Map<string, any>();

self.onmessage = async (ev: MessageEvent<Msg>) => {
  const { code, lang } = ev.data;
  let highlighter = cache.get(lang);
  if (!highlighter) {
    highlighter = await getSingletonHighlighter({ themes: [theme], langs: [lang] });
    cache.set(lang, highlighter);
  }
  const html = highlighter.codeToHtml(code, { lang, theme });
  self.postMessage(html);
};


--- FILE: ./cloudflare/worker.ts ---
export default {
  async fetch(req: Request, env: {}, ctx: ExecutionContext) {
    const url = new URL(req.url);
    const upstream = 'https://pak.chat.pages.dev' + url.pathname + url.search;
    const resp = await fetch(upstream, {
      headers: { ...Object.fromEntries(req.headers) },
      cf: { brotli: true, cacheTtl: 0, cacheEverything: false }
    });
    return resp;
  }
};


--- FILE: ./convex/schema.ts ---
// convex/schema.ts
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  // Users table synchronized with Firebase
  users: defineTable({
    name: v.string(),
    email: v.optional(v.string()),
    avatarUrl: v.optional(v.string()),
    tokenIdentifier: v.string(),
  }).index("by_token", ["tokenIdentifier"]),

  // User settings including encrypted API keys
  userSettings: defineTable({
    userId: v.id("users"),
    encryptedApiKeys: v.string(),
    uiFont: v.optional(v.string()),
    codeFont: v.optional(v.string()),
    hidePersonal: v.optional(v.boolean()),
    // Whether to keep full history of regenerations (dialog snapshots)
    saveRegenerationHistory: v.optional(v.boolean()),
  }).index("by_user", ["userId"]),

  // API Keys stored securely in Convex
  apiKeys: defineTable({
    userId: v.id("users"),
    google: v.optional(v.string()),
    openrouter: v.optional(v.string()),
    openai: v.optional(v.string()),
    groq: v.optional(v.string()),
    encryptedAt: v.number(),
  }).index("by_user", ["userId"]),

  // Model visibility settings
  modelVisibility: defineTable({
    userId: v.id("users"),
    favoriteModels: v.array(v.string()),
    enabledProviders: v.array(v.string()),
    selectedModel: v.optional(v.string()),
  }).index("by_user", ["userId"]),

  // Chat threads
  threads: defineTable({
    userId: v.id("users"),
    title: v.string(),
    system: v.optional(v.boolean()),
    createdAt: v.number(),
    pinned: v.optional(v.boolean()),
    clonedFrom: v.optional(v.id("threads")),
    forkedFromMessageId: v.optional(v.id("messages")),
    currentDialogVersion: v.optional(v.number()),
  })
    .index("by_user_and_time", ["userId", "createdAt"])
    .searchIndex("by_title", { searchField: "title" }),

  // Messages
  messages: defineTable({
    threadId: v.id("threads"),
    authorId: v.id("users"),
    role: v.union(v.literal("user"), v.literal("assistant")),
    content: v.string(),
    createdAt: v.number(),
    model: v.optional(v.string()),
    // Dialog snapshot/version metadata
    dialogVersion: v.optional(v.number()),
    isActive: v.optional(v.boolean()),
    regeneratedFromMessageId: v.optional(v.id("messages")),
    // Message metadata
  }).index("by_thread_and_time", ["threadId", "createdAt"]),

  // Attachments for messages
  attachments: defineTable({
    threadId: v.id("threads"),
    fileId: v.string(),
    name: v.string(),
    type: v.string(),
    messageId: v.optional(v.id("messages")),
    width: v.optional(v.number()),
    height: v.optional(v.number()),
    // ID of a downscaled preview image stored in Convex Storage (optional)
    previewId: v.optional(v.string()),
    // Original file size in bytes – helps decide when to lazy-load
    size: v.optional(v.number()),
  })
    .index("by_thread", ["threadId"])
    .index("by_message", ["messageId"]),

  // Publicly shared chat threads
  sharedThreads: defineTable({
    shareId: v.string(),
    originalThreadId: v.id("threads"),
    userId: v.id("users"),
    title: v.string(),
    isAnonymous: v.optional(v.boolean()),
    messages: v.array(
      v.object({
        role: v.union(v.literal("user"), v.literal("assistant")),
        content: v.string(),
      }),
    ),
  }).index("by_share_id", ["shareId"]),

});


--- FILE: ./convex/messages.ts ---
// convex/messages.ts
import { query, mutation } from "./_generated/server";
import { v } from "convex/values";
import { Id } from "./_generated/dataModel";
import { currentUserId } from "./utils";

/** Get messages for a thread */
export const get = query({
  args: {
    threadId: v.id("threads"),
    cursor: v.optional(v.string()),
    limit: v.optional(v.number()),
  },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (uid === null) {
      // No user record yet, so no messages to return
      return [];
    }
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    const q = ctx.db
      .query("messages")
      .withIndex("by_thread_and_time", (q) => q.eq("threadId", args.threadId))
      .order("asc");

    const all = await q.collect();
    
    // Use thread's currentDialogVersion as the source of truth
    let currentDialogVersion = thread.currentDialogVersion ?? 1;
    
    // Filter messages for the current dialog version
    return all.filter((m) => {
      // Legacy messages without dialogVersion are always shown (backward compatibility)
      if (m.dialogVersion === undefined) return true;
      
      // Both assistant and user messages: only show if they belong to current version and are active
      return m.dialogVersion === currentDialogVersion && (m.isActive ?? true);
    });
  },
});

/** Get a single message by ID */
export const getOne = query({
  args: { messageId: v.id("messages") },
  async handler(ctx, { messageId }) {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      throw new Error("Unauthenticated: User identity not found.");
    }

    const user = await ctx.db
      .query("users")
      .withIndex("by_token", (q) => q.eq("tokenIdentifier", identity.subject))
      .unique();

    if (!user) {
      throw new Error("Unauthenticated: User not found in database.");
    }

    const msg = await ctx.db.get(messageId);
    if (!msg) {
      return null;
    }

    const thread = await ctx.db.get(msg.threadId);
    if (!thread || thread.userId !== user._id) {
      throw new Error("Permission denied: User does not own this thread.");
    }

    return msg;
  },
});

/** Get latest messages for preview */
export const preview = query({
  args: { threadId: v.id("threads"), limit: v.optional(v.number()) },
  async handler(ctx, { threadId, limit }) {
    const uid = await currentUserId(ctx);
    if (uid === null) return [];
    const thread = await ctx.db.get(threadId);
    if (!thread || thread.userId !== uid) return [];
    
    const msgs = await ctx.db
      .query("messages")
      .withIndex("by_thread_and_time", (q) => q.eq("threadId", threadId))
      .order("desc")
      .collect();
    
    // Use thread's currentDialogVersion as the source of truth
    let currentDialogVersion = thread.currentDialogVersion ?? 1;
    
    // Filter and take latest messages
    return msgs
      .filter((m) => {
        // Legacy messages without dialogVersion are always shown
        if (m.dialogVersion === undefined) return true;
        
        // Both assistant and user messages: only show if they belong to current version and are active
        return m.dialogVersion === currentDialogVersion && (m.isActive ?? true);
      })
      .slice(0, limit ?? 4);
  },
});

/** Send a message */
export const send = mutation({
  args: {
    threadId: v.id("threads"),
    role: v.union(v.literal("user"), v.literal("assistant")),
    content: v.string(),
    model: v.optional(v.string()),
    dialogVersion: v.optional(v.number()),
    regeneratedFromMessageId: v.optional(v.id("messages")),
    isActive: v.optional(v.boolean()),
  },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    if (!args.content.trim()) throw new Error("Empty message");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    const id = await ctx.db.insert("messages", {
      threadId: args.threadId,
      authorId: uid,
      role: args.role,
      content: args.content,
      createdAt: Date.now(),
      model: args.model,
      dialogVersion: args.dialogVersion,
      isActive: args.isActive ?? true,
      regeneratedFromMessageId: args.regeneratedFromMessageId,
    });
    return id as Id<"messages">;
  },
});

/** Edit an existing message */
export const edit = mutation({
  args: { messageId: v.id("messages"), content: v.string() },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const message = await ctx.db.get(args.messageId);
    if (!message) throw new Error("Message not found");
    const thread = await ctx.db.get(message.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Permission denied");
    await ctx.db.patch(args.messageId, { content: args.content });
  },
});

/** Delete a message */
export const remove = mutation({
  args: { messageId: v.id("messages") },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const msg = await ctx.db.get(args.messageId);
    if (!msg) return;
    const thread = await ctx.db.get(msg.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Permission denied");
    await ctx.db.delete(args.messageId);
  },
});

/** Remove all messages after a given one */
export const removeAfter = mutation({
  args: { threadId: v.id("threads"), afterMessageId: v.id("messages") },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Permission denied");
    const after = await ctx.db.get(args.afterMessageId);
    if (!after || after.threadId !== args.threadId)
      throw new Error("Message mismatch");
    const msgs = await ctx.db
      .query("messages")
      .withIndex("by_thread_and_time", (q) =>
        q
          .eq("threadId", args.threadId)
          .gt("createdAt", after.createdAt)
      )
      .collect();
    await Promise.all(msgs.map((m) => ctx.db.delete(m._id)));
  },
});

/** Atomically prepare history for regeneration */
export const prepareForRegeneration = mutation({
  args: {
    threadId: v.id('threads'),
    userMessageId: v.id('messages'),
  },
  async handler(ctx, { threadId, userMessageId }) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error('Unauthenticated');

    const thread = await ctx.db.get(threadId);
    if (!thread || thread.userId !== uid) throw new Error('Permission denied');

    const userMessage = await ctx.db.get(userMessageId);
    if (
      !userMessage ||
      userMessage.threadId !== threadId ||
      userMessage.role !== 'user'
    ) {
      throw new Error('User message not found or invalid.');
    }

    const toDelete = await ctx.db
      .query('messages')
      .withIndex('by_thread_and_time', (q) =>
        q.eq('threadId', threadId).gt('createdAt', userMessage.createdAt)
      )
      .collect();

    await Promise.all(toDelete.map((m) => ctx.db.delete(m._id)));

    return userMessage;
  },
});

/** Create new dialog snapshot: mark current assistant messages inactive and return next dialog version */
export const createDialogSnapshot = mutation({
  args: { threadId: v.id("threads") },
  async handler(ctx, { threadId }) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Permission denied");

    const msgs = await ctx.db
      .query("messages")
      .withIndex("by_thread_and_time", (q) => q.eq("threadId", threadId))
      .collect();

    let maxVersion = 1;
    // Mark ALL current active messages inactive (both user and assistant)
    await Promise.all(
      msgs.map(async (m) => {
        const v = m.dialogVersion ?? 1;
        if (v > maxVersion) maxVersion = v;
        // Deactivate all messages with defined dialogVersion that are currently active
        if (m.dialogVersion !== undefined && (m.isActive ?? true)) {
          await ctx.db.patch(m._id, { isActive: false });
        }
      })
    );

    const nextVersion = maxVersion + 1;
    // Update thread record with new current version
    await ctx.db.patch(threadId, { currentDialogVersion: nextVersion });
    return { dialogVersion: nextVersion } as const;
  },
});

/** Switch active dialog version */
export const switchDialogVersion = mutation({
  args: { threadId: v.id("threads"), dialogVersion: v.number() },
  async handler(ctx, { threadId, dialogVersion }) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Permission denied");

    const msgs = await ctx.db
      .query("messages")
      .withIndex("by_thread_and_time", (q) => q.eq("threadId", threadId))
      .collect();

    await Promise.all(
      msgs.map(async (m) => {
        if (m.dialogVersion === undefined) return; // shared/legacy messages - leave unchanged
        
        // Both assistant and user messages: active only if they belong to the selected version
        const shouldBeActive = m.dialogVersion === dialogVersion;
        if ((m.isActive ?? true) !== shouldBeActive) {
          await ctx.db.patch(m._id, { isActive: shouldBeActive });
        }
      })
    );

    // Persist selected version on thread record
    await ctx.db.patch(threadId, { currentDialogVersion: dialogVersion });
  },
});

/** Get available dialog versions with counts */
export const getDialogVersions = query({
  args: { threadId: v.id("threads") },
  async handler(ctx, { threadId }) {
    const uid = await currentUserId(ctx);
    if (!uid) return [];
    const thread = await ctx.db.get(threadId);
    if (!thread || thread.userId !== uid) return [];

    const msgs = await ctx.db
      .query("messages")
      .withIndex("by_thread_and_time", (q) => q.eq("threadId", threadId))
      .collect();

    const map = new Map<number, { count: number; latest: number }>();
    msgs.forEach((m) => {
      const v = m.dialogVersion ?? 1;
      const entry = map.get(v) ?? { count: 0, latest: 0 };
      entry.count += 1;
      if (m.createdAt > entry.latest) entry.latest = m.createdAt;
      map.set(v, entry);
    });

    const versions = Array.from(map.entries()).map(([version, meta]) => ({
      version,
      messageCount: meta.count,
      latestAt: meta.latest,
    }));

    // sort ascending
    versions.sort((a, b) => a.version - b.version);
    return versions;
  },
});

/** Get current active dialog version for a thread */
export const getCurrentDialogVersion = query({
  args: { threadId: v.id("threads") },
  async handler(ctx, { threadId }) {
    const uid = await currentUserId(ctx);
    if (!uid) return 1;
    
    const thread = await ctx.db.get(threadId);
    if (!thread || thread.userId !== uid) return 1;

    return thread.currentDialogVersion ?? 1;
  },
});


--- FILE: ./convex/http.ts ---
// convex/http.ts
import { httpRouter } from "convex/server";
import { internal } from "./_generated/api";
import { httpAction } from "./_generated/server";

const http = httpRouter();

http.route({
  path: "/syncUser",
  method: "POST",
  handler: httpAction(async (ctx) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      return new Response("Not authenticated", { status: 401 });
    }

    const existingUser = await ctx.runQuery(internal.users.findByToken, {
      tokenIdentifier: identity.subject,
    });

    if (existingUser) {
      if (
        existingUser.name !== identity.name ||
        existingUser.avatarUrl !== identity.pictureUrl
      ) {
        await ctx.runMutation(internal.users.update, {
          userId: existingUser._id,
          name: identity.name!,
          avatarUrl: identity.pictureUrl,
        });
      }
    } else {
      await ctx.runMutation(internal.users.create, {
        name: identity.name!,
        email: identity.email,
        avatarUrl: identity.pictureUrl,
        tokenIdentifier: identity.subject,
      });
    }
    return new Response(null, { status: 200 });
  }),
});

export default http;


--- FILE: ./convex/utils.ts ---
// Import explicit contexts to support both query and mutation usage
import type { QueryCtx, MutationCtx } from "./_generated/server";
import { Id } from "./_generated/dataModel";

/**
 * Return the Convex user ID for the currently authenticated Firebase user.
 * Throws if the user is not authenticated or not synchronized in the DB.
 */
export async function currentUserId(
  ctx: QueryCtx | MutationCtx,
): Promise<Id<"users"> | null> {
  // Firebase identity may not be attached immediately after login
  const identity = await ctx.auth.getUserIdentity();
  if (!identity) return null;

  const user = await ctx.db
    .query("users")
    .withIndex("by_token", (q) => q.eq("tokenIdentifier", identity.subject))
    .unique();

  if (!user) return null;

  return user._id;
}


--- FILE: ./convex/threads.ts ---
// convex/threads.ts
import { mutation, query } from "./_generated/server";
import { v } from "convex/values";
import { Id } from "./_generated/dataModel";
import { currentUserId } from "./utils";

/** Get a single thread by ID */
export const get = query({
  args: { threadId: v.id("threads") },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (uid === null) {
      return null;
    }
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid) {
      return null;
    }
    return thread;
  },
});

/** List threads for the authenticated user ordered by creation time */
export const list = query({
  args: { searchQuery: v.optional(v.string()) },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (uid === null) {
      // No user record yet means no threads to return
      return [];
    }

    if (args.searchQuery) {
      return ctx.db
        .query("threads")
        .withSearchIndex("by_title", (q) => q.search("title", args.searchQuery!))
        .take(20)
        .then((res) => res.filter((t) => t.userId === uid));
    }

    return ctx.db
      .query("threads")
      .withIndex("by_user_and_time", (q) => q.eq("userId", uid))
      .order("desc")
      .collect();
  },
});

/** Search threads by title */
export const search = query({
  args: { searchQuery: v.string() },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (uid === null) return [];
    if (!args.searchQuery.trim()) {
      return ctx.db
        .query("threads")
        .withIndex("by_user_and_time", (q) => q.eq("userId", uid))
        .order("desc")
        .collect();
    }
    const searchLower = args.searchQuery.toLowerCase();
    const all = await ctx.db
      .query("threads")
      .withIndex("by_user_and_time", (q) => q.eq("userId", uid))
      .order("desc")
      .collect();
    return all
      .filter((t) => t.title.toLowerCase().includes(searchLower))
      .slice(0, 20);
  },
});

/** List system threads for the authenticated user */
export const listSystem = query({
  args: {},
  async handler(ctx) {
    const uid = await currentUserId(ctx);
    if (uid === null) {
      return [];
    }
    const all = await ctx.db
      .query("threads")
      .withIndex("by_user_and_time", (q) => q.eq("userId", uid))
      .collect();
    return all.filter((t) => t.system === true);
  },
});

/** Create a new thread */
export const create = mutation({
  args: { title: v.string(), system: v.optional(v.boolean()) },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    return ctx.db.insert("threads", {
      userId: uid,
      title: args.title,
      createdAt: Date.now(),
      pinned: false,
      system: args.system ?? false,
      currentDialogVersion: 1,
    });
  },
});

/** Rename a thread */
export const rename = mutation({
  args: { threadId: v.id("threads"), title: v.string() },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    await ctx.db.patch(args.threadId, { title: args.title });
  },
});

/** Remove a thread and all its messages */
export const remove = mutation({
  args: { threadId: v.id("threads") },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    const messages = await ctx.db
      .query("messages")
      .withIndex("by_thread_and_time", (q) => q.eq("threadId", args.threadId))
      .collect();
    await Promise.all(messages.map((m) => ctx.db.delete(m._id)));
    await ctx.db.delete(args.threadId);
  },
});

/** Clone a thread by copying its messages */
export const clone = mutation({
  args: { threadId: v.id("threads"), title: v.string() },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    const newThreadId = await ctx.db.insert("threads", {
      userId: uid,
      title: args.title,
      createdAt: Date.now(),
      clonedFrom: args.threadId,
      pinned: false,
      currentDialogVersion: thread.currentDialogVersion ?? 1,
    });
    const messages = await ctx.db
      .query("messages")
      .withIndex("by_thread_and_time", (q) => q.eq("threadId", args.threadId))
      .collect();

    const idMap = new Map<Id<"messages">, Id<"messages">>();

    await Promise.all(
      messages.map(async (m) => {
        const newId = await ctx.db.insert("messages", {
          threadId: newThreadId,
          authorId: m.authorId,
          role: m.role,
          content: m.content,
          createdAt: m.createdAt,
          model: (m as any).model,
        });
        idMap.set(m._id, newId as Id<"messages">);
      })
    );

    const attachments = await ctx.db
      .query("attachments")
      .withIndex("by_thread", (q) => q.eq("threadId", args.threadId))
      .collect();

    await Promise.all(
      attachments.map((a) =>
        ctx.db.insert("attachments", {
          threadId: newThreadId,
          fileId: a.fileId,
          name: a.name,
          type: a.type,
          messageId: a.messageId ? idMap.get(a.messageId) : undefined,
        })
      )
    );
    return newThreadId;
  },
});

/** Toggle the pinned status of a thread */
export const togglePin = mutation({
  args: { threadId: v.id("threads"), pinned: v.boolean() },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    await ctx.db.patch(args.threadId, { pinned: args.pinned });
  },
});

/** Set the parent thread of an existing thread (used for clones) */
export const setParent = mutation({
  args: { threadId: v.id("threads"), parentId: v.id("threads") },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    await ctx.db.patch(args.threadId, { clonedFrom: args.parentId });
  },
});

/** Create a public share link for a thread */
export const createShareLink = mutation({
  args: { 
    threadId: v.id("threads"),
    isAnonymous: v.optional(v.boolean())
  },
  async handler(ctx, { threadId, isAnonymous }) {
    const uid = await currentUserId(ctx);
    const thread = await ctx.db.get(threadId);
    if (!uid || !thread || thread.userId !== uid) throw new Error("Access denied");

    const messages = await ctx.db
      .query("messages")
      .withIndex("by_thread_and_time", (q) => q.eq("threadId", threadId))
      .order("asc")
      .collect();

    const shareId = crypto.randomUUID().slice(0, 8);

    await ctx.db.insert("sharedThreads", {
      shareId,
      originalThreadId: threadId,
      userId: uid,
      title: thread.title,
      isAnonymous: isAnonymous ?? false,
      messages: messages.map((m) => ({ role: m.role, content: m.content })),
    });

    return shareId;
  },
});

/** Create a copy of a shared thread for the current user */
export const continueFromShared = mutation({
  args: { shareId: v.string() },
  async handler(ctx, { shareId }) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");

    const sharedThread = await ctx.db
      .query("sharedThreads")
      .withIndex("by_share_id", (q) => q.eq("shareId", shareId))
      .unique();

    if (!sharedThread) throw new Error("Shared thread not found");

    // Create a new thread for the current user
    const newThreadId = await ctx.db.insert("threads", {
      userId: uid,
      title: sharedThread.title,
      createdAt: Date.now(),
      pinned: false,
    });

    // Copy all messages from the shared thread
    for (const message of sharedThread.messages) {
      await ctx.db.insert("messages", {
        threadId: newThreadId,
        authorId: uid,
        role: message.role,
        content: message.content,
        createdAt: Date.now(),
      });
    }

    return newThreadId;
  },
});

/** Retrieve a shared thread by its public ID */
export const getSharedThread = query({
  args: { shareId: v.string() },
  async handler(ctx, { shareId }) {
    const sharedThread = await ctx.db
      .query("sharedThreads")
      .withIndex("by_share_id", (q) => q.eq("shareId", shareId))
      .unique();

    if (!sharedThread) return null;

    // If not anonymous, get user info
    let userInfo = null;
    if (!sharedThread.isAnonymous) {
      const user = await ctx.db.get(sharedThread.userId);
      if (user) {
        userInfo = {
          name: user.name,
          avatarUrl: user.avatarUrl,
        };
      }
    }

    return {
      ...sharedThread,
      userInfo,
    };
  },
});




--- FILE: ./convex/attachments.ts ---
import { mutation, query } from './_generated/server';
import { Id } from './_generated/dataModel';
import { v } from 'convex/values';

export const generateUploadUrl = mutation(async (ctx) => {
  return await ctx.storage.generateUploadUrl();
});

export const save = mutation({
  args: {
    threadId: v.id('threads'),
    attachments: v.array(
      v.object({
        storageId: v.string(),
        previewId: v.optional(v.string()),
        name: v.string(),
        type: v.string(),
        messageId: v.union(v.string(), v.null()),
        width: v.optional(v.number()),
        height: v.optional(v.number()),
        size: v.optional(v.number()),
      })
    ),
  },
  async handler(ctx, args) {
    const saved = await Promise.all(
      args.attachments.map(async (a) => {
        const attachmentId = await ctx.db.insert('attachments', {
          threadId: args.threadId,
          fileId: a.storageId,
          previewId: a.previewId,
          name: a.name,
          type: a.type,
          width: a.width,
          height: a.height,
          size: a.size,
          // Временные ID от клиента игнорируем, messageId будет обновлен позже
          messageId: undefined,
        });
        
        // Получаем URL для превью (если есть) иначе оригинал
        let url: string | null = null;
        if (a.previewId) {
          url = await ctx.storage.getUrl(a.previewId);
        } else if (!a.type.startsWith('image/')) {
          // For non-image files we can safely return full URL (e.g. PDFs, text),
          // since they are typically downloaded only on click.
          url = await ctx.storage.getUrl(a.storageId);
        }
        return {
          id: attachmentId,
          url,
          name: a.name,
          type: a.type,
          width: a.width,
          height: a.height,
          size: a.size,
          previewId: a.previewId,
          fileId: a.storageId,
        };
      })
    );
    return saved;
  },
});

export const byThread = query({
  args: { threadId: v.id('threads') },
  async handler(ctx, { threadId }) {
    const attachments = await ctx.db
      .query('attachments')
      .withIndex('by_thread', (q) => q.eq('threadId', threadId))
      .collect();
    
    // Получаем URL параллельно для ускорения
    const attachmentsWithUrls = await Promise.all(
      attachments.map(async (a) => {
        let url: string | null = null;
        if (a.previewId) {
          url = await ctx.storage.getUrl(a.previewId);
        } else if (!a.type.startsWith('image/')) {
          // For non-image files we can safely return full URL (e.g. PDFs, text),
          // since they are typically downloaded only on click.
          url = await ctx.storage.getUrl(a.fileId);
        }
        return {
          id: a._id,
          messageId: a.messageId,
          name: a.name,
          type: a.type,
          width: a.width,
          height: a.height,
          size: a.size,
          previewId: a.previewId,
          fileId: a.fileId,
          url,
        };
      })
    );
    
    return attachmentsWithUrls;
  },
});

// Новая mutation для обновления messageId у вложений
export const updateMessageId = mutation({
  args: {
    attachmentIds: v.array(v.id('attachments')),
    messageId: v.id('messages'),
  },
  async handler(ctx, args) {
    await Promise.all(
      args.attachmentIds.map(id =>
        ctx.db.patch(id, { messageId: args.messageId })
      )
    );
  },
});

// Return a signed URL for the *full* attachment (original file)
export const getUrl = query({
  args: { attachmentId: v.id('attachments') },
  async handler(ctx, { attachmentId }) {
    const attachment = await ctx.db.get(attachmentId);
    if (!attachment) return null;
    const url = await ctx.storage.getUrl(attachment.fileId);
    return url;
  },
});


--- FILE: ./convex/modelVisibility.ts ---
import { v } from "convex/values";
import { mutation, query } from "./_generated/server";

// Get current user ID from auth
async function getCurrentUserId(ctx: any) {
  const identity = await ctx.auth.getUserIdentity();
  if (!identity) {
    return null;
  }
  
  const user = await ctx.db
    .query("users")
    .withIndex("by_token", (q: any) => q.eq("tokenIdentifier", identity.subject))
    .unique();
    
  return user?._id;
}

// Get model visibility settings for the current user
export const getModelVisibility = query({
  args: {},
  handler: async (ctx) => {
    const userId = await getCurrentUserId(ctx);
    if (!userId) {
      return null;
    }

    const settings = await ctx.db
      .query("modelVisibility")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    if (!settings) {
      return {
        favoriteModels: [],
        enabledProviders: ["google", "openrouter", "openai", "groq"],
        selectedModel: "Gemini 2.5 Flash",
      };
    }

    return {
      favoriteModels: settings.favoriteModels || [],
      enabledProviders: settings.enabledProviders || ["google", "openrouter", "openai", "groq"],
      selectedModel: settings.selectedModel || "Gemini 2.5 Flash",
    };
  },
});

// Set model visibility settings for the current user
export const setModelVisibility = mutation({
  args: {
    favoriteModels: v.array(v.string()),
    enabledProviders: v.array(v.string()),
    selectedModel: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const userId = await getCurrentUserId(ctx);
    if (!userId) {
      throw new Error("Not authenticated");
    }

    const existing = await ctx.db
      .query("modelVisibility")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    const updateData: any = {
      favoriteModels: args.favoriteModels,
      enabledProviders: args.enabledProviders,
    };

    if (args.selectedModel !== undefined) {
      updateData.selectedModel = args.selectedModel;
    }

    if (existing) {
      await ctx.db.patch(existing._id, updateData);
    } else {
      await ctx.db.insert("modelVisibility", {
        userId,
        favoriteModels: args.favoriteModels,
        enabledProviders: args.enabledProviders,
        selectedModel: args.selectedModel || "Gemini 2.5 Flash",
      });
    }
  },
}); 

--- FILE: ./convex/apiKeys.ts ---
import { v } from "convex/values";
import { mutation, query } from "./_generated/server";

// Get current user ID from auth
async function getCurrentUserId(ctx: any) {
  const identity = await ctx.auth.getUserIdentity();
  if (!identity) {
    return null;
  }
  
  const user = await ctx.db
    .query("users")
    .withIndex("by_token", (q: any) => q.eq("tokenIdentifier", identity.subject))
    .unique();
    
  return user?._id;
}

// Get API keys for the current user
export const getApiKeys = query({
  args: {},
  handler: async (ctx) => {
    const userId = await getCurrentUserId(ctx);
    if (!userId) {
      return null;
    }

    const apiKeys = await ctx.db
      .query("apiKeys")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    if (!apiKeys) {
      return {
        google: "",
        openrouter: "",
        openai: "",
        groq: "",
      };
    }

    return {
      google: apiKeys.google || "",
      openrouter: apiKeys.openrouter || "",
      openai: apiKeys.openai || "",
      groq: apiKeys.groq || "",
    };
  },
});

// Set API keys for the current user
export const setApiKeys = mutation({
  args: {
    google: v.optional(v.string()),
    openrouter: v.optional(v.string()),
    openai: v.optional(v.string()),
    groq: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const userId = await getCurrentUserId(ctx);
    if (!userId) {
      throw new Error("Not authenticated");
    }

    const existing = await ctx.db
      .query("apiKeys")
      .withIndex("by_user", (q) => q.eq("userId", userId))
      .first();

    if (existing) {
      await ctx.db.patch(existing._id, {
        google: args.google || "",
        openrouter: args.openrouter || "",
        openai: args.openai || "",
        groq: args.groq || "",
        encryptedAt: Date.now(),
      });
    } else {
      await ctx.db.insert("apiKeys", {
        userId,
        google: args.google || "",
        openrouter: args.openrouter || "",
        openai: args.openai || "",
        groq: args.groq || "",
        encryptedAt: Date.now(),
      });
    }
  },
}); 

--- FILE: ./convex/auth.config.js ---
export default {
  providers: [
    {
      domain: `https://securetoken.google.com/pak-chat-75beb`,
      applicationID: "pak-chat-75beb", 
    },
  ]
}; 

--- FILE: ./convex/users.ts ---
// convex/users.ts
import { internalMutation, internalQuery, mutation, query } from "./_generated/server";
import { v } from "convex/values";

export const findByToken = internalQuery({
  args: { tokenIdentifier: v.string() },
  handler: (ctx, args) => {
    return ctx.db
      .query("users")
      .withIndex("by_token", (q) => q.eq("tokenIdentifier", args.tokenIdentifier))
      .unique();
  },
});

export const create = internalMutation({
  args: {
    name: v.string(),
    email: v.optional(v.string()),
    avatarUrl: v.optional(v.string()),
    tokenIdentifier: v.string(),
  },
  handler: (ctx, args) => {
    return ctx.db.insert("users", args);
  },
});

export const update = internalMutation({
  args: {
    userId: v.id("users"),
    name: v.string(),
    avatarUrl: v.optional(v.string()),
  },
  handler: (ctx, args) => {
    return ctx.db.patch(args.userId, {
      name: args.name,
      avatarUrl: args.avatarUrl,
    });
  },
});

/** Fetch the currently authenticated user if present. */
export const getCurrent = query({
  args: {},
  async handler(ctx) {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      return null;
    }
    return await ctx.db
      .query("users")
      .withIndex("by_token", (q) => q.eq("tokenIdentifier", identity.subject))
      .unique();
  },
});

/** Sync user data from Firebase Auth */
export const sync = mutation({
  args: {},
  async handler(ctx) {
    const identity = await ctx.auth.getUserIdentity();
    // When a user signs in, the token may take a moment to attach. In that case
    // we exit quietly so the client can retry.
    if (!identity) {
      return null;
    }

    const existingUser = await ctx.db
      .query("users")
      .withIndex("by_token", (q) => q.eq("tokenIdentifier", identity.subject))
      .unique();

    if (existingUser) {
      if (
        existingUser.name !== identity.name ||
        existingUser.avatarUrl !== identity.pictureUrl
      ) {
        await ctx.db.patch(existingUser._id, {
          name: identity.name!,
          avatarUrl: identity.pictureUrl,
        });
      }
      return existingUser._id;
    } else {
      return await ctx.db.insert("users", {
        name: identity.name!,
        email: identity.email,
        avatarUrl: identity.pictureUrl,
        tokenIdentifier: identity.subject,
      });
    }
  },
});


--- FILE: ./convex/userSettings.ts ---
// convex/userSettings.ts
import { query, mutation } from "./_generated/server";
import { v } from "convex/values";
import { Id } from "./_generated/dataModel";
import { currentUserId } from "./utils";

/** Get encrypted API keys for the current user */
export const get = query({
  args: {},
  async handler(ctx) {
    const uid = await currentUserId(ctx);
    if (uid === null) {
      // User record not yet created
      return null;
    }
    return ctx.db
      .query("userSettings")
      .withIndex("by_user", (q) => q.eq("userId", uid))
      .unique();
  },
});

/** Save encrypted API keys */
export const saveApiKeys = mutation({
  args: { encryptedApiKeys: v.string() },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const existing = await ctx.db
      .query("userSettings")
      .withIndex("by_user", (q) => q.eq("userId", uid))
      .unique();
    if (existing) {
      await ctx.db.patch(existing._id, {
        encryptedApiKeys: args.encryptedApiKeys,
      });
    } else {
      await ctx.db.insert("userSettings", {
        userId: uid,
        encryptedApiKeys: args.encryptedApiKeys,
      });
    }
  },
});

/** Save UI settings such as fonts and personal data flag */
export const saveSettings = mutation({
  args: {
    uiFont: v.string(),
    codeFont: v.string(),
    hidePersonal: v.boolean(),
    saveRegenerationHistory: v.boolean(),
  },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error('Unauthenticated');
    const existing = await ctx.db
      .query('userSettings')
      .withIndex('by_user', (q) => q.eq('userId', uid))
      .unique();
    if (existing) {
      await ctx.db.patch(existing._id, {
        uiFont: args.uiFont,
        codeFont: args.codeFont,
        hidePersonal: args.hidePersonal,
        saveRegenerationHistory: args.saveRegenerationHistory,
      });
    } else {
      await ctx.db.insert('userSettings', {
        userId: uid,
        encryptedApiKeys: '',
        uiFont: args.uiFont,
        codeFont: args.codeFont,
        hidePersonal: args.hidePersonal,
        saveRegenerationHistory: args.saveRegenerationHistory,
      });
    }
  },
});


--- FILE: ./convex/_generated/dataModel.d.ts ---
/* eslint-disable */
/**
 * Generated data model types.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type {
  DataModelFromSchemaDefinition,
  DocumentByName,
  TableNamesInDataModel,
  SystemTableNames,
} from "convex/server";
import type { GenericId } from "convex/values";
import schema from "../schema.js";

/**
 * The names of all of your Convex tables.
 */
export type TableNames = TableNamesInDataModel<DataModel>;

/**
 * The type of a document stored in Convex.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Doc<TableName extends TableNames> = DocumentByName<
  DataModel,
  TableName
>;

/**
 * An identifier for a document in Convex.
 *
 * Convex documents are uniquely identified by their `Id`, which is accessible
 * on the `_id` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).
 *
 * Documents can be loaded using `db.get(id)` in query and mutation functions.
 *
 * IDs are just strings at runtime, but this type can be used to distinguish them from other
 * strings when type checking.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Id<TableName extends TableNames | SystemTableNames> =
  GenericId<TableName>;

/**
 * A type describing your Convex data model.
 *
 * This type includes information about what tables you have, the type of
 * documents stored in those tables, and the indexes defined on them.
 *
 * This type is used to parameterize methods like `queryGeneric` and
 * `mutationGeneric` to make them type-safe.
 */
export type DataModel = DataModelFromSchemaDefinition<typeof schema>;


--- FILE: ./convex/_generated/api.d.ts ---
/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type {
  ApiFromModules,
  FilterApi,
  FunctionReference,
} from "convex/server";
import type * as apiKeys from "../apiKeys.js";
import type * as attachments from "../attachments.js";
import type * as http from "../http.js";
import type * as messages from "../messages.js";
import type * as modelVisibility from "../modelVisibility.js";
import type * as threads from "../threads.js";
import type * as userSettings from "../userSettings.js";
import type * as users from "../users.js";
import type * as utils from "../utils.js";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
declare const fullApi: ApiFromModules<{
  apiKeys: typeof apiKeys;
  attachments: typeof attachments;
  http: typeof http;
  messages: typeof messages;
  modelVisibility: typeof modelVisibility;
  threads: typeof threads;
  userSettings: typeof userSettings;
  users: typeof users;
  utils: typeof utils;
}>;
export declare const api: FilterApi<
  typeof fullApi,
  FunctionReference<any, "public">
>;
export declare const internal: FilterApi<
  typeof fullApi,
  FunctionReference<any, "internal">
>;


--- FILE: ./convex/_generated/server.d.ts ---
/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  ActionBuilder,
  HttpActionBuilder,
  MutationBuilder,
  QueryBuilder,
  GenericActionCtx,
  GenericMutationCtx,
  GenericQueryCtx,
  GenericDatabaseReader,
  GenericDatabaseWriter,
} from "convex/server";
import type { DataModel } from "./dataModel.js";

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const query: QueryBuilder<DataModel, "public">;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const internalQuery: QueryBuilder<DataModel, "internal">;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const mutation: MutationBuilder<DataModel, "public">;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const internalMutation: MutationBuilder<DataModel, "internal">;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export declare const action: ActionBuilder<DataModel, "public">;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export declare const internalAction: ActionBuilder<DataModel, "internal">;

/**
 * Define an HTTP action.
 *
 * This function will be used to respond to HTTP requests received by a Convex
 * deployment if the requests matches the path and method where this action
 * is routed. Be sure to route your action in `convex/http.js`.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Import this function from `convex/http.js` and route it to hook it up.
 */
export declare const httpAction: HttpActionBuilder;

/**
 * A set of services for use within Convex query functions.
 *
 * The query context is passed as the first argument to any Convex query
 * function run on the server.
 *
 * This differs from the {@link MutationCtx} because all of the services are
 * read-only.
 */
export type QueryCtx = GenericQueryCtx<DataModel>;

/**
 * A set of services for use within Convex mutation functions.
 *
 * The mutation context is passed as the first argument to any Convex mutation
 * function run on the server.
 */
export type MutationCtx = GenericMutationCtx<DataModel>;

/**
 * A set of services for use within Convex action functions.
 *
 * The action context is passed as the first argument to any Convex action
 * function run on the server.
 */
export type ActionCtx = GenericActionCtx<DataModel>;

/**
 * An interface to read from the database within Convex query functions.
 *
 * The two entry points are {@link DatabaseReader.get}, which fetches a single
 * document by its {@link Id}, or {@link DatabaseReader.query}, which starts
 * building a query.
 */
export type DatabaseReader = GenericDatabaseReader<DataModel>;

/**
 * An interface to read from and write to the database within Convex mutation
 * functions.
 *
 * Convex guarantees that all writes within a single mutation are
 * executed atomically, so you never have to worry about partial writes leaving
 * your data in an inconsistent state. See [the Convex Guide](https://docs.convex.dev/understanding/convex-fundamentals/functions#atomicity-and-optimistic-concurrency-control)
 * for the guarantees Convex provides your functions.
 */
export type DatabaseWriter = GenericDatabaseWriter<DataModel>;


--- FILE: ./convex/_generated/server.js ---
/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  actionGeneric,
  httpActionGeneric,
  queryGeneric,
  mutationGeneric,
  internalActionGeneric,
  internalMutationGeneric,
  internalQueryGeneric,
} from "convex/server";

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const query = queryGeneric;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const internalQuery = internalQueryGeneric;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const mutation = mutationGeneric;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const internalMutation = internalMutationGeneric;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export const action = actionGeneric;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export const internalAction = internalActionGeneric;

/**
 * Define a Convex HTTP action.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument, and a `Request` object
 * as its second.
 * @returns The wrapped endpoint function. Route a URL path to this function in `convex/http.js`.
 */
export const httpAction = httpActionGeneric;


--- FILE: ./convex/_generated/api.js ---
/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import { anyApi } from "convex/server";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
export const api = anyApi;
export const internal = anyApi;


--- FILE: ./components/ui/tabs.tsx ---
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }


--- FILE: ./components/ui/label.tsx ---
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }


--- FILE: ./components/ui/drawer.tsx ---
"use client"

import { cn } from "@/lib/utils"
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

function Drawer({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) {
  return <DrawerPrimitive.Root data-slot="drawer" {...props} />
}

function DrawerTrigger({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {
  return <DrawerPrimitive.Trigger data-slot="drawer-trigger" {...props} />
}

function DrawerPortal({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {
  return <DrawerPrimitive.Portal data-slot="drawer-portal" {...props} />
}

function DrawerClose({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Close>) {
  return <DrawerPrimitive.Close data-slot="drawer-close" {...props} />
}

function DrawerOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {
  return (
    <DrawerPrimitive.Overlay
      data-slot="drawer-overlay"
      className={cn(
        // при открытии задаёт полупрозрачный фон + blur-sm (легкое размытие)
        "data-[state=open]:animate-in data-[state=closed]:animate-out " +
        "data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 " +
        "bg-background/50 fixed inset-0 z-50 backdrop-blur-sm",
        className
      )}
      {...props}
    />
  )
}

function DrawerContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Content>) {
  return (
    <DrawerPortal>
      <DrawerOverlay />
      <DrawerPrimitive.Content
        data-slot="drawer-content"
        className={cn(
          "group/drawer-content bg-background fixed z-50 flex flex-col",
          // позиции для разных сторон (top/bottom/right/left)
          "data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 " +
            "data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b",
          "data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 " +
            "data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t",
          "data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 " +
            "data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l sm:max-w-sm",
          "data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 " +
            "data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r sm:max-w-sm",
          className
        )}
        {...props}
      >

        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  )
}

function DrawerHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div data-slot="drawer-header" className={cn("flex flex-col gap-1.5 p-4", className)} {...props} />
  )
}

function DrawerFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div data-slot="drawer-footer" className={cn("mt-auto flex flex-col gap-2 p-4", className)} {...props} />
  )
}

function DrawerTitle({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Title>) {
  return (
    <DrawerPrimitive.Title data-slot="drawer-title" className={cn("text-foreground font-semibold", className)} {...props} />
  )
}

function DrawerDescription({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Description>) {
  return (
    <DrawerPrimitive.Description
      data-slot="drawer-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
} 

--- FILE: ./firebase/index.ts ---
import { initializeApp, getApps, getApp } from 'firebase/app';
import { getAuth, setPersistence, indexedDBLocalPersistence } from 'firebase/auth';
import { firebaseConfig } from './config';

import type { Auth } from 'firebase/auth';

let auth: Auth;

try {
  if (
    process.env.NEXT_PUBLIC_FIREBASE_API_KEY &&
    process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN &&
    process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID &&
    process.env.NEXT_PUBLIC_FIREBASE_APP_ID
  ) {
    const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
    auth = getAuth(app);
    if (typeof window !== 'undefined') {
      setPersistence(auth, indexedDBLocalPersistence).catch(() => {});
    }
  } else {
    // Provide an empty object during build when env vars are missing
    auth = {} as Auth;
  }
} catch {
  auth = {} as Auth;
}

export { auth };


--- FILE: ./firebase/config.ts ---
// firebase/config.ts
export const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY ?? '',
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN ?? '',
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID ?? '',
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID ?? '',
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID ?? '',
} satisfies Record<string, string>;


--- FILE: ./hooks/useAutoResizeTextArea.ts ---
import { useCallback, useEffect, useRef } from 'react';

interface UseAutoResizeTextareaProps {
  minHeight: number;
  maxHeight?: number;
}

export default function useAutoResizeTextarea({
  minHeight,
  maxHeight,
}: UseAutoResizeTextareaProps) {
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const adjustHeight = useCallback(
    (reset?: boolean) => {
      const textarea = textareaRef.current;
      if (!textarea) return;

      if (reset) {
        textarea.style.height = `${minHeight}px`;
        return;
      }

      textarea.style.height = `${minHeight}px`;

      const newHeight = Math.max(
        minHeight,
        Math.min(textarea.scrollHeight, maxHeight ?? Number.POSITIVE_INFINITY)
      );

      textarea.style.height = `${newHeight}px`;
    },
    [minHeight, maxHeight]
  );

  useEffect(() => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = `${minHeight}px`;
    }
  }, [minHeight]);

  useEffect(() => {
    const handleResize = () => adjustHeight();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [adjustHeight]);

  return { textareaRef, adjustHeight };
}


--- FILE: ./scripts/make-sprite.mjs ---
import fs from 'fs';
import { globSync } from 'glob';
const icons = globSync('public/icons/*.svg');
const symbols = icons.map(f => {
  const id = 'i-' + f.split('/').pop().replace('.svg','');
  return fs.readFileSync(f,'utf8')
    .replace('<svg','<symbol id="'+id+'"')
    .replace('</svg>','</symbol>');
}).join('');
fs.writeFileSync('public/icons.svg',
  `<svg xmlns="http://www.w3.org/2000/svg" style="display:none">${symbols}</svg>`
);


--- FILE: ./lib/ids.ts ---
export const isConvexId = (id?: string) =>
  typeof id === 'string' && /^[a-z0-9]{24,32}$/i.test(id);


--- FILE: ./lib/escapeHtml.test.ts ---
import { describe, it, expect } from 'vitest';
import { escapeHtml } from './escapeHtml';

describe('escapeHtml', () => {
  it('escapes HTML special characters', () => {
    const input = '<div>&"\'';
    const expected = '&lt;div&gt;&amp;&quot;&#39;';
    expect(escapeHtml(input)).toBe(expected);
  });
});


--- FILE: ./lib/utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


--- FILE: ./lib/tools.ts ---
import { tool } from 'ai';
import { z } from 'zod';

// Удаляем старый webSearchTool, так как теперь будем использовать встроенный Google Search
// Этот файл теперь можно использовать для других инструментов в будущем

export const customTool = tool({
  description: 'A placeholder for future custom tools',
  parameters: z.object({ query: z.string() }),
  execute: async ({ query: _query }) => {
    // Parameter `_query` reserved for future use
    void _query;
    return { message: 'Custom tool placeholder' };
  },
});


--- FILE: ./lib/models.ts ---
import { Provider } from '@/frontend/stores/APIKeyStore';

export const AI_MODELS = [
  'Deepseek R1 0528',
  'Deepseek V3',
  'Gemini 2.5 Pro',
  'Gemini 2.5 Flash',
  'GPT-4o',
  'GPT-4.1-mini',
  'GPT-4.1',
  'GPT-4.1-nano',
  'o4-mini',
  'Meta Llama 4 Scout 17B',
  'Meta Llama 4 Maverick 17B',
  'DeepSeek R1 Distill Llama 70B',
  'Qwen QwQ 32B',
  'Qwen 3 32B',
] as const;

export type AIModel = (typeof AI_MODELS)[number];

export type ModelConfig = {
  modelId: string;
  provider: Provider;
  company: string;
  reasoningEffort?: "medium" | "low" | "high";
};

export const MODEL_CONFIGS: Record<AIModel, ModelConfig> = {
  'Deepseek R1 0528': {
    modelId: 'deepseek/deepseek-r1-0528:free',
    provider: 'openrouter',
    company: 'DeepSeek',
  },
  'Deepseek V3': {
    modelId: 'deepseek/deepseek-chat-v3-0324:free',
    provider: 'openrouter',
    company: 'DeepSeek',
  },
  'Gemini 2.5 Pro': {
    modelId: 'gemini-2.0-flash-exp',
    provider: 'google',
    company: 'Google',
  },
  'Gemini 2.5 Flash': {
    modelId: 'gemini-2.0-flash-exp',
    provider: 'google',
    company: 'Google',
  },
  'GPT-4o': {
    modelId: 'gpt-4o',
    provider: 'openai',
    company: 'OpenAI',
  },
  'GPT-4.1-mini': {
    modelId: 'gpt-4.1-mini',
    provider: 'openai',
    company: 'OpenAI',
  },
  'GPT-4.1': {
    modelId: 'gpt-4.1',
    provider: 'openai',
    company: 'OpenAI',
  },
  'GPT-4.1-nano': {
    modelId: 'gpt-4.1-nano',
    provider: 'openai',
    company: 'OpenAI',
  },
  'o4-mini': {
    modelId: 'o4-mini',
    provider: 'openai',
    company: 'OpenAI',
    reasoningEffort: 'medium',
  },
  'Meta Llama 4 Scout 17B': {
    modelId: 'meta-llama/llama-4-scout-17b-16e-instruct',
    provider: 'groq',
    company: 'Groq',
  },
  'Meta Llama 4 Maverick 17B': {
    modelId: 'meta-llama/llama-4-maverick-17b-128e-instruct',
    provider: 'groq',
    company: 'Groq',
  },
  'DeepSeek R1 Distill Llama 70B': {
    modelId: 'deepseek-r1-distill-llama-70b',
    provider: 'groq',
    company: 'Groq',
  },
  'Qwen QwQ 32B': {
    modelId: 'qwen-qwq-32b',
    provider: 'groq',
    company: 'Groq',
  },
  'Qwen 3 32B': {
    modelId: 'qwen/qwen3-32b',
    provider: 'groq',
    company: 'Groq',
    // Use provider default reasoning effort
  },
} as const satisfies Record<AIModel, ModelConfig>;

export const getModelConfig = (modelName: AIModel): ModelConfig => {
  return MODEL_CONFIGS[modelName];
};

// Группируем модели по компаниям
export const getModelsByCompany = () => {
  const companies: Record<string, AIModel[]> = {};
  
  AI_MODELS.forEach(model => {
    const config = MODEL_CONFIGS[model];
    if (!companies[config.company]) {
      companies[config.company] = [];
    }
    companies[config.company].push(model);
  });
  
  return companies;
};

// Группируем модели по провайдерам
export const getModelsByProvider = () => {
  const providers: Record<Provider, AIModel[]> = {
    google: [],
    openai: [],
    openrouter: [],
    groq: []
  };
  
  AI_MODELS.forEach(model => {
    const config = MODEL_CONFIGS[model];
    providers[config.provider].push(model);
  });
  
  return providers;
};


--- FILE: ./lib/escapeHtml.ts ---
export function escapeHtml(str: string): string {
  return str
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}


--- FILE: ./Files/Draw.md ---
# План улучшения взаимодействия с файлами и рисовалки

## Анализ текущих проблем

### 1. Проблема с Recent Files
**Суть проблемы:** Файлы добавляются в recent ДО отправки сообщения, что приводит к ошибкам после перезагрузки.

**Текущее поведение:**
- В `useRecentFilesIntegration()` файлы добавляются в recent сразу при добавлении в `AttachmentsStore`
- Это происходит в строке `addToRecent(newAttachment.file)` когда `state.attachments.length > prevState.attachments.length`
- После перезагрузки blob URLs недоступны, файлы нельзя повторно выбрать

**Корень проблемы:**
- Файлы добавляются в recent на этапе прикрепления (в AttachmentsStore)
- А не после успешной отправки сообщения

### 2. Проблема с DrawingCanvas на мобильных устройствах
**Анализ текущей реализации:**
- Canvas фиксированного размера 800x600
- Нет адаптации под размер экрана
- Неудобные контролы для тач-взаимодействия
- Палитра цветов и инструменты не оптимизированы для мобильных

---

## План решения проблем

### Задача 1: Исправление логики Recent Files
**Цель:** Файлы должны добавляться в recent ТОЛЬКО после успешной отправки сообщения.

#### Подзадачи:
1. **F1.1** Удалить автоматическое добавление в recent из `useRecentFilesIntegration`
   - Убрать подписку на изменения AttachmentsStore
   - Файлы не должны попадать в recent при прикреплении

2. **F1.2** Добавить добавление в recent после успешной отправки
   - В `handleSubmit` в ChatInput.tsx после успешного `sendMessage`
   - Добавлять ТОЛЬКО при успешной отправке (без ошибок)
   - Критерий успеха: `dbMsgId` получен и `savedAttachments` сохранены

3. **F1.3** Создать отдельную функцию для добавления в recent
   - `addFileToRecent(file: File)` в RecentFilesDropdown или отдельном утиле
   - Экспортировать для использования в ChatInput

4. **F1.4** Улучшить обработку ошибок в recent files
   - Валидация файлов при загрузке из localStorage
   - Очистка неактуальных записей
   - Уведомления пользователю о проблемах

#### Критерии успеха F1:
- [ ] Файлы НЕ добавляются в recent при прикреплении
- [ ] Файлы добавляются в recent ТОЛЬКО после успешной отправки сообщения
- [ ] После перезагрузки нет ошибок при клике на recent files
- [ ] Показывается адекватное сообщение пользователю при клике на recent файл

---

### Задача 2: Улучшение DrawingCanvas для мобильных
**Цель:** Сделать рисовалку удобной и функциональной на мобильных устройствах.

#### Подзадачи:
2. **D2.1** Адаптивный размер canvas
   - Динамическое определение размера экрана
   - Canvas должен занимать максимально доступное пространство
   - Поддержка landscape/portrait ориентации

3. **D2.2** Оптимизация UI для мобильных
   - Увеличить размер кнопок инструментов (минимум 44px)
   - Панель инструментов внизу экрана для лучшей досягаемости
   - Swipe жесты для быстрого переключения инструментов
   - Компактная палитра цветов

4. **D2.3** Улучшение touch взаимодействий
   - Поддержка multi-touch (pinch to zoom)
   - Лучше обработка touch events (preventDefault для скролла)
   - Поддержка pressure sensitive drawing (если доступно)
   - Улучшенная точность рисования

5. **D2.4** Мобильно-специфичные функции
   - Кнопка "Отменить" удобно расположена
   - Быстрый доступ к ластику
   - Возможность скрыть/показать панель инструментов
   - Полноэкранный режим рисования

6. **D2.5** Performance оптимизации
   - Throttle для touch events
   - Оптимизация перерисовки canvas
   - Lazy loading для сложных элементов

#### Критерии успеха D2:
- [ ] Canvas корректно отображается на всех размерах мобильных экранов
- [ ] Все кнопки легко нажимаются пальцем
- [ ] Рисование плавное и отзывчивое
- [ ] Интерфейс интуитивно понятен на мобильных
- [ ] Нет проблем с производительностью

---

## Последовательность выполнения

### Этап 1: Исправление Recent Files (приоритет ВЫСОКИЙ)
1. F1.1 → F1.2 → F1.3 → F1.4

### Этап 2: Улучшение DrawingCanvas (приоритет СРЕДНИЙ)  
1. D2.1 → D2.2 → D2.3 → D2.4 → D2.5

---

## Технические детали

### Recent Files - изменения в коде:
**Файлы для изменения:**
- `frontend/components/RecentFilesDropdown.tsx` - убрать автодобавление
- `frontend/components/ChatInput.tsx` - добавить логику после отправки
- Возможно создать `frontend/lib/recentFiles.ts` для утилит

### DrawingCanvas - изменения в коде:
**Файлы для изменения:**
- `frontend/components/DrawingCanvas.tsx` - основные изменения
- Возможно CSS изменения в globals.css для мобильных стилей

---

## Риски и ограничения

### Recent Files:
- **Риск:** Может сломаться существующий UX если пользователи привыкли к текущему поведению
- **Решение:** Добавить уведомления о том, что файл будет в recent после отправки

### DrawingCanvas:
- **Риск:** Изменения могут повлиять на desktop UX
- **Решение:** Использовать `useIsMobile` для условного рендеринга

---

## Метрики успеха

### Recent Files:
1. Количество ошибок "файл не найден" = 0
2. Пользователи понимают новую логику (через feedback)

### DrawingCanvas:
1. Время рисования простой фигуры на мобильном < 10 секунд  
2. Удобство использования по 5-балльной шкале > 4
3. Отсутствие жалоб на производительность

---

## Следующие шаги

1. **Планировщик:** Одобрить план
2. **Исполнитель:** Начать с F1.1 - удаления автодобавления в recent
3. **Тестирование:** После каждой подзадачи проверять функциональность
4. **Итерация:** Собирать feedback и улучшать

---

*Документ создан для координации работы между Планировщиком и Исполнителем в рамках улучшения файлового взаимодействия и мобильной рисовалки в приложении Pak.Chat.* 

--- FILE: ./eslint-rules/no-nested-interactive.js ---
module.exports = {
  meta: {
    type: 'problem',
    docs: {
      description: 'disallow nesting interactive elements',
    },
    schema: [],
  },
  create(context) {
    function containsButton(children) {
      return children.some((child) => {
        if (child.type === 'JSXElement') {
          if (child.openingElement.name.name === 'button') {
            return true;
          }
          return containsButton(child.children);
        }
        return false;
      });
    }

    return {
      JSXElement(node) {
        if (node.openingElement.name.name !== 'button') return;
        if (containsButton(node.children)) {
          context.report({ node, message: 'Nested button elements are not allowed.' });
        }
      },
    };
  },
};


