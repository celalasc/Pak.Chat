--- PROJECT REQUIREMENTS DOCUMENT ---

## PRD: Pak.Chat — High-Performance LLM Application

## Project Goal

To create a high-performance application for working with LLMs, with the ability to log in via a Google account.

## Main Components

### Input Field

*   Send button — sends the message
*   Stop button — stops response generation
*   Model selection button — opens a modal window with LLM model options
*   Adaptive positioning:
    *   If there are no messages, the input field is centered on the screen
    *   In the centered state, the model selection modal window opens from the bottom (not the top)
*   Quoting:
    *   When quoting AI text, the input field expands
    *   The quoted text is displayed with a special background.
    *   A cross icon in the top right corner to cancel quoting. Below the cross, a tooltip "Press Esc"
    *   Quotes longer than 2 lines become scrollable
*   When the user scrolls up, an arrow should appear to the right above the input field. Clicking it scrolls down.
*   Before the button that opens the model selection window, there should be a "+" icon. Clicking it should open a small window containing buttons: [File icon] Add file, [Arrow icon] Recent, [Brush icon] Draw.

### Chat Navigation

Left navigation menu in the form of bars:

*   Each bar represents a user message
*   The length of the bar corresponds to the length of the message
*   On hover, the bar is replaced by a tile containing a short part of the user message.
*   Clicking the tile scrolls to the corresponding message in the chat.

### Chat History / New Chat

Chat history modal window (button in the top right corner):

*   Chat search field
*   Implement search by chat title and content.
*   Chat tiles with titles
*   Interactive elements:
    *   On hover: delete and pin buttons appear.
    *   Double-click on the title: rename chat
    *   On hovering over a chat, a preview appears on the right.
*   New chat button next to the history button
*   The new chat creation button comes first, followed by the button to open chat history.

### Settings

Settings modal window with tabs:

"Settings" Tab:

*   General font selection: "Proxima Vara" or "System font"
*   Code font selection: "Berkeley Mono (default)" or "System monospace font"
*   Theme selection: light or dark

"Profile" Tab:

*   User avatar, name, and email address
*   Option to blur/hide all user data, applied automatically, can be disabled.
*   Logout button.

"API Keys" Tab:

*   Input fields for provider API keys:
    *   Google API Key
    *   OpenRouter
    *   OpenAI
    *   Groq
*   Quick links for creating API keys with the respective providers
*   List of supported models for each provider
*   In the mobile version, when scrolling down, this button should smoothly "slide" to the right.

### Messages and Interaction

User Messages (on hover):

*   Copy button — copies the message text
*   Edit button — allows editing with rollback after saving
*   Regeneration system: shows the number of regenerations below the message with navigation "← 1/2 →"

AI Messages (on hover):

*   "Start New Branch" button — creates a copy of the chat starting from the message where the button was clicked, including all previous messages. In the chat history window, the icon next to such a "clone" should be the same as on the button.
*   Regenerate button — rolls back to the selected point and regenerates
*   Quoting: when text is selected, a quoting button with quotation marks appears.
    
--- END PROJECT REQUIREMENTS DOCUMENT ---

--- FILE: ./project_snapshot.txt ---


--- FILE: ./package.json ---
{
  "name": "Pak.Chat",
  "version": "0.1.0",
  "private": true,
  "packageManager": "pnpm@9.0.0",
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "preview": "opennextjs-cloudflare build && opennextjs-cloudflare preview",
    "deploy": "opennextjs-cloudflare build && opennextjs-cloudflare deploy",
    "cf-typegen": "wrangler types --env-interface CloudflareEnv cloudflare-env.d.ts",
    "sprite": "node scripts/make-sprite.mjs"
  },
  "dependencies": {
    "@ai-sdk/google": "^1.2.19",
    "@ai-sdk/openai": "^1.3.22",
    "@ai-sdk/react": "^1.2.12",
    "@hookform/resolvers": "^5.0.1",
    "@openrouter/ai-sdk-provider": "^0.4.6",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-tooltip": "^1.2.7",
    "ai": "^4.3.16",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "convex": "^1.24.8",
    "crypto-js": "^4.2.0",
    "fast-deep-equal": "^3.1.3",
    "firebase": "^11.9.1",
    "katex": "^0.16.22",
    "lucide-react": "^0.510.0",
    "marked": "^15.0.12",
    "next": "15.3.2",
    "next-pwa": "^5.6.0",
    "next-themes": "^0.4.6",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-hook-form": "^7.57.0",
    "react-markdown": "^10.1.0",
    "react-shiki": "^0.6.0",
    "react-virtualized-auto-sizer": "^1.0.7",
    "react-window": "^1.8.11",
    "rehype-katex": "^7.0.1",
    "rehype-sanitize": "^6.0.0",
    "remark-gfm": "^4.0.1",
    "remark-math": "^6.0.0",
    "shiki": "^3.6.0",
    "sonner": "^2.0.5",
    "swr": "^2.3.3",
    "tailwind-merge": "^3.3.0",
    "tailwind-scrollbar": "^4.0.2",
    "use-debounce": "^10.0.5",
    "usehooks-ts": "^3.1.1",
    "uuid": "^11.1.0",
    "vaul": "^1.1.1",
    "zod": "^3.25.56",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.3.1",
    "@next/bundle-analyzer": "^15.3.3",
    "@opennextjs/cloudflare": "^1.2.1",
    "@tailwindcss/postcss": "^4.1.8",
    "@tailwindcss/typography": "^0.5.16",
    "@types/crypto-js": "^4.2.2",
    "@types/katex": "^0.16.7",
    "@types/node": "^20.19.0",
    "@types/react": "^19.1.6",
    "@types/react-dom": "^19.1.6",
    "@types/react-syntax-highlighter": "^15.5.13",
    "@types/react-window": "^1.8.8",
    "eslint": "^9.28.0",
    "eslint-config-next": "15.3.2",
    "eslint-plugin-jsx-a11y": "^6.8.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "tailwindcss": "^4.1.8",
    "tw-animate-css": "^1.3.4",
    "typescript": "^5.8.3",
    "wrangler": "^4.19.1"
  }
}


--- FILE: ./create_project_snapshot.py ---
import os

def create_project_snapshot(output_filename="project_snapshot.txt", prd_content=""):
    exclude_dirs = [".git", ".next", "node_modules", ".cursor", "public", "dist", "build"]
    exclude_files = [
        ".gitignore", "package-lock.json", "yarn.lock", "pnpm-lock.yaml",
        "components.json", "eslint.config.mjs", "next.config.ts",
        "open-next.config.ts", "postcss.config.mjs", "tsconfig.json", "wrangler.jsonc",
        "LICENSE", "next-env.d.ts"
    ]
    exclude_extensions = [".ico", ".png", ".jpg", ".jpeg", ".gif", ".bmp", ".svg", ".webp", ".pdf", ".zip", ".tar", ".gz", ".mp3", ".mp4", ".avi", ".mov", ".woff", ".woff2", ".ttf", ".otf", ".avif"]

    with open(output_filename, "w", encoding="utf-8") as outfile:
        if prd_content:
            outfile.write("--- PROJECT REQUIREMENTS DOCUMENT ---\n")
            outfile.write(prd_content)
            outfile.write("\n--- END PROJECT REQUIREMENTS DOCUMENT ---\n\n")

        for root, dirs, files in os.walk("."):
            dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith('.')]
            for file in files:
                if file not in exclude_files and not file.startswith('.') and not any(file.endswith(ext) for ext in exclude_extensions):
                    filepath = os.path.join(root, file)
                    try:
                        with open(filepath, "r", encoding="utf-8") as infile:
                            outfile.write(f"--- FILE: {filepath} ---\n")
                            outfile.write(infile.read())
                            outfile.write("\n\n")
                    except Exception as e:
                        print(f"Could not read {filepath}: {e}")

if __name__ == "__main__":
    prd_text = """
## PRD: Pak.Chat — High-Performance LLM Application

## Project Goal

To create a high-performance application for working with LLMs, with the ability to log in via a Google account.

## Main Components

### Input Field

*   Send button — sends the message
*   Stop button — stops response generation
*   Model selection button — opens a modal window with LLM model options
*   Adaptive positioning:
    *   If there are no messages, the input field is centered on the screen
    *   In the centered state, the model selection modal window opens from the bottom (not the top)
*   Quoting:
    *   When quoting AI text, the input field expands
    *   The quoted text is displayed with a special background.
    *   A cross icon in the top right corner to cancel quoting. Below the cross, a tooltip "Press Esc"
    *   Quotes longer than 2 lines become scrollable
*   When the user scrolls up, an arrow should appear to the right above the input field. Clicking it scrolls down.
*   Before the button that opens the model selection window, there should be a "+" icon. Clicking it should open a small window containing buttons: [File icon] Add file, [Arrow icon] Recent, [Brush icon] Draw.

### Chat Navigation

Left navigation menu in the form of bars:

*   Each bar represents a user message
*   The length of the bar corresponds to the length of the message
*   On hover, the bar is replaced by a tile containing a short part of the user message.
*   Clicking the tile scrolls to the corresponding message in the chat.

### Chat History / New Chat

Chat history modal window (button in the top right corner):

*   Chat search field
*   Implement search by chat title and content.
*   Chat tiles with titles
*   Interactive elements:
    *   On hover: delete and pin buttons appear.
    *   Double-click on the title: rename chat
    *   On hovering over a chat, a preview appears on the right.
*   New chat button next to the history button
*   The new chat creation button comes first, followed by the button to open chat history.

### Settings

Settings modal window with tabs:

"Settings" Tab:

*   General font selection: "Proxima Vara" or "System font"
*   Code font selection: "Berkeley Mono (default)" or "System monospace font"
*   Theme selection: light or dark

"Profile" Tab:

*   User avatar, name, and email address
*   Option to blur/hide all user data, applied automatically, can be disabled.
*   Logout button.

"API Keys" Tab:

*   Input fields for provider API keys:
    *   Google API Key
    *   OpenRouter
    *   OpenAI
    *   Groq
*   Quick links for creating API keys with the respective providers
*   List of supported models for each provider
*   In the mobile version, when scrolling down, this button should smoothly "slide" to the right.

### Messages and Interaction

User Messages (on hover):

*   Copy button — copies the message text
*   Edit button — allows editing with rollback after saving
*   Regeneration system: shows the number of regenerations below the message with navigation "← 1/2 →"

AI Messages (on hover):

*   "Start New Branch" button — creates a copy of the chat starting from the message where the button was clicked, including all previous messages. In the chat history window, the icon next to such a "clone" should be the same as on the button.
*   Regenerate button — rolls back to the selected point and regenerates
*   Quoting: when text is selected, a quoting button with quotation marks appears.
    """
    create_project_snapshot(prd_content=prd_text) 

--- FILE: ./wrangler.toml ---
main = "cloudflare/worker.ts"


--- FILE: ./vitest.config.ts ---
import path from 'node:path';
import { fileURLToPath } from 'node:url';

import { defineConfig } from 'vitest/config';

import { storybookTest } from '@storybook/addon-vitest/vitest-plugin';

const dirname =
  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));

// More info at: https://storybook.js.org/docs/next/writing-tests/integrations/vitest-addon
export default defineConfig({
  test: {
    workspace: [
      {
        extends: true,
        plugins: [
          // The plugin will run tests for the stories defined in your Storybook config
          // See options at: https://storybook.js.org/docs/next/writing-tests/integrations/vitest-addon#storybooktest
          storybookTest({ configDir: path.join(dirname, '.storybook') }),
        ],
        test: {
          name: 'storybook',
          browser: {
        enabled: true,
        headless: true,
        provider: 'playwright',
        instances: [{ browser: 'chromium' }]
      },
          setupFiles: ['.storybook/vitest.setup.ts'],
        },
      },
    ],
  },
});


--- FILE: ./vitest.shims.d.ts ---
/// <reference types="@vitest/browser/providers/playwright" />

--- FILE: ./app/layout.tsx ---
import type { Metadata } from 'next';
import './globals.css';
import 'katex/dist/katex.min.css';
import { Toaster } from '@/frontend/components/ui/sonner';
import Providers from '@/frontend/components/Providers';
import AppShellSkeleton from '@/frontend/components/AppShellSkeleton';
import { Suspense } from 'react';
import AuthListener from '@/frontend/components/AuthListener';
import ConvexClientProvider from '@/frontend/components/ConvexClientProvider';
import UserSync from '@/frontend/components/UserSync';

export const dynamic = 'force-dynamic';

export const metadata: Metadata = {
  title: 'Pak.Chat',
  description: 'High-Performance LLM Application',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <meta
          httpEquiv="Cross-Origin-Opener-Policy"
          content="same-origin-allow-popups"
        />
        <link rel="manifest" href="/manifest.webmanifest" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />
      </head>
      <body suppressHydrationWarning className="antialiased font-sans font-mono">
        <Suspense fallback={<AppShellSkeleton />}>
          <ConvexClientProvider>
            <Providers>
              <AuthListener>
                <UserSync />
                {children}
              </AuthListener>
            </Providers>
            <Toaster richColors position="top-right" />
          </ConvexClientProvider>
        </Suspense>
      </body>
    </html>
  );
}


--- FILE: ./app/page.tsx ---
'use client';

import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/frontend/stores/AuthStore';
import { Button } from '@/frontend/components/ui/button';

export default function IndexPage() {
  const { user, loading, login } = useAuthStore();
  const router = useRouter();

  useEffect(() => {
    if (!loading && user) {
      router.push('/chat');
    }
  }, [user, loading, router]);

  if (loading || (!loading && user)) {
    // Показываем пустой div, чтобы избежать моргания контента при редиректе
    return <div className="w-full h-screen bg-background" />;
  }

  return (
    <main className="flex min-h-screen flex-col items-center justify-center gap-6 p-4 text-center">
      <h1 className="text-4xl font-bold tracking-tight">Welcome to Pak.Chat</h1>
      <p className="text-lg text-muted-foreground">Your high-performance LLM application.</p>
      <Button size="lg" onClick={login} disabled={loading}>
        Sign In with Google to Continue
      </Button>
    </main>
  );
}


--- FILE: ./app/globals.css ---
@import 'tailwindcss';
@import 'tw-animate-css';
@plugin '@tailwindcss/typography';
@plugin 'tailwind-scrollbar';

@custom-variant dark (&:is(.dark *));

/* Font faces - temporarily disabled due to corrupted font files */
/*
@font-face {
  font-family: 'Proxima Vara';
  src: url('/fonts/ProximaVara-Regular.woff2') format('woff2'),
       url('/fonts/ProximaVara-Regular.woff') format('woff');
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Proxima Vara';
  src: url('/fonts/ProximaVara-Medium.woff2') format('woff2'),
       url('/fonts/ProximaVara-Medium.woff') format('woff');
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Proxima Vara';
  src: url('/fonts/ProximaVara-Semibold.woff2') format('woff2'),
       url('/fonts/ProximaVara-Semibold.woff') format('woff');
  font-weight: 600;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Berkeley Mono';
  src: url('/fonts/BerkeleyMono-Regular.woff2') format('woff2'),
       url('/fonts/BerkeleyMono-Regular.woff') format('woff');
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Berkeley Mono';
  src: url('/fonts/BerkeleyMono-Medium.woff2') format('woff2'),
       url('/fonts/BerkeleyMono-Medium.woff') format('woff');
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Berkeley Mono';
  src: url('/fonts/BerkeleyMono-Bold.woff2') format('woff2'),
       url('/fonts/BerkeleyMono-Bold.woff') format('woff');
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}
*/

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.81 0.1 252);
  --chart-2: oklch(0.62 0.19 260);
  --chart-3: oklch(0.55 0.22 263);
  --chart-4: oklch(0.49 0.22 264);
  --chart-5: oklch(0.42 0.18 266);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
  --font-sans: Geist, sans-serif;
  --font-serif: ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif;
  --font-mono: Geist Mono, monospace;
  --radius: 0.625rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

.dark {
  --background: oklch(0.2178 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.269 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.371 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --destructive-foreground: oklch(0.985 0 0);
  --border: oklch(0.275 0 0);
  --input: oklch(0.325 0 0);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.81 0.1 252);
  --chart-2: oklch(0.62 0.19 260);
  --chart-3: oklch(0.55 0.22 263);
  --chart-4: oklch(0.49 0.22 264);
  --chart-5: oklch(0.42 0.18 266);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.275 0 0);
  --sidebar-ring: oklch(0.439 0 0);
  --font-sans: Geist, sans-serif;
  --font-serif: ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif;
  --font-mono: Geist Mono, monospace;
  --radius: 0.625rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl: 0 1px 3px 0px hsl(0 0% 0% / 0.1),
    0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer utilities {
  .font-mono { font-family: var(--font-mono) !important; }
  .font-sans { font-family: var(--font-sans) !important; }
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-none::-webkit-scrollbar {
    display: none;
  }
  .scrollbar-none {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  /* Улучшенная прокрутка для всех устройств */
  .enhanced-scroll {
    -webkit-overflow-scrolling: touch;
    touch-action: pan-y;
    overscroll-behavior: contain;
  }
  
  /* Стили для цитирования */
  .quote-selection {
    background-color: rgba(59, 130, 246, 0.1);
    border-radius: 4px;
    padding: 2px 4px;
  }
  
  .quote-highlight {
    animation: quote-highlight 0.3s ease-in-out;
  }
  
  @keyframes quote-highlight {
    0% {
      background-color: rgba(59, 130, 246, 0.3);
    }
    100% {
      background-color: transparent;
    }
  }
  
  /* Анимации для мобильных элементов */
  .mobile-slide-left {
    animation: slide-left 0.3s ease-in-out;
  }
  
  .mobile-slide-right {
    animation: slide-right 0.3s ease-in-out;
  }
  
  @keyframes slide-left {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(-100%);
      opacity: 0;
    }
  }
  
  @keyframes slide-right {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }
  
  /* Улучшенный блюр для мобильных устройств */
  .mobile-blur {
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    background: rgba(255, 255, 255, 0.1);
  }
  
  .dark .mobile-blur {
    background: rgba(0, 0, 0, 0.1);
  }
  
  /* Line clamp utilities */
  .line-clamp-1 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
  }
  
  .line-clamp-2 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
  
  .line-clamp-3 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
  }
  
  /* Безопасная область для мобильных устройств */
  .pb-safe {
    padding-bottom: env(safe-area-inset-bottom);
  }
  
  .pt-safe {
    padding-top: env(safe-area-inset-top);
  }
  
  /* Исправление для мобильной клавиатуры */
  @supports (-webkit-touch-callout: none) {
    .mobile-keyboard-fix {
      padding-bottom: calc(env(safe-area-inset-bottom) + env(keyboard-inset-height, 0px));
    }
  }
  
  /* Улучшенный скролл для модальных окон на мобильных */
  .mobile-modal-scroll {
    height: 100%;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
    touch-action: pan-y;
    overscroll-behavior: contain;
    scroll-behavior: smooth;
  }
  
  /* Дополнительные отступы для мобильных настроек */
  .mobile-settings-content {
    padding-bottom: calc(env(safe-area-inset-bottom) + 2rem);
  }
  
  /* Исправление для мобильных устройств - предотвращение зума при фокусе на input */
  @media screen and (max-width: 768px) {
    input[type="text"],
    input[type="email"],
    input[type="password"],
    textarea,
    select {
      font-size: 16px !important;
    }
  }
}

.shiki {
  @apply !rounded-none;
}

/* Добавить в конец файла app/globals.css */

.blur-sm {
    filter: blur(4px);
}
.blur-md {
    filter: blur(8px);
}

@keyframes fade {
  from { opacity: 0; }
  to { opacity: 1; }
}

.fade-in {
  animation: fade .2s ease-in;
}

@media (max-width: 768px) {
  .bg-background\/80 {
    backdrop-filter: none !important;
  }
  .shadow-lg,
  .ring-1 {
    box-shadow: none !important;
  }
}

.no-transition *, .no-transition {
  transition: none !important;
}

.chat-smooth {
  transition: opacity .15s ease-in;
}


@supports (padding: max(0px)) {
  input,
  textarea {
    min-width: 0 !important;
  }
}


@supports (-webkit-touch-callout: none) {
  input, textarea { font-size: 16px !important; }
}



--- FILE: ./app/chat/page.tsx ---
'use client'
import Chat from '@/frontend/components/Chat';
import { useConvexAuth } from 'convex/react';
import { useRouter } from 'next/navigation';
import { useEffect } from 'react';
import AppShellSkeleton from '@/frontend/components/AppShellSkeleton';

export default function NewChatPage() {
  const { isAuthenticated, isLoading } = useConvexAuth();
  const router = useRouter();

  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      router.replace('/');
    }
  }, [isLoading, isAuthenticated, router]);

  if (isLoading || !isAuthenticated) {
    return <AppShellSkeleton />;
  }

  // Ключ "new-draft" гарантирует, что для нового чата всегда будет чистое состояние
  return (
    <Chat
      key="new-draft"
      threadId=""
      initialMessages={[]}
    />
  );
}


--- FILE: ./app/chat/[...slug]/page.tsx ---
'use client';

import { useRouter } from 'next/navigation';
import { use, useEffect, useMemo, useState } from 'react';
import { useQuery, useConvexAuth } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { Id, Doc } from '@/convex/_generated/dataModel';
import { isConvexId } from '@/lib/ids';
import Chat from '@/frontend/components/Chat';
import AppShellSkeleton from '@/frontend/components/AppShellSkeleton';

// Эта страница теперь ловит все адреса типа /chat/что-угодно
export default function CatchAllChatPage({ params }: { params: { slug: string[] } }) {
  const chatId = params.slug?.[0]; 
  
  const router = useRouter();
  const { isAuthenticated, isLoading: authLoading } = useConvexAuth();
  const [isInitialLoad, setIsInitialLoad] = useState(true);

  const isValidId = useMemo(() => isConvexId(chatId), [chatId]);

  const thread = useQuery(
    api.threads.get,
    isValidId ? { threadId: chatId as Id<'threads'> } : 'skip'
  );

  const messagesResult = useQuery(
    api.messages.get,
    isValidId ? { threadId: chatId as Id<'threads'> } : 'skip'
  );

  const attachments = useQuery(
    api.attachments.byThread,
    isValidId ? { threadId: chatId as Id<'threads'> } : 'skip'
  );
  
  const messages = useMemo(() => {
    if (!attachments || !messagesResult) return []; // Защита от undefined

    const attachmentsMap: Record<string, any[]> = {}
    attachments.forEach(a => {
      if (!a.messageId) return
      if (!attachmentsMap[a.messageId]) attachmentsMap[a.messageId] = []
      attachmentsMap[a.messageId].push(a)
    })

    const rawMessages: Doc<'messages'>[] = Array.isArray(messagesResult)
      ? messagesResult
      : messagesResult?.page || []

    return rawMessages.map(m => ({
      id: m._id,
      role: m.role,
      content: m.content,
      createdAt: new Date(m._creationTime),
      parts: [{ type: 'text' as const, text: m.content }],
      attachments: attachmentsMap[m._id] ?? []
    }))
  }, [messagesResult, attachments]);

  useEffect(() => {
    if (authLoading) return;
    if (!isAuthenticated) {
      router.replace('/');
      return;
    }
    if (!isValidId) {
      router.replace('/chat');
      return;
    }
    if (thread === null) {
      router.replace('/chat');
    }
  }, [authLoading, isAuthenticated, isValidId, router, chatId, thread]);
  
  const isLoading = authLoading || !isValidId || thread === undefined || messagesResult === undefined || attachments === undefined;

  useEffect(() => {
    if (!isLoading) {
      setIsInitialLoad(false);
    }
  }, [isLoading]);

  if (isInitialLoad) {
    return <AppShellSkeleton />;
  }

  if (thread === null) {
    return null;
  }

  return (
    <Chat
      key={chatId}
      threadId={chatId}
      initialMessages={messages}
    />
  )
}


--- FILE: ./app/api/llm/route.ts ---
import { createGoogleGenerativeAI } from '@ai-sdk/google';
import { createOpenAI } from '@ai-sdk/openai';
import { createOpenRouter } from '@openrouter/ai-sdk-provider';
import { streamText, convertToCoreMessages, type Message } from 'ai';
import { getModelConfig, AIModel } from '@/lib/models';
import { NextRequest, NextResponse } from 'next/server';
import { fetchQuery } from 'convex/nextjs';
import { api } from '@/convex/_generated/api';
import type { Id } from '@/convex/_generated/dataModel';

/**
 * Download a remote file and return it as a data URL for models that
 * require inline file contents.
 */
async function urlToDataUrl(url: string): Promise<{ dataUrl: string; type: string }> {
  const response = await fetch(url);
  if (!response.ok) {
    throw new Error(`Failed to fetch file from URL: ${url}`);
  }
  const blob = await response.blob();
  const buffer = await blob.arrayBuffer();
  const base64 = Buffer.from(buffer).toString('base64');
  const dataUrl = `data:${blob.type};base64,${base64}`;
  return { dataUrl, type: blob.type };
}

interface Attachment {
  id: Id<'attachments'>;
  messageId: Id<'messages'> | undefined;
  name: string;
  type: string;
  url: string | null;
}

type ChatMessage = Omit<Message, 'id'>;


export const maxDuration = 60;

export async function POST(req: NextRequest) {
  try {
    const { messages, model, apiKeys, threadId } = await req.json();

    if (!threadId) {
      return NextResponse.json(
        { error: 'threadId required' },
        { status: 400 }
      );
    }

    const modelConfig = getModelConfig(model as AIModel);
    const apiKey = apiKeys[modelConfig.provider];

    if (!apiKey) {
      return new NextResponse(JSON.stringify({ error: 'Missing API key' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    let aiModel;
    switch (modelConfig.provider) {
      case 'google':
        aiModel = createGoogleGenerativeAI({ apiKey })(modelConfig.modelId);
        break;
      case 'openai':
        aiModel = createOpenAI({ apiKey })(modelConfig.modelId);
        break;
      case 'openrouter':
        aiModel = createOpenRouter({ apiKey })(modelConfig.modelId);
        break;
      default:
        return new Response(JSON.stringify({ error: 'Unsupported model provider' }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' },
        });
    }

    let attachments: Attachment[] = [];
    if (threadId) {
      try {
        attachments = await fetchQuery(api.attachments.byThread, { threadId });
      } catch (e) {
        console.error('Attachment fetch failed:', e);
      }
    }

    const processedMessages: ChatMessage[] = await Promise.all(
      messages.map(async (message: { id: string; role: string; content: string }) => {
        const messageAttachments = attachments.filter(
          (a) => a.messageId === message.id && a.url
        );

        if (messageAttachments.length === 0) {
          return { role: message.role, content: message.content };
        }

        const content: ({ type: 'text'; text: string } | { type: 'image'; image: string })[] = [];

        if (message.content && message.content.trim()) {
          content.push({ type: 'text', text: message.content });
        }

        for (const attachment of messageAttachments) {
          if (modelConfig.provider === 'google') {
            content.push({ type: 'image', image: attachment.url! });
          } else {
            try {
              const { dataUrl } = await urlToDataUrl(attachment.url!);
              content.push({ type: 'image', image: dataUrl });
            } catch (e) {
              console.error(`Failed to process attachment for ${modelConfig.provider}:`, e);
            }
          }
        }

        if (content.length > 0 && !content.some((c) => c.type === 'text')) {
          content.unshift({ type: 'text', text: 'Analyze the attached file(s).' });
        }

        return {
          role: message.role as 'user' | 'assistant',
          content: content.length > 1 ? content : message.content,
        };
      })
    );

    const coreMessages = convertToCoreMessages(processedMessages);

    const result = await streamText({
      model: aiModel,
      messages: coreMessages,
      onError: (e) => {
        console.error('AI SDK streamText Error:', e);
      },
      system: `
      You are Pak.Chat, an ai assistant that can answer questions and help with tasks.
      Be helpful and provide relevant information
      Be respectful and polite in all interactions.
      Be engaging and maintain a conversational tone.
      Always use LaTeX for mathematical expressions -
      Inline math must be wrapped in single dollar signs: $content$
      Display math must be wrapped in double dollar signs: $$content$$
      Display math should be placed on its own line, with nothing else on that line.
      Do not nest math delimiters or mix styles.
      Examples:
      - Inline: The equation $E = mc^2$ shows mass-energy equivalence.
      - Display: 
      $$\\frac{d}{dx}\\sin(x) = \\cos(x)$$

      When analyzing images or files, be descriptive and helpful. Explain what you see in detail and answer any questions about the content.
      `,
      abortSignal: req.signal,
    });

    return result.toDataStreamResponse({
      sendReasoning: true,
      getErrorMessage: (error) => (error as { message: string }).message,
    });
  } catch (error) {
    console.error('Chat API Error:', error);
    return new NextResponse(
      JSON.stringify({ error: 'Internal Server Error' }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
  }
}

--- FILE: ./app/api/completion/route.ts ---
import { createGoogleGenerativeAI } from '@ai-sdk/google';
import { generateText } from 'ai';
import { headers } from 'next/headers';
import { NextResponse } from 'next/server';

export async function POST(req: Request) {
  const headersList = await headers();
  const googleApiKey = headersList.get('X-Google-API-Key');

  if (!googleApiKey) {
    return NextResponse.json(
      {
        error: 'Google API key is required to enable chat title generation.',
      },
      { status: 400 }
    );
  }

  const google = createGoogleGenerativeAI({
    apiKey: googleApiKey,
  });

  const { prompt, isTitle, messageId, threadId } = await req.json();

  try {
    const { text: title } = await generateText({
      model: google('gemini-2.5-flash-preview-05-20'),
      system: `\n
      - you will generate a short title based on the first message a user begins a conversation with
      - ensure it is not more than 80 characters long
      - the title should be a summary of the user's message
      - you should NOT answer the user's message, you should only generate a summary/title
      - do not use quotes or colons`,
      prompt,
    });

    return NextResponse.json({ title, isTitle, messageId, threadId });
  } catch {
    // Fallback: use the first 80 characters of the prompt as the title so that
    // the client can continue functioning even if the LLM request fails.
    const fallbackTitle = (prompt as string)?.trim().slice(0, 80) || 'New chat';

    return NextResponse.json({
      title: fallbackTitle,
      isTitle,
      messageId,
      threadId,
      error: 'Failed to generate title – using fallback',
    });
  }
}


--- FILE: ./frontend/stores/DraftStore.ts ---
import { create } from 'zustand';

interface DraftState {
  draftKey: number;
  next: () => void;
}

export const useDraftStore = create<DraftState>(set => ({
  draftKey: 0,
  next: () => set(s => ({ draftKey: s.draftKey + 1 })),
}));


--- FILE: ./frontend/stores/APIKeyStore.ts ---
import { create } from 'zustand';
import { useEffect, useCallback } from 'react';
import { useMutation, useQuery, useConvexAuth } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { encryptData, decryptData } from '@/frontend/lib/crypto';
import { useAuthStore } from './AuthStore';

export const PROVIDERS = ['google', 'openrouter', 'openai'] as const;
export type Provider = (typeof PROVIDERS)[number];
export type APIKeys = Record<Provider, string>;

type APIKeyState = {
  keys: APIKeys;
  keysLoading: boolean;
  setLocal: (keys: Partial<APIKeys>) => void;
  /** Возвращает ключ по имени провайдера */
  getKey: (provider: Provider) => string | undefined;
  /** Проверяет наличие обязательных ключей */
  hasRequiredKeys: () => boolean;
};

// Функция для глубокого сравнения объектов
const deepEqual = (a: APIKeys, b: APIKeys): boolean => {
  return JSON.stringify(a) === JSON.stringify(b);
};

// Zustand store for managing API keys
const store = create<APIKeyState>((set, get) => ({
  keys: { google: '', openrouter: '', openai: '' },
  keysLoading: true,
  setLocal: (updates) =>
    set((state) => ({ keys: { ...state.keys, ...updates } })),
  getKey: (provider: Provider) => get().keys[provider],
  hasRequiredKeys: () => !!get().keys.google,
}));

export function useAPIKeyStore() {
  const { isAuthenticated } = useConvexAuth();
  const { user } = useAuthStore();

  // Fetch the Convex user to ensure sync is complete
  const convexUser = useQuery(
    api.users.getCurrent,
    isAuthenticated ? {} : 'skip'
  );

  // Only query settings once the user exists in Convex
  const settings = useQuery(
    api.userSettings.get,
    convexUser ? {} : 'skip'
  );
  const saveApiKeys = useMutation(api.userSettings.saveApiKeys);
  
  // Получаем состояние из store
  const storeState = store();
  // Loading is finished only after both user and settings are fetched
  const keysLoading = convexUser === undefined || settings === undefined;

  // Возвращаем keys и утилиты из состояния
  const { keys, getKey, hasRequiredKeys } = storeState;
  
  const setLocal = (updates: Partial<APIKeys>) => {
    const currentKeys = store.getState().keys;
    const newKeys = { ...currentKeys, ...updates };
    
    // Защита от пустых вызовов - проверяем, действительно ли изменились ключи
    if (!deepEqual(currentKeys, newKeys)) {
      store.setState({ keys: newKeys });
    }
  };

  useEffect(() => {
    if (settings && user) {
      const decrypted = decryptData<APIKeys>(settings.encryptedApiKeys, user.uid);
      const currentKeys = store.getState().keys;

      // Update keys only when they differ to avoid unnecessary renders
      if (!deepEqual(currentKeys, decrypted)) {
        store.setState({ keys: decrypted });
      }
      // Mark loading complete once keys have been processed
      if (store.getState().keysLoading) {
        store.setState({ keysLoading: false });
      }
    } else if (settings === null && store.getState().keysLoading) {
      // No settings stored for this user
      store.setState({ keysLoading: false });
    }
  }, [settings, user]);

  const setKeys = async (updates: Partial<APIKeys>) => {
    const currentKeys = store.getState().keys;
    const newKeys = { ...currentKeys, ...updates };
    
    
    // Защита от пустых вызовов - проверяем, действительно ли изменились ключи
    if (!deepEqual(currentKeys, newKeys)) {
      store.setState({ keys: newKeys });
      
      if (user) {
        const encrypted = encryptData(newKeys, user.uid);
        try {
          await saveApiKeys({ encryptedApiKeys: encrypted });
        } catch (error) {
          const { toast } = await import('sonner');
          toast.error('Failed to save keys');
        }
      } else {
      }
    } else {
    }
  };

  return { keys, setKeys, hasRequiredKeys, getKey, setLocal, keysLoading };
}


--- FILE: ./frontend/stores/SettingsStore.ts ---
import { create, Mutate, StoreApi } from 'zustand';
import { persist } from 'zustand/middleware';
import { useConvexAuth, useMutation, useQuery } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { useEffect, useRef } from 'react';

export const GENERAL_FONTS = ['Proxima Vara', 'System Font'] as const;
export const CODE_FONTS = ['Berkeley Mono', 'System Monospace Font'] as const;
export const THEMES = ['light', 'dark'] as const;

export type GeneralFont = (typeof GENERAL_FONTS)[number];
export type CodeFont = (typeof CODE_FONTS)[number];
export type Theme = (typeof THEMES)[number];

type Settings = {
  generalFont: GeneralFont;
  codeFont: CodeFont;
  theme: Theme;
  hidePersonal: boolean;
};

type SettingsStore = {
  settings: Settings;
  setSettings: (newSettings: Partial<Settings>) => void;
  resetSettings: () => void;
};

type StoreWithPersist = Mutate<
  StoreApi<SettingsStore>,
  [['zustand/persist', { settings: Settings }]]
>;

export const withStorageDOMEvents = (store: StoreWithPersist) => {
  const storageEventCallback = (e: StorageEvent) => {
    if (e.key === store.persist.getOptions().name && e.newValue) {
      store.persist.rehydrate();
    }
  };

  window.addEventListener('storage', storageEventCallback);

  return () => {
    window.removeEventListener('storage', storageEventCallback);
  };
};

const defaultSettings: Settings = {
  // Default interface font uses Proxima Vara when available
  generalFont: 'Proxima Vara',
  // Code font remains Berkeley Mono by default
  codeFont: 'Berkeley Mono',
  theme: 'light',
  hidePersonal: false,
};

export const useSettingsStore = create<SettingsStore>()(
  persist(
    (set, get) => ({
      settings: defaultSettings,

      setSettings: (newSettings) => {
        set((state) => ({
          settings: { ...state.settings, ...newSettings },
        }));
      },

      resetSettings: () => {
        set({ settings: defaultSettings });
      },
    }),
    {
      name: 'user-settings',
      partialize: (state) => ({ settings: state.settings }),
    }
  )
);

if (typeof window !== 'undefined') {
  withStorageDOMEvents(useSettingsStore);
}

export function useSettingsSync() {
  const { isAuthenticated } = useConvexAuth();
  const convexUser = useQuery(
    api.users.getCurrent,
    isAuthenticated ? {} : 'skip'
  );
  const settingsDoc = useQuery(
    api.userSettings.get,
    convexUser ? {} : 'skip'
  );
  const save = useMutation(api.userSettings.saveSettings);

  const { settings, setSettings } = useSettingsStore();
  const lastSaved = useRef<typeof settings | null>(null);

  // hydrate from server
  useEffect(() => {
    if (settingsDoc) {
      const { uiFont, codeFont, hidePersonal } = settingsDoc;
      setSettings({
        generalFont: uiFont as GeneralFont ?? 'Proxima Vara',
        codeFont: codeFont as CodeFont ?? 'Berkeley Mono',
        hidePersonal: hidePersonal ?? false,
      });
      lastSaved.current = {
        generalFont: uiFont as GeneralFont ?? 'Proxima Vara',
        codeFont: codeFont as CodeFont ?? 'Berkeley Mono',
        theme: settings.theme,
        hidePersonal: hidePersonal ?? false,
      };
    }
  }, [settingsDoc, setSettings, settings.theme]);

  // save to server when settings change
  useEffect(() => {
    if (!convexUser) return;
    if (!lastSaved.current) return;
    if (
      settings.generalFont !== lastSaved.current.generalFont ||
      settings.codeFont !== lastSaved.current.codeFont ||
      settings.hidePersonal !== lastSaved.current.hidePersonal
    ) {
      lastSaved.current = settings;
      save({
        uiFont: settings.generalFont,
        codeFont: settings.codeFont,
        hidePersonal: settings.hidePersonal,
      });
    }
  }, [settings, save, convexUser]);
}

--- FILE: ./frontend/stores/MessageVersionStore.ts ---
import { create } from 'zustand';

interface MessageVersionState {
  versions: Record<string, number>;
  updateVersion: (id: string, version: number) => void;
}

/**
 * Global store for tracking message content versions.
 * This persists across component unmounts during the session
 * but is not persisted to storage.
 */
export const useMessageVersionStore = create<MessageVersionState>((set) => ({
  versions: {},
  updateVersion: (id, version) =>
    set((state) => ({
      versions: { ...state.versions, [id]: version },
    })),
}));


--- FILE: ./frontend/stores/QuoteStore.ts ---
import { create } from 'zustand';

export interface Quote {
  id: string;
  text: string;
  messageId: string;
  createdAt: Date;
}

interface QuoteStore {
  currentQuote: Quote | null;
  isQuoting: boolean;
  setQuote: (quote: Quote | null) => void;
  clearQuote: () => void;
  setIsQuoting: (isQuoting: boolean) => void;
}

export const useQuoteStore = create<QuoteStore>((set) => ({
  currentQuote: null,
  isQuoting: false,
  
  setQuote: (quote) => set({ currentQuote: quote, isQuoting: !!quote }),
  
  clearQuote: () => set({ currentQuote: null, isQuoting: false }),
  
  setIsQuoting: (isQuoting) => set({ isQuoting }),
})); 

--- FILE: ./frontend/stores/AttachmentsStore.ts ---
import { create } from 'zustand';
import { v4 as uuid } from 'uuid';

interface Attachment {
  id: string;
  file: File;
  preview: string;
  name: string;
  ext: string;
  type: string;
  size: number;
}

interface AttachmentState {
  attachments: Attachment[];
  add: (file: File) => void;
  remove: (id: string) => void;
  clear: () => void;
}

export const useAttachmentsStore = create<AttachmentState>((set) => ({
  attachments: [],
  add: (file) =>
    set((state) => ({
      attachments: [
        ...state.attachments,
        {
          id: uuid(),
          file,
          preview: URL.createObjectURL(file),
          name: file.name.length > 24 ? file.name.slice(0, 21) + '...' : file.name,
          ext: file.name.split('.').pop() ?? '',
          type: file.type,
          size: file.size,
        },
      ],
    })),
  remove: (id) => set((state) => {
    const attachment = state.attachments.find(a => a.id === id);
    if (attachment) {
      URL.revokeObjectURL(attachment.preview);
    }
    return { attachments: state.attachments.filter((a) => a.id !== id) };
  }),
  clear: () => set((state) => {
    // Очищаем все preview URL
    state.attachments.forEach(a => URL.revokeObjectURL(a.preview));
    return { attachments: [] };
  }),
}));


--- FILE: ./frontend/stores/ModelStore.ts ---
import { create, Mutate, StoreApi } from 'zustand';
import { persist } from 'zustand/middleware';
import { AIModel, getModelConfig, ModelConfig } from '@/lib/models';

type ModelStore = {
  selectedModel: AIModel;
  setModel: (model: AIModel) => void;
  getModelConfig: () => ModelConfig;
};

type StoreWithPersist = Mutate<
  StoreApi<ModelStore>,
  [['zustand/persist', { selectedModel: AIModel }]]
>;

export const withStorageDOMEvents = (store: StoreWithPersist) => {
  const storageEventCallback = (e: StorageEvent) => {
    if (e.key === store.persist.getOptions().name && e.newValue) {
      store.persist.rehydrate();
    }
  };

  // Проверяем что window существует (только на клиенте)
  if (typeof window !== 'undefined') {
    window.addEventListener('storage', storageEventCallback);
  }

  return () => {
    if (typeof window !== 'undefined') {
      window.removeEventListener('storage', storageEventCallback);
    }
  };
};

export const useModelStore = create<ModelStore>()(
  persist(
    (set, get) => ({
      selectedModel: 'Gemini 2.5 Flash',

      setModel: (model) => {
        set({ selectedModel: model });
      },

      getModelConfig: () => {
        const { selectedModel } = get();
        return getModelConfig(selectedModel);
      },
    }),
    {
      name: 'selected-model',
      partialize: (state) => ({ selectedModel: state.selectedModel }),
    }
  )
);

withStorageDOMEvents(useModelStore);


--- FILE: ./frontend/stores/AuthStore.ts ---
import { User, GoogleAuthProvider, signInWithPopup, signOut, onAuthStateChanged } from 'firebase/auth';
import { create } from 'zustand';
import { auth } from '@/firebase';
import { useSettingsStore } from './SettingsStore';

interface AuthState {
  user: User | null;
  loading: boolean;
  blurPersonalData: boolean;
  login: () => Promise<void>;
  logout: () => Promise<void>;
  toggleBlur: () => void;
  init: () => () => void;
}

export const useAuthStore = create<AuthState>((set) => {
  // 1. Действия
  const actions = {
    async login() {
      set({ loading: true });
      try {
        await signInWithPopup(auth, new GoogleAuthProvider());
      } finally {
        set({ loading: false });
      }
    },
    async logout() {
      try {
        await signOut(auth);
      } catch {
        /* ignore logout failure */
      }
    },
    toggleBlur: () => {
      set((s) => {
        const newValue = !s.blurPersonalData;
        useSettingsStore.getState().setSettings({ hidePersonal: newValue });
        return { blurPersonalData: newValue };
      });
    },
  };

  // Allows React components to start and clean up the auth listener
  const init = () => {
    if (typeof window === 'undefined') {
      return () => {};
    }
    const unsub = onAuthStateChanged(auth, async (user) => {
      set({ user, loading: false });
    });
    return unsub;
  };

  // 3. Начальное состояние + действия
  return {
    user: null,
    loading: true,
    blurPersonalData: useSettingsStore.getState().settings.hidePersonal,
    ...actions,
    init,
  };
});


--- FILE: ./frontend/stores/ChatStore.ts ---
import { create } from 'zustand';

interface ChatStoreState {
  setInputFn: ((value: string) => void) | null;
  registerInputSetter: (fn: (value: string) => void) => void;
  setInput: (value: string) => void;
}

export const useChatStore = create<ChatStoreState>((set, get) => ({
  setInputFn: null,
  registerInputSetter: (fn) => set({ setInputFn: fn }),
  setInput: (value) => {
    const fn = get().setInputFn;
    if (fn) fn(value);
  },
}));


--- FILE: ./frontend/components/ChatNavigationBars.tsx ---
"use client"

import type React from "react"
import { useState, useRef, useEffect } from "react"
import { cn } from "@/lib/utils"
import { UIMessage } from 'ai'

interface ChatNavigationBarsProps {
  messages: UIMessage[]
  scrollToMessage: (id: string) => void
}

export default function ChatNavigationBars({ messages, scrollToMessage }: ChatNavigationBarsProps) {
  const [hoveredBar, setHoveredBar] = useState<string | null>(null)
  const [hoveredBarPosition, setHoveredBarPosition] = useState({ top: 0, left: 0 })
  const [maxBarLength, setMaxBarLength] = useState(0)
  const sidebarRef = useRef<HTMLDivElement>(null)

  // Фильтруем только пользовательские сообщения для навигации
  const userMessages = messages.filter(message => message.role === 'user')

  // Вычисляем максимальную длину полоски при монтировании компонента
  useEffect(() => {
    if (userMessages.length > 0) {
      const maxLength = Math.max(...userMessages.map((message) => getBarLength(message.content.length)))
      setMaxBarLength(maxLength)
    }
  }, [userMessages])

  // Функция для вычисления длины полоски на основе длины сообщения
  const getBarLength = (messageLength: number) => {
    const minLength = 20
    const maxLength = 120
    const maxMessageLength = 200

    const normalizedLength = Math.min(messageLength, maxMessageLength)
    const length = minLength + (normalizedLength / maxMessageLength) * (maxLength - minLength)

    return Math.round(length)
  }

  // Функция для получения превью сообщения и определения размера окна
  const getMessagePreview = (content: string) => {
    const preview = content.length > 80 ? content.substring(0, 80) + "..." : content
    const isShort = preview.length < 30
    return { preview, isShort }
  }

  const handleMouseEnter = (messageId: string, event: React.MouseEvent<HTMLDivElement>) => {
    setHoveredBar(messageId)

    const barElement = event.currentTarget
    const rect = barElement.getBoundingClientRect()

    setHoveredBarPosition({
      top: rect.top + rect.height / 2,
      left: sidebarRef.current ? sidebarRef.current.getBoundingClientRect().left + maxBarLength : rect.right,
    })
  }

  const handleMouseLeave = () => {
    setHoveredBar(null)
  }

  const handleBarClick = (messageId: string) => {
    scrollToMessage(messageId)
  }

  // Если нет пользовательских сообщений, не отображаем навигацию
  if (userMessages.length === 0) {
    return null
  }

  return (
    <>
      {/* Навигационные полоски */}
      <div ref={sidebarRef} className="fixed left-0 top-0 w-16 h-full flex flex-col items-start justify-center py-4 space-y-3 pl-2 z-30">
        {userMessages.map((message) => {
          const barLength = getBarLength(message.content.length)

          return (
            <div
              key={message.id}
              className={cn(
                "bg-blue-500/60 hover:bg-blue-500 dark:bg-blue-400/60 dark:hover:bg-blue-400 transition-all duration-200 cursor-pointer rounded-r-full",
                "hover:shadow-md",
                "will-change-transform-shadow transition-property-all"
              )}
              style={{
                width: `${barLength}px`,
                height: "4px",
              }}
              onMouseEnter={(e) => handleMouseEnter(message.id, e)}
              onMouseLeave={handleMouseLeave}
              onClick={() => handleBarClick(message.id)}
            />
          )
        })}

        {/* Всплывающая плитка с превью */}
        {hoveredBar &&
          (() => {
            const messageData = userMessages.find((m) => m.id === hoveredBar)
            if (!messageData) return null
            
            const { preview, isShort } = getMessagePreview(messageData.content)

            return (
              <div
                className="fixed z-50 overflow-hidden pointer-events-none"
                style={{
                  left: hoveredBarPosition.left + 16,
                  top: hoveredBarPosition.top,
                  transform: "translateY(-50%)",
                  width: isShort ? "160px" : "240px",
                  height: isShort ? "48px" : "72px",
                }}
              >
                {/* Основной контейнер с стекломорфизмом */}
                <div className="relative w-full h-full bg-gradient-to-br from-white/90 via-white/80 to-white/70 dark:from-gray-900/80 dark:via-gray-800/70 dark:to-gray-700/60 backdrop-blur-xl rounded-xl border border-gray-200/60 dark:border-white/20 shadow-2xl shadow-black/10 dark:shadow-black/40">
                  {/* Внутренний градиент для глубины */}
                  <div className="absolute inset-0 bg-gradient-to-br from-white/20 dark:from-white/10 to-transparent rounded-xl"></div>

                  {/* Верхний туман */}
                  <div className="absolute top-0 left-0 right-0 h-4 bg-gradient-to-b from-white/95 via-white/60 dark:from-gray-900/90 dark:via-gray-900/40 to-transparent z-10 rounded-t-xl"></div>

                  {/* Контейнер с текстом */}
                  <div className="relative flex items-center justify-center h-full px-4">
                    <div
                      className={cn(
                        "text-gray-800 dark:text-white text-center font-medium",
                        isShort ? "text-sm" : "text-sm leading-tight",
                      )}
                    >
                      {preview}
                    </div>
                  </div>

                  {/* Нижний туман */}
                  <div className="absolute bottom-0 left-0 right-0 h-4 bg-gradient-to-t from-white/95 via-white/60 dark:from-gray-900/90 dark:via-gray-900/40 to-transparent z-10 rounded-b-xl"></div>

                  {/* Дополнительная подсветка краев */}
                  <div className="absolute inset-0 rounded-xl ring-1 ring-gray-300/50 dark:ring-white/30 ring-inset"></div>
                </div>
              </div>
            )
          })()}
      </div>
    </>
  )
} 

--- FILE: ./frontend/components/UserSync.tsx ---
"use client";

import { useUserSync } from '@/frontend/hooks/useUserSync';

export default function UserSync() {
  useUserSync();
  return null;
} 

--- FILE: ./frontend/components/ChatHistoryButton.tsx ---
"use client"

import { useState } from 'react';
import { Button } from './ui/button';
import { History } from 'lucide-react';
import { WithTooltip } from './WithTooltip';
import ChatHistoryDrawer from './ChatHistoryDrawer';
import { cn } from '@/lib/utils';

interface ChatHistoryButtonProps {
  className?: string;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
  size?: "default" | "sm" | "lg" | "icon";
}

export default function ChatHistoryButton({ 
  className, 
  variant = "outline", 
  size = "icon" 
}: ChatHistoryButtonProps) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <ChatHistoryDrawer isOpen={isOpen} setIsOpen={setIsOpen}>
      <WithTooltip label="History" side="bottom">
        <Button
          variant={variant}
          size={size}
          className={cn('bg-background/80 backdrop-blur-sm border-border/50', className)}
          aria-label="Open chat history"
          onClick={() => setIsOpen(true)}
        >
          <History className="h-5 w-5" />
        </Button>
      </WithTooltip>
    </ChatHistoryDrawer>
  );
} 

--- FILE: ./frontend/components/KeyPrompt.tsx ---
import { Button } from '@/frontend/components/ui/button';
import { Key } from 'lucide-react';
import Link from 'next/link';
import { useAPIKeyStore } from '@/frontend/stores/APIKeyStore';

export default function KeyPrompt() {
  const { hasRequiredKeys, keysLoading } = useAPIKeyStore();
  if (keysLoading || hasRequiredKeys()) return null;
  return (
    <div className="fixed bottom-6 left-1/2 z-50">
      <div className="flex items-center p-4 pr-5 border rounded-lg bg-background shadow-lg gap-4 max-w-md">
        <div className="bg-primary/10 p-2.5 rounded-full">
          <Key className="h-5 w-5 text-primary" />
        </div>

        <div>
          <p className="text-sm font-medium">API keys required</p>
          <p className="text-xs text-muted-foreground">
            Add keys to enable chat
          </p>
        </div>

        <Link href="/settings">
          <Button size="sm" variant="outline" className="ml-2 h-8 text-xs">
            Configure
          </Button>
        </Link>
      </div>
    </div>
  );
}


--- FILE: ./frontend/components/ImageModal.tsx ---
"use client";

import { X } from 'lucide-react';
import { useEffect } from 'react';

interface ImageModalProps {
  isOpen: boolean;
  onClose: () => void;
  imageUrl: string;
  fileName: string;
  fileType: string;
  fileSize?: number;
}

export default function ImageModal({
  isOpen,
  onClose,
  imageUrl,
  fileName,
  fileType,
  fileSize
}: ImageModalProps) {
  // Закрытие по Escape
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
      // Блокируем скролл страницы
      document.body.style.overflow = 'hidden';
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  const formatFileSize = (bytes?: number) => {
    if (!bytes) return 'Unknown size';
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
  };

  return (
    <div 
      className="fixed inset-0 z-50 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4"
      onClick={onClose}
    >
      <div 
        className="relative bg-background rounded-xl shadow-2xl max-w-4xl max-h-[90vh] w-full overflow-hidden"
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-border">
          <div className="flex-1 min-w-0">
            <h3 className="text-lg font-semibold truncate">{fileName}</h3>
            <div className="flex items-center gap-4 text-sm text-muted-foreground mt-1">
              <span>{fileType}</span>
              <span>{formatFileSize(fileSize)}</span>
            </div>
          </div>
          <button
            onClick={onClose}
            className="ml-4 p-2 hover:bg-accent rounded-lg transition-colors"
            aria-label="Close modal"
          >
            <X className="h-5 w-5" />
          </button>
        </div>

        {/* Image */}
        <div className="flex items-center justify-center p-4 max-h-[calc(90vh-120px)] overflow-auto">
          <img
            src={imageUrl}
            alt={fileName}
            className="max-w-full max-h-full object-contain rounded-lg"
            loading="lazy"
          />
        </div>
      </div>
    </div>
  );
} 

--- FILE: ./frontend/components/QuoteDisplay.tsx ---
import { memo } from 'react';
import { X } from 'lucide-react';
import { Button } from './ui/button';
import { cn } from '@/lib/utils';
import { Quote } from '@/frontend/stores/QuoteStore';

interface QuoteDisplayProps {
  quote: Quote;
  onRemove: () => void;
  className?: string;
}

function PureQuoteDisplay({ quote, onRemove, className }: QuoteDisplayProps) {
  const isLongQuote = quote.text.length > 150;
  const displayText = isLongQuote ? `${quote.text.substring(0, 150)}...` : quote.text;
  const lines = quote.text.split('\n');
  const isMultiLine = lines.length > 2;

  return (
    <div
      className={cn(
        'relative bg-accent/40 border border-accent-foreground/20 rounded-lg p-3 mb-3 transition-all duration-200',
        'before:content-["""] before:absolute before:left-1 before:top-2 before:text-3xl before:text-muted-foreground/60 before:font-serif before:leading-none',
        'after:content-["""] after:absolute after:right-1 after:bottom-2 after:text-3xl after:text-muted-foreground/60 after:font-serif after:leading-none',
        'hover:bg-accent/60 hover:border-accent-foreground/30',
        className
      )}
    >
      <div className="flex items-start justify-between gap-2">
        <div className={cn(
          'flex-1 text-sm text-foreground/80 pl-6 pr-6',
          isMultiLine && isLongQuote && 'max-h-24 overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-muted-foreground/30 scrollbar-thumb-rounded-full'
        )}>
          <div className="whitespace-pre-wrap leading-relaxed">
            {isLongQuote ? displayText : quote.text}
          </div>
        </div>
        
        <div className="flex flex-col items-center gap-0 shrink-0">
          <Button
            variant="ghost"
            size="icon"
            onClick={onRemove}
            className="h-6 w-6 shrink-0 hover:bg-destructive/20 hover:text-destructive transition-all duration-200 hover:scale-110"
            title="Remove quote"
          >
            <X className="w-3 h-3" />
          </Button>
          <span className="text-[11px] mt-1 text-muted-foreground select-none">
            Press <kbd className="px-1 py-0.5 bg-muted rounded text-[10px] font-mono">Esc</kbd>
          </span>
        </div>
      </div>
    </div>
  );
}

const QuoteDisplay = memo(PureQuoteDisplay);
QuoteDisplay.displayName = 'QuoteDisplay';

export default QuoteDisplay; 

--- FILE: ./frontend/components/ScrollToBottomButton.tsx ---
"use client";

import { Button } from '@/frontend/components/ui/button';
import { cn } from '@/lib/utils';
import { ChevronDown } from 'lucide-react';
import { useEffect, useState } from 'react';

export type ScrollToBottomButtonProps = {
  className?: string;
  threshold?: number;
} & React.ButtonHTMLAttributes<HTMLButtonElement>;

export default function ScrollToBottomButton({
  className,
  threshold = 100,
  ...props
}: ScrollToBottomButtonProps) {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.scrollY;
      const innerHeight = window.innerHeight;
      const scrollHeight = document.documentElement.scrollHeight;
      setIsVisible(scrollTop + innerHeight < scrollHeight - threshold);
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll();
    
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, [threshold]);

  const scrollToBottom = () => {
    window.scrollTo({
      top: document.documentElement.scrollHeight,
      behavior: 'smooth',
    });
  };

  return (
    <Button
      variant="outline"
      size="icon"
      className={cn(
        'z-50 h-10 w-10 rounded-full transition-all duration-150 ease-out',
        'backdrop-blur-md border border-foreground/20 shadow-lg',
        'flex items-center justify-center',
        'bg-white/70 hover:bg-white/80 border-gray-200/60',
        'dark:bg-background/90 dark:hover:bg-background',
        isVisible
          ? 'translate-y-0 scale-100 opacity-100'
          : 'pointer-events-none translate-y-2 scale-90 opacity-0',
        className
      )}
      onClick={scrollToBottom}
      {...props}
    >
      <ChevronDown className="h-4 w-4" />
    </Button>
  );
}


--- FILE: ./frontend/components/AttachmentsBar.tsx ---
import { useRef } from 'react';
import { Plus, X } from 'lucide-react';
import { useAttachmentsStore } from '../stores/AttachmentsStore';

interface AttachmentsBarProps {
  mode?: 'compact' | 'full';
}

export default function AttachmentsBar({ mode = 'full' }: AttachmentsBarProps) {
  const { attachments, add, remove } = useAttachmentsStore();
  const inputRef = useRef<HTMLInputElement>(null);

  // В компактном режиме показываем только кнопку добавления
  if (mode === 'compact') {
    return (
      <div className="flex items-center">
        <button
          onClick={() => inputRef.current?.click()}
          className="flex items-center justify-center w-8 h-8 rounded bg-accent hover:bg-accent/80 flex-shrink-0"
          aria-label="Add file"
        >
          <Plus className="w-4 h-4" />
        </button>
        <input
          ref={inputRef}
          type="file"
          hidden
          multiple
          accept="image/*,application/pdf,text/*"
          onChange={(e) => {
            const files = Array.from(e.target.files ?? []);
            files.forEach(add);
            e.target.value = '';
          }}
        />
      </div>
    );
  }

  // В полном режиме показываем все файлы
  return (
    <div className="flex items-center gap-2 w-full overflow-x-auto pb-2">
      {attachments.map((f) => (
        <div key={f.id} className="relative flex-shrink-0">
          {f.type.startsWith('image') ? (
            <img 
              src={f.preview} 
              className="h-16 w-16 object-cover rounded-lg border border-border" 
              alt={f.name}
            />
          ) : (
            <div className="h-16 w-20 bg-muted rounded-lg border border-border flex flex-col items-center justify-center text-[10px] px-1">
              <span className="line-clamp-1 text-center">{f.name}</span>
              <span className="text-muted-foreground">{f.ext}</span>
            </div>
          )}
          <button
            onClick={() => remove(f.id)}
            className="absolute -right-1 -top-1 bg-background border border-border rounded-full p-1 hover:bg-destructive hover:text-destructive-foreground transition-colors"
            aria-label="Remove file"
          >
            <X className="w-3 h-3" />
          </button>
        </div>
      ))}
      <input
        ref={inputRef}
        type="file"
        hidden
        multiple
        accept="image/*,application/pdf,text/*"
        onChange={(e) => {
          const files = Array.from(e.target.files ?? []);
          files.forEach(add);
          e.target.value = '';
        }}
      />
    </div>
  );
}


--- FILE: ./frontend/components/MemoizedMarkdown.tsx ---
import { memo, useMemo, useState, createContext, useContext } from 'react';
import ReactMarkdown, { type Components } from 'react-markdown';
import remarkGfm from 'remark-gfm';
import remarkMath from 'remark-math';
import rehypeKatex from 'rehype-katex';
import rehypeSanitize from 'rehype-sanitize';
import { marked } from 'marked';
import { useEffect, useRef } from 'react';
import type { ComponentProps } from 'react';
import type { ExtraProps } from 'react-markdown';
import { Check, Copy } from 'lucide-react';
import { useTheme } from 'next-themes';

type CodeComponentProps = ComponentProps<'code'> & ExtraProps;
type MarkdownSize = 'default' | 'small';

// Context to pass size down to components
const MarkdownSizeContext = createContext<MarkdownSize>('default');

const components: Components = {
  code: CodeBlock as Components['code'],
  pre: ({ children }) => <>{children}</>,
  table: ({ children }) => (
    <div 
      className="overflow-x-auto" 
      style={{
        scrollbarWidth: 'none',  // Firefox
        msOverflowStyle: 'none', // IE and Edge
      }}
    >
      <style jsx global>{`
        /* Hide scrollbar for Chrome, Safari and Opera */
        .overflow-x-auto::-webkit-scrollbar {
          display: none;
        }
      `}</style>
      <table className="min-w-full border-collapse">
        {children}
      </table>
    </div>
  ),
  th: ({ children }) => (
    <th className="border px-4 py-2 text-left bg-secondary/50">
      {children}
    </th>
  ),
  td: ({ children }) => (
    <td className="border px-4 py-2">
      {children}
    </td>
  ),
};

function CodeBlock({ children, className, ...props }: CodeComponentProps) {
  const size = useContext(MarkdownSizeContext);
  const { theme } = useTheme();
  const match = /language-(\w+)/.exec(className || '');

  if (match) {
    const lang = match[1];
    const shikiTheme = theme === 'light' ? 'github-light' : 'material-theme-darker';

    const [html, setHtml] = useState<string | null>(null);
    const codeRef = useRef(String(children));

    useEffect(() => {
      const worker = new Worker(new URL('../worker/shikiWorker.ts', import.meta.url), { type: 'module' });
      worker.postMessage({ code: codeRef.current, lang, theme: shikiTheme });
      worker.onmessage = (e) => setHtml(e.data as string);
      return () => worker.terminate();
    }, [lang, shikiTheme]);

    return (
      <div className="rounded-none">
        <Codebar lang={lang} codeString={codeRef.current} />
        <pre className="shiki text-sm font-mono" dangerouslySetInnerHTML={{ __html: html || '' }} />
      </div>
    );
  }

  const inlineCodeClasses =
    size === 'small'
      ? 'mx-0.5 overflow-auto rounded-md px-1 py-0.5 bg-primary/10 text-foreground font-mono text-xs'
      : 'mx-0.5 overflow-auto rounded-md px-2 py-1 bg-primary/10 text-foreground font-mono';

  return (
    <code className={inlineCodeClasses} {...props}>
      {children}
    </code>
  );
}

function Codebar({ lang, codeString }: { lang: string; codeString: string }) {
  const [copied, setCopied] = useState(false);

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(codeString);
      setCopied(true);
      setTimeout(() => {
        setCopied(false);
      }, 2000);
    } catch {
      /* ignore clipboard failures */
    }
  };

  return (
    <div className="flex justify-between items-center px-4 py-2 bg-secondary text-foreground rounded-t-md">
      <span className="text-sm font-mono">{lang}</span>
      <button onClick={copyToClipboard} className="text-sm cursor-pointer">
        {copied ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
      </button>
    </div>
  );
}

function parseMarkdownIntoBlocks(markdown: string): string[] {
  const tokens = marked.lexer(markdown);
  return tokens.map((token) => token.raw);
}

function PureMarkdownRendererBlock({ content }: { content: string }) {
  return (
    <ReactMarkdown
      remarkPlugins={[remarkGfm, [remarkMath]]}
      rehypePlugins={[rehypeKatex, rehypeSanitize]}
      components={components}
    >
      {content}
    </ReactMarkdown>
  );
}

const MarkdownRendererBlock = memo(
  PureMarkdownRendererBlock,
  (prevProps, nextProps) => {
    if (prevProps.content !== nextProps.content) return false;
    return true;
  }
);

MarkdownRendererBlock.displayName = 'MarkdownRendererBlock';

const MemoizedMarkdown = memo(
  ({
    content,
    id,
    size = 'default',
  }: {
    content: string;
    id: string;
    size?: MarkdownSize;
  }) => {
    const blocks = useMemo(() => parseMarkdownIntoBlocks(content), [content]);

    const proseClasses =
      size === 'small'
        ? 'prose prose-sm dark:prose-invert bread-words max-w-none w-full prose-code:before:content-none prose-code:after:content-none'
        : 'prose prose-base dark:prose-invert bread-words max-w-none w-full prose-code:before:content-none prose-code:after:content-none';

    return (
      <MarkdownSizeContext.Provider value={size}>
        <div className={proseClasses}>
          {blocks.map((block, index) => (
            <MarkdownRendererBlock
              content={block}
              key={`${id}-block-${index}`}
            />
          ))}
        </div>
      </MarkdownSizeContext.Provider>
    );
  }
);

MemoizedMarkdown.displayName = 'MemoizedMarkdown';

export default MemoizedMarkdown;


--- FILE: ./frontend/components/NewChatButton.tsx ---
"use client"

import { Button } from './ui/button';
import { Plus } from 'lucide-react';
import { WithTooltip } from './WithTooltip';
import { cn } from '@/lib/utils';
import { useRouter } from 'next/navigation';

interface NewChatButtonProps {
  className?: string;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
  size?: "default" | "sm" | "lg" | "icon";
}

export default function NewChatButton({
  className,
  variant = "outline",
  size = "icon"
}: NewChatButtonProps) {
  const router = useRouter();

  const handleClick = () => {
    router.push('/chat');
  };

  return (
    <WithTooltip label="New Chat" side="bottom">
      <Button
        variant={variant}
        size={size}
        className={cn('bg-background/80 backdrop-blur-sm border-border/50', className)}
        aria-label="Create new chat"
        onClick={handleClick}
      >
        <Plus className="h-5 w-5" />
      </Button>
    </WithTooltip>
  );
}


--- FILE: ./frontend/components/AuthListener.tsx ---
'use client';
import { useAuthStore } from '@/frontend/stores/AuthStore';
import { ReactNode, useEffect, useState } from 'react';

export default function AuthListener({ children }: { children: ReactNode }) {
  const init = useAuthStore((s) => s.init);
  const loading = useAuthStore((s) => s.loading);
  const [ready, setReady] = useState(false);

  useEffect(() => {
    const unsub = init();
    setReady(true);
    return unsub;
  }, [init]);

  if (!ready || loading) return null;
  return <>{children}</>;
}


--- FILE: ./frontend/components/ChatInputSkeleton.tsx ---
"use client";
import { Skeleton } from "./ui/skeleton";

export default function ChatInputSkeleton() {
  return (
    <div className="fixed bottom-0 w-full max-w-3xl pb-safe">
      <div className="bg-secondary p-4 rounded-t-[20px] flex flex-col gap-2">
        <Skeleton className="h-4 w-3/4" />
        <Skeleton className="h-10 w-full" />
      </div>
    </div>
  );
}


--- FILE: ./frontend/components/PageSkeleton.tsx ---
"use client";
import { Skeleton } from "./ui/skeleton";

export default function PageSkeleton() {
  return (
    <div className="flex flex-col w-full max-w-3xl mx-auto pt-10 pb-44 space-y-12">
      {Array.from({ length: 4 }).map((_, i) => (
        <Skeleton key={i} className="h-24" />
      ))}
    </div>
  );
}


--- FILE: ./frontend/components/AppShellSkeleton.tsx ---
import React from 'react';

export default function AppShellSkeleton() {
  return <div className="w-full h-full invisible" />;
}


--- FILE: ./frontend/components/SettingsDrawer.tsx ---
"use client"

import { useState, useEffect, useCallback, memo } from 'react';
import { Drawer, DrawerContent, DrawerTrigger, DrawerHeader, DrawerTitle } from '@/components/ui/drawer';
import { Dialog, DialogContent, DialogTrigger, DialogHeader, DialogTitle, DialogDescription } from '@/frontend/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { Label } from '@/components/ui/label';
import { 
  Settings, 
  Palette, 
  Key, 
  Type, 
  Monitor, 
  Sun, 
  Moon,
  User
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { useSettingsStore, GENERAL_FONTS, CODE_FONTS, THEMES, GeneralFont, CodeFont, Theme } from '@/frontend/stores/SettingsStore';
import { useAPIKeyStore } from '@/frontend/stores/APIKeyStore';
import { useAuthStore } from '@/frontend/stores/AuthStore';
import { useTheme } from 'next-themes';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { FieldError, useForm, UseFormRegister } from 'react-hook-form';
import { toast } from 'sonner';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';

interface SettingsDrawerProps {
  children: React.ReactNode;
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
}

const formSchema = z.object({
  google: z.string().trim().min(1, {
    message: 'Google API key is required for Title Generation',
  }),
  openrouter: z.string().trim().optional(),
  openai: z.string().trim().optional(),
});

type FormValues = z.infer<typeof formSchema>;

function SettingsDrawerComponent({ children, isOpen, setIsOpen }: SettingsDrawerProps) {
  const { isMobile, mounted } = useIsMobile(600);
  const [activeTab, setActiveTab] = useState("customization");

  const handleOpenChange = useCallback((open: boolean) => {
    setIsOpen(open);
  }, [setIsOpen]);

  const ContentComponent = ({ className }: { className?: string }) => (
    <div className={cn("flex flex-col gap-4 flex-1 min-h-0", className)}>
      <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col min-h-0">
        <TabsList className={cn("grid w-full flex-shrink-0", isMobile ? "grid-cols-3" : "grid-cols-3")}>
          <TabsTrigger value="customization" className="flex items-center gap-1 text-xs sm:text-sm">
            <Palette className="h-3 w-3 sm:h-4 sm:w-4" />
            <span className="hidden sm:inline">Customization</span>
            <span className="sm:hidden">Style</span>
          </TabsTrigger>
          <TabsTrigger value="profile" className="flex items-center gap-1 text-xs sm:text-sm">
            <User className="h-3 w-3 sm:h-4 sm:w-4" />
            <span className="hidden xs:inline">Profile</span>
            <span className="xs:hidden">User</span>
          </TabsTrigger>
          <TabsTrigger value="api-keys" className="flex items-center gap-1 text-xs sm:text-sm">
            <Key className="h-3 w-3 sm:h-4 sm:w-4" />
            <span className="hidden sm:inline">API Keys</span>
            <span className="sm:hidden">Keys</span>
          </TabsTrigger>
        </TabsList>
        
        <div className="flex-1 mt-4 min-h-0 overflow-y-auto scrollbar-none enhanced-scroll">
          {/* Ленивая отрисовка содержимого вкладок */}
          {activeTab === 'customization' && (
            <div className={cn("mt-0", isMobile ? "mobile-settings-content" : "")}>
              <CustomizationTab />
            </div>
          )}
          
          {activeTab === 'profile' && (
            <div className={cn("mt-0", isMobile ? "mobile-settings-content" : "")}>
              <ProfileTab />
            </div>
          )}
          
          {activeTab === 'api-keys' && (
            <div className={cn("mt-0", isMobile ? "mobile-settings-content" : "")}>
              <APIKeysTab />
            </div>
          )}
        </div>
      </Tabs>
    </div>
  );

  if (!mounted) {
    return (
      <Dialog open={isOpen} onOpenChange={handleOpenChange}>
        <DialogTrigger asChild>
          {children}
        </DialogTrigger>
        <DialogContent className="max-w-3xl h-[80vh] flex flex-col">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Settings className="h-5 w-5" />
              Settings
            </DialogTitle>
            <DialogDescription className="sr-only">
              Configure your application settings, profile, and API keys
            </DialogDescription>
          </DialogHeader>
          <ContentComponent />
        </DialogContent>
      </Dialog>
    );
  }

  if (isMobile) {
    return (
      <Drawer open={isOpen} onOpenChange={handleOpenChange}>
        <DrawerTrigger asChild>
          {children}
        </DrawerTrigger>
        <DrawerContent className="max-h-[calc(100dvh-10px)] flex flex-col w-full p-0">
          {/* Pull handle */}
          <div className="flex justify-center pt-2 pb-1 flex-shrink-0">
            <div className="w-12 h-1 bg-muted-foreground/30 rounded-full" />
          </div>
          
          {/* Header with backdrop blur */}
          <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-md border-b border-border/50 flex-shrink-0">
            <DrawerHeader className="pb-2">
              <DrawerTitle className="flex items-center gap-2 text-lg">
                <Settings className="h-5 w-5" />
                Settings
              </DrawerTitle>
            </DrawerHeader>
          </div>
          
          {/* Content area with proper scrolling */}
          <div className="flex-1 min-h-0 px-4 pb-safe overflow-y-auto scrollbar-none enhanced-scroll">
            <ContentComponent />
          </div>
        </DrawerContent>
      </Drawer>
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>
        {children}
      </DialogTrigger>
      <DialogContent className="max-w-3xl h-[80vh] flex flex-col">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            Settings
          </DialogTitle>
          <DialogDescription className="sr-only">
            Configure your application settings, profile, and API keys
          </DialogDescription>
        </DialogHeader>
        <ContentComponent />
      </DialogContent>
    </Dialog>
  );
}

const CustomizationTab = () => {
  const { settings, setSettings } = useSettingsStore();
  const { setTheme } = useTheme();

  const handleFontChange = (type: 'generalFont' | 'codeFont', value: GeneralFont | CodeFont) => {
    setSettings({ [type]: value });
  };

  const handleThemeChange = (theme: Theme) => {
    setSettings({ theme });
    setTheme(theme);
  };

  const FontPreview = ({ fontType, font }: { fontType: 'general' | 'code', font: string }) => {
    const getFontFamily = () => {
      if (fontType === 'general') {
        return font === 'Proxima Vara' ? 'Proxima Vara, sans-serif' : 'system-ui, sans-serif';
      } else {
        return font === 'Berkeley Mono' ? 'Berkeley Mono, monospace' : 'ui-monospace, monospace';
      }
    };

    const sampleText = fontType === 'general' 
      ? 'The quick brown fox jumps over the lazy dog'
      : 'function hello() {\n  console.log("Hello, World!");\n}';

    // Применяем шрифт к корневому элементу для немедленного эффекта
    useEffect(() => {
      const root = document.documentElement;
      if (fontType === 'general') {
        if (font === 'Proxima Vara') {
          root.style.setProperty('--font-sans', 'Proxima Vara, sans-serif');
        } else {
          root.style.setProperty('--font-sans', 'system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif');
        }
      } else {
        if (font === 'Berkeley Mono') {
          root.style.setProperty('--font-mono', 'Berkeley Mono, "JetBrains Mono", "Fira Code", "Cascadia Code", Consolas, monospace');
        } else {
          root.style.setProperty('--font-mono', 'ui-monospace, "SF Mono", Monaco, "Cascadia Code", "Roboto Mono", Consolas, "Courier New", monospace');
        }
      }
    }, [font, fontType]);

    return (
      <div 
        className="p-3 bg-muted rounded-md border text-sm"
        style={{ fontFamily: getFontFamily() }}
      >
        {fontType === 'code' ? (
          <pre className="whitespace-pre-wrap">
            <code className="text-blue-600 dark:text-blue-400">function</code>{' '}
            <code className="text-purple-600 dark:text-purple-400">hello</code>
            <code className="text-gray-600 dark:text-gray-400">()</code>{' '}
            <code className="text-gray-600 dark:text-gray-400">{'{'}</code>
            {'\n  '}
            <code className="text-blue-600 dark:text-blue-400">console</code>
            <code className="text-gray-600 dark:text-gray-400">.</code>
            <code className="text-purple-600 dark:text-purple-400">log</code>
            <code className="text-gray-600 dark:text-gray-400">(</code>
            <code className="text-green-600 dark:text-green-400">"Hello, World!"</code>
            <code className="text-gray-600 dark:text-gray-400">);</code>
            {'\n'}
            <code className="text-gray-600 dark:text-gray-400">{'}'}</code>
          </pre>
        ) : (
          sampleText
        )}
      </div>
    );
  };

  return (
    <div className="space-y-6 pb-4">
      {/* General Font Section */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <Type className="h-4 w-4" />
            General Font
          </CardTitle>
          <CardDescription className="text-sm">
            Choose the font for the general interface
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2 flex-wrap">
            {GENERAL_FONTS.map((font) => (
              <Button
                key={font}
                size="sm"
                variant={settings.generalFont === font ? "default" : "outline"}
                onClick={() => handleFontChange('generalFont', font)}
              >
                {font}
              </Button>
            ))}
          </div>
          <FontPreview fontType="general" font={settings.generalFont} />
        </CardContent>
      </Card>

      {/* Code Font Section */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <Monitor className="h-4 w-4" />
            Code Font
          </CardTitle>
          <CardDescription className="text-sm">
            Choose the font for code blocks and programming text
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2 flex-wrap">
            {CODE_FONTS.map((font) => (
              <Button
                key={font}
                size="sm"
                variant={settings.codeFont === font ? "default" : "outline"}
                onClick={() => handleFontChange('codeFont', font)}
              >
                {font}
              </Button>
            ))}
          </div>
          <FontPreview fontType="code" font={settings.codeFont} />
        </CardContent>
      </Card>

      {/* Theme Section */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <Palette className="h-4 w-4" />
            Theme
          </CardTitle>
          <CardDescription className="text-sm">
            Choose between light and dark theme
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex gap-2">
            <Button
              size="sm"
              variant={settings.theme === 'light' ? "default" : "outline"}
              onClick={() => handleThemeChange('light')}
              className="flex items-center gap-2"
            >
              <Sun className="h-4 w-4" />
              Light
            </Button>
            <Button
              size="sm"
              variant={settings.theme === 'dark' ? "default" : "outline"}
              onClick={() => handleThemeChange('dark')}
              className="flex items-center gap-2"
            >
              <Moon className="h-4 w-4" />
              Dark
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

const ProfileTab = () => {
  const { user, login, logout, blurPersonalData, toggleBlur, loading } = useAuthStore();

  const handleLogout = async () => {
    await logout();
    toast.success("You have been signed out.");
  };

  const handleLogin = async () => {
    await login();
  };

  return (
    <div className="space-y-6 pb-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <User className="h-4 w-4" />
            Profile
          </CardTitle>
          <CardDescription className="text-sm">
            Manage your profile and account settings.
          </CardDescription>
        </CardHeader>

        <CardContent className="space-y-4">
          {loading ? (
             <p className="text-sm text-muted-foreground text-center">Loading profile...</p>
          ) : user ? (
            <>
              <div className="flex items-center gap-4">
                {user.photoURL && (
                   <img
                      src={user.photoURL}
                      alt="User Avatar"
                      width={64}
                      height={64}
                      className={cn(
                        "size-16 rounded-full object-cover transition-all",
                        blurPersonalData && "blur-md"
                      )}
                   />
                )}
                <div className="flex-1 space-y-1">
                  <p className={cn("text-sm font-medium transition-all", blurPersonalData && "blur-sm")}>
                    {user.displayName || 'No Name'}
                  </p>
                  <p className={cn("text-xs text-muted-foreground transition-all", blurPersonalData && "blur-sm")}>
                    {user.email || 'No Email'}
                  </p>
                </div>
              </div>

              <Button size="sm" variant="outline" className="w-full" onClick={toggleBlur}>
                {blurPersonalData ? 'Show Personal Data' : 'Hide Personal Data'}
              </Button>
              <Button size="sm" variant="destructive" className="w-full" onClick={handleLogout}>
                Sign Out
              </Button>
            </>
          ) : (
            <Button
              size="sm"
              variant="outline"
              className="w-full"
              onClick={handleLogin}
              disabled={loading}
            >
              Sign In with Google
            </Button>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

const APIKeysTab = () => {
  const { keys, setKeys, keysLoading } = useAPIKeyStore();

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: keys,
  });

  const { register, handleSubmit, formState: { errors, isDirty }, reset } = form;

  // Сбрасываем форму ОДИН раз - когда загрузились ключи
  useEffect(() => {
    if (!keysLoading) {
      form.reset(keys);
    }
    // зависим только от keysLoading
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [keysLoading]);

  const onSubmit = useCallback(
    (values: FormValues) => {
      setKeys(values);
      toast.success('API keys saved successfully');
    },
    [setKeys]
  );

  return (
    <div className="space-y-6 pb-4" key={keysLoading ? 'loading' : 'ready'}>
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-base">
            <Key className="h-4 w-4" />
            API Keys
          </CardTitle>
          <CardDescription className="text-sm">
            Keys are stored locally in your browser.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            <ApiKeyField
              id="google"
              label="Google API Key"
              models={['Gemini 2.5 Flash', 'Gemini 2.5 Pro']}
              linkUrl="https://aistudio.google.com/apikey"
              placeholder="AIza..."
              register={register}
              error={errors.google}
              required
            />

            <ApiKeyField
              id="openrouter"
              label="OpenRouter API Key"
              models={['DeepSeek R1 0538', 'DeepSeek-V3']}
              linkUrl="https://openrouter.ai/settings/keys"
              placeholder="sk-or-..."
              register={register}
              error={errors.openrouter}
            />

            <ApiKeyField
              id="openai"
              label="OpenAI API Key"
              models={['GPT-4o', 'GPT-4.1-mini']}
              linkUrl="https://platform.openai.com/settings/organization/api-keys"
              placeholder="sk-..."
              register={register}
              error={errors.openai}
            />

            <Button type="submit" className="w-full" disabled={!isDirty || keysLoading} size="sm">
              Save API Keys
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};

interface ApiKeyFieldProps {
  id: string;
  label: string;
  linkUrl: string;
  models: string[];
  placeholder: string;
  error?: FieldError | undefined;
  required?: boolean;
  register: UseFormRegister<FormValues>;
}

const ApiKeyField = ({
  id,
  label,
  linkUrl,
  placeholder,
  models,
  error,
  required,
  register,
}: ApiKeyFieldProps) => (
  <div className="flex flex-col gap-2">
    <Label htmlFor={id} className="flex gap-1 text-sm">
      <span>{label}</span>
      {required && <span className="text-muted-foreground"> (Required)</span>}
    </Label>
    <div className="flex gap-1 flex-wrap">
      {models.map((model) => (
        <Badge key={model} variant="secondary" className="text-xs">{model}</Badge>
      ))}
    </div>

    <Input
      id={id}
      placeholder={placeholder}
      {...register(id as keyof FormValues)}
      className={cn("text-sm w-full min-w-0", error ? 'border-red-500' : '')}
    />

    <a
      href={linkUrl}
      target="_blank"
      rel="noopener noreferrer"
      className="text-xs text-blue-500 hover:underline inline w-fit"
    >
      Create {label.split(' ')[0]} API Key
    </a>

    {error && (
      <p className="text-xs font-medium text-red-500">{error.message}</p>
    )}
  </div>
); 
export default memo(SettingsDrawerComponent);



--- FILE: ./frontend/components/ChatHistoryDrawer.tsx ---
"use client"

import { useState, useMemo, useCallback, memo, useDeferredValue } from 'react';
import { Drawer, DrawerContent, DrawerTrigger, DrawerHeader, DrawerTitle } from '@/components/ui/drawer';
import { Dialog, DialogContent, DialogTrigger, DialogHeader, DialogTitle, DialogDescription } from '@/frontend/components/ui/dialog';
import { Button, buttonVariants } from './ui/button';
import { Input } from './ui/input';
import { Tooltip, TooltipContent, TooltipTrigger } from './ui/tooltip';
// Dexie imports removed as Convex is now the data source
import { useRouter, useParams } from 'next/navigation';
import { X, Pin, PinOff, Search, MessageSquare, Plus, Edit2, Check, GitBranch } from 'lucide-react';
import { cn } from '@/lib/utils';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';
import { useQuery, useMutation, useConvexAuth } from 'convex/react';
import { api } from '@/convex/_generated/api';
import type { Doc, Id } from '@/convex/_generated/dataModel';

// Minimal thread interface used for rendering
type Thread = Doc<'threads'>;

interface ChatHistoryDrawerProps {
  children: React.ReactNode;
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
}

function ChatHistoryDrawerComponent({ children, isOpen, setIsOpen }: ChatHistoryDrawerProps) {
  const [rawQuery, setRawQuery] = useState('');
  const searchQuery = useDeferredValue(rawQuery);
  const [editingThreadId, setEditingThreadId] = useState<Id<'threads'> | null>(null);
  const [editingTitle, setEditingTitle] = useState('');
  const [deletingThreadId, setDeletingThreadId] = useState<Id<'threads'> | null>(null);
  
  const { isMobile, mounted } = useIsMobile(600);
  const { id } = useParams();
  const router = useRouter();
  const { isAuthenticated } = useConvexAuth();
  
  const threads = useQuery(
    api.threads.list,
    isAuthenticated ? undefined : "skip"
  );
  const removeThread = useMutation(api.threads.remove);
  const renameThread = useMutation(api.threads.rename);
  const togglePin = useMutation(api.threads.togglePin);

  const handleOpenChange = useCallback((open: boolean) => {
    setIsOpen(open);
    if (!open) {
      setRawQuery('');
      setEditingThreadId(null);
      setEditingTitle('');
      setDeletingThreadId(null);
    }
  }, [setIsOpen]);

  const filteredThreads = useMemo(() => {
    if (!threads) return [];

    const filtered = searchQuery.trim()
      ? threads.filter(thread =>
          thread.title.toLowerCase().includes(searchQuery.toLowerCase())
        )
      : threads;

    const pinned = filtered.filter(t => t.pinned);
    const unpinned = filtered.filter(t => !t.pinned);

    return [...pinned, ...unpinned];
  }, [threads, searchQuery]);

  const handleThreadClick = useCallback((threadId: Id<'threads'>) => {
    if (id === threadId) {
      handleOpenChange(false);
      return;
    }
    router.push(`/chat/${threadId}`);
    handleOpenChange(false);
  }, [id, router, handleOpenChange]);

  const handleEdit = useCallback((thread: Thread) => {
    setEditingThreadId(thread._id);
    setEditingTitle(thread.title);
  }, []);

  const handleSaveEdit = useCallback(async (threadId: Id<'threads'>) => {
    await renameThread({ threadId, title: editingTitle });
    setEditingThreadId(null);
    setEditingTitle('');
  }, [editingTitle, renameThread]);

  const handleCancelEdit = useCallback(() => {
    setEditingThreadId(null);
    setEditingTitle('');
  }, []);

  const handleDelete = useCallback((threadId: Id<'threads'>) => {
    setDeletingThreadId(threadId);
  }, []);

  const handleConfirmDelete = useCallback(async (threadId: Id<'threads'>) => {
    await removeThread({ threadId });
    if (id === threadId) {
      router.push('/chat');
    }
    setDeletingThreadId(null);
  }, [id, router, removeThread]);

  const handleCancelDelete = useCallback(() => {
    setDeletingThreadId(null);
  }, []);

  const handlePinToggle = useCallback(
    async (threadId: Id<'threads'>, event: React.MouseEvent) => {
      event.preventDefault();
      event.stopPropagation();
      const thread = threads?.find(t => t._id === threadId);
      if (!thread) return;
      await togglePin({ threadId, pinned: !thread.pinned });
    },
    [togglePin, threads]
  );

  const handleNewChat = useCallback(() => {
    router.push('/chat');
    handleOpenChange(false);
  }, [router, handleOpenChange]);

  const formatDate = (date: Date) => {
    const now = new Date();
    const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
    
    if (diffInDays === 0) return 'Today';
    if (diffInDays === 1) return 'Yesterday';
    if (diffInDays < 7) return `${diffInDays} days ago`;
    
    return date.toLocaleDateString();
  };

  const groupThreadsByDate = (threads: Thread[]) => {
    if (searchQuery) return [{ name: 'Search Results', threads }];
    
    const groups: { name: string; threads: Thread[] }[] = [];
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    
    const todayThreads = threads.filter(t =>
      new Date(t._creationTime).toDateString() === today.toDateString()
    );
    const yesterdayThreads = threads.filter(t =>
      new Date(t._creationTime).toDateString() === yesterday.toDateString()
    );
    const lastWeekThreads = threads.filter(t => {
      const threadDate = new Date(t._creationTime);
      return threadDate > lastWeek && threadDate < yesterday;
    });
    const olderThreads = threads.filter(t =>
      new Date(t._creationTime) <= lastWeek
    );
    
    if (todayThreads.length > 0) groups.push({ name: 'Today', threads: todayThreads });
    if (yesterdayThreads.length > 0) groups.push({ name: 'Yesterday', threads: yesterdayThreads });
    if (lastWeekThreads.length > 0) groups.push({ name: 'Last 7 days', threads: lastWeekThreads });
    if (olderThreads.length > 0) groups.push({ name: 'Older', threads: olderThreads });
    
    return groups;
  };

  const groupedThreads = useMemo(() => groupThreadsByDate(filteredThreads), [filteredThreads, searchQuery]);

  const renderThreadItem = useCallback((thread: Thread) => (
    <div key={thread._id}>
      <div className="space-y-1.5">
        {editingThreadId === thread._id ? (
          <div className="flex items-center gap-2 p-2 rounded-lg bg-muted">
            <Input
              value={editingTitle}
              onChange={(e) => setEditingTitle(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === 'Enter') {
                  handleSaveEdit(thread._id);
                } else if (e.key === 'Escape') {
                  handleCancelEdit();
                }
              }}
              className="flex-1 h-8 text-sm"
              autoFocus
            />
            <Button 
              size="icon" 
              variant="ghost" 
              className="h-8 w-8"
              onClick={() => handleSaveEdit(thread._id)}
            >
              <Check className="size-4" />
            </Button>
            <Button 
              size="icon" 
              variant="ghost" 
              className="h-8 w-8"
              onClick={handleCancelEdit}
            >
              <X className="size-4" />
            </Button>
          </div>
        ) : deletingThreadId === thread._id ? (
          <div className="flex items-center gap-2 p-2 rounded-lg bg-destructive/10 border border-destructive/20">
            <span className="flex-1 text-sm">Delete this chat?</span>
            <Button 
              size="sm" 
              variant="destructive"
              onClick={() => handleConfirmDelete(thread._id)}
            >
              Delete
            </Button>
            <Button 
              size="sm" 
              variant="outline"
              onClick={handleCancelDelete}
            >
              Cancel
            </Button>
          </div>
        ) : (
          <div
            className={cn(
              "group flex items-center justify-between rounded-lg px-2 py-1.5 hover:bg-accent cursor-pointer transition-colors",
              id === thread._id && "bg-accent"
            )}
            onClick={() => handleThreadClick(thread._id)}
          >
            <div className="flex-1 min-w-0 pr-2">
              <div className="flex items-center gap-2">
                {thread.pinned && (
                  <Pin className="h-3 w-3 text-primary shrink-0" />
                )}
                {thread.clonedFrom && (
                  <GitBranch className="h-3 w-3 text-primary shrink-0" />
                )}
                <span className="line-clamp-1 text-sm font-medium">{thread.title}</span>
              </div>
              <span className="text-xs text-muted-foreground">{formatDate(new Date(thread._creationTime))}</span>
            </div>
            <div className="flex gap-0.5 sm:gap-1 opacity-0 group-hover:opacity-100 transition-opacity shrink-0">
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button 
                    size="icon" 
                    variant="ghost" 
                    className="h-6 w-6 sm:h-7 sm:w-7"
                    onClick={(e) => { 
                      e.preventDefault(); 
                      e.stopPropagation(); 
                      handleEdit(thread); 
                    }}
                  >
                    <Edit2 className="size-2.5 sm:size-3" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>Edit</TooltipContent>
              </Tooltip>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button 
                    size="icon" 
                    variant="ghost" 
                    className="h-6 w-6 sm:h-7 sm:w-7"
                    onClick={(e) => handlePinToggle(thread._id, e)}
                  >
                    {thread.pinned ? (
                      <PinOff className="size-2.5 sm:size-3" />
                    ) : (
                      <Pin className="size-2.5 sm:size-3" />
                    )}
                  </Button>
                </TooltipTrigger>
                <TooltipContent>{thread.pinned ? 'Unpin' : 'Pin'}</TooltipContent>
              </Tooltip>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    size="icon" 
                    variant="ghost" 
                    className="h-6 w-6 sm:h-7 sm:w-7"
                    onClick={(e) => { 
                      e.preventDefault(); 
                      e.stopPropagation(); 
                      handleDelete(thread._id);
                    }}
                  >
                    <X className="size-2.5 sm:size-3" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>Delete</TooltipContent>
              </Tooltip>
            </div>
          </div>
        )}
      </div>
    </div>
  ), [editingThreadId, deletingThreadId, id, editingTitle, handleThreadClick, handleEdit, handleSaveEdit, handleCancelEdit, handleConfirmDelete, handleCancelDelete, handlePinToggle, handleDelete]);

  // Early returns after all hooks
  if (!isAuthenticated || threads === undefined) {
    return null;
  }

  const ContentComponent = () => (
    <div className="flex h-full flex-col">
      <div className="flex-1 overflow-y-auto scrollbar-none enhanced-scroll px-3 sm:px-4">
        <div className="space-y-4 sm:space-y-6 pt-2 pb-8">
          {filteredThreads.length === 0 ? (
            <div className="text-center text-sm text-muted-foreground py-4">
              {searchQuery ? 'No chats found.' : 'No chat history found.'}
            </div>
          ) : searchQuery ? (
            filteredThreads.map(thread => renderThreadItem(thread))
          ) : (
            groupedThreads.map(group => (
              <div key={group.name} className="space-y-0.5">
                <h3 className="pl-2 text-sm font-medium text-muted-foreground">{group.name}</h3>
                <div className="space-y-1 sm:space-y-2">
                  {group.threads.map(thread => renderThreadItem(thread))}
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );

  if (!mounted) {
    return (
      <Dialog open={isOpen} onOpenChange={handleOpenChange}>
        <DialogTrigger asChild>{children}</DialogTrigger>
        <DialogContent className="max-w-md h-[80vh] flex flex-col p-0 [&>button]:top-2 [&>button]:right-2">
          <DialogHeader className="px-4 pt-4 pb-2 flex flex-col gap-2">
            <DialogTitle className="flex items-center gap-2">
              <MessageSquare className="h-5 w-5" />
              Chat History
              <Button
                variant="ghost"
                size="sm"
                onClick={handleNewChat}
                className="ml-auto flex items-center gap-2 text-sm"
              >
                <Plus className="size-4" />
                New chat
              </Button>
            </DialogTitle>
            <DialogDescription className="sr-only">
              Browse and search through your chat history
            </DialogDescription>
            <div className="relative">
              <Input
                placeholder="Search…"
                className="rounded-lg py-1.5 pl-8 text-sm w-full"
                value={searchQuery}
                onChange={(e) => setRawQuery(e.target.value)}
              />
              <Search className="absolute left-2.5 top-1/2 -translate-y-1/2 text-muted-foreground size-3.5" />
            </div>
          </DialogHeader>
          <div className="flex-1 min-h-0">
            <ContentComponent />
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  if (isMobile) {
    return (
      <Drawer open={isOpen} onOpenChange={handleOpenChange}>
        <DrawerTrigger asChild>{children}</DrawerTrigger>
        <DrawerContent className="max-h-[95vh] flex flex-col w-full">
          <div className="flex h-full max-h-[90vh] flex-col">
            {/* Pull handle */}
            <div className="flex justify-center pt-4 pb-2">
              <div className="w-16 h-2 bg-muted-foreground/30 rounded-full" />
            </div>
            
            {/* Header with backdrop blur and search */}
            <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-md border-b border-border/50">
              <DrawerHeader className="pb-2 flex flex-col gap-2">
                <DrawerTitle className="flex items-center gap-2 text-lg">
                  <MessageSquare className="h-5 w-5" />
                  Chat History
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={handleNewChat}
                    className="ml-auto flex items-center gap-2 text-sm"
                  >
                    <Plus className="size-4" />
                    New chat
                  </Button>
                </DrawerTitle>
                <div className="relative">
                  <Input
                    placeholder="Search…"
                    className="rounded-lg py-1.5 pl-8 text-sm w-full"
                    value={searchQuery}
                    onChange={(e) => setRawQuery(e.target.value)}
                  />
                  <Search className="absolute left-2.5 top-1/2 -translate-y-1/2 text-muted-foreground size-3.5" />
                </div>
              </DrawerHeader>
            </div>
            
            <div className="flex-1 min-h-0 overflow-y-auto scrollbar-none enhanced-scroll">
              <ContentComponent />
            </div>
          </div>
        </DrawerContent>
      </Drawer>
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="max-w-md h-[80vh] flex flex-col p-0 [&>button]:top-2 [&>button]:right-2">
        <DialogHeader className="px-4 pt-4 pb-2 flex flex-col gap-2">
          <DialogTitle className="flex items-center gap-2">
            <MessageSquare className="h-5 w-5" />
            Chat History
            <Button
              variant="ghost"
              size="sm"
              onClick={handleNewChat}
              className="ml-auto flex items-center gap-2 text-sm"
            >
              <Plus className="size-4" />
              New chat
            </Button>
          </DialogTitle>
          <DialogDescription className="sr-only">
            Browse and search through your chat history
          </DialogDescription>
          <div className="relative">
            <Input
              placeholder="Search…"
              className="rounded-lg py-1.5 pl-8 text-sm w-full"
              value={searchQuery}
              onChange={(e) => setRawQuery(e.target.value)}
            />
            <Search className="absolute left-2.5 top-1/2 -translate-y-1/2 text-muted-foreground size-3.5" />
          </div>
        </DialogHeader>
        <div className="flex-1 min-h-0">
          <ContentComponent />
        </div>
      </DialogContent>
    </Dialog>
  );
}

export default memo(ChatHistoryDrawerComponent);


--- FILE: ./frontend/components/MessageControls.tsx ---
import { Dispatch, SetStateAction, useState } from 'react';
import { Button } from './ui/button';
import { cn } from '@/lib/utils';
import { Check, Copy, RefreshCcw, SquarePen, GitBranch } from 'lucide-react';
import { UIMessage } from 'ai';
import { UseChatHelpers } from '@ai-sdk/react';
import { useAPIKeyStore } from '@/frontend/stores/APIKeyStore';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';
import { useMutation, useQuery } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { isConvexId } from '@/lib/ids';
import type { Id } from '@/convex/_generated/dataModel';
import { useRouter } from 'next/navigation';

interface MessageControlsProps {
  threadId: string;
  message: UIMessage;
  setMessages: UseChatHelpers['setMessages'];
  content: string;
  setMode?: Dispatch<SetStateAction<'view' | 'edit'>>;
  reload: UseChatHelpers['reload'];
  stop: UseChatHelpers['stop'];
  isVisible?: boolean; // Для мобильных устройств
  onToggleVisibility?: () => void; // Для мобильных устройств
}

export default function MessageControls({
  threadId,
  message,
  setMessages,
  content,
  setMode,
  reload,
  stop,
  isVisible = false,
  onToggleVisibility,
}: MessageControlsProps) {
  const [copied, setCopied] = useState(false);
  const { hasRequiredKeys } = useAPIKeyStore();
  const canChat = hasRequiredKeys();
  const { isMobile } = useIsMobile();
  const removeAfter = useMutation<typeof api.messages.removeAfter>(
    api.messages.removeAfter
  );
  const removeMessage = useMutation<typeof api.messages.remove>(
    api.messages.remove
  );
  const cloneThread = useMutation<typeof api.threads.clone>(api.threads.clone);
  const thread = useQuery(
    api.threads.get,
    isConvexId(threadId) ? { threadId: threadId as Id<'threads'> } : 'skip'
  );
  const router = useRouter();

  const handleCopy = () => {
    navigator.clipboard.writeText(content);
    setCopied(true);
    setTimeout(() => {
      setCopied(false);
    }, 2000);
  };

  const handleRegenerate = async () => {
    // stop the current request
    stop();

    if (!isConvexId(threadId)) {
      return;
    }

    if (message.role === 'user') {
      await removeAfter({
        threadId: threadId as Id<'threads'>,
        afterMessageId: message.id as Id<'messages'>,
      });

      setMessages((messages) => {
        const index = messages.findIndex((m) => m.id === message.id);

        if (index !== -1) {
          return [...messages.slice(0, index + 1)];
        }

        return messages;
      });
    } else {
      await removeAfter({
        threadId: threadId as Id<'threads'>,
        afterMessageId: message.id as Id<'messages'>,
      });
      await removeMessage({ messageId: message.id as Id<'messages'> });

      setMessages((messages) => {
        const index = messages.findIndex((m) => m.id === message.id);

        if (index !== -1) {
          return [...messages.slice(0, index)];
        }

        return messages;
      });
    }

    setTimeout(() => {
      reload();
    }, 0);
  };

  // На мобильных устройствах показываем кнопки только когда isVisible = true
  const shouldShowControls = isMobile ? isVisible : true;

  return (
    <div
      className={cn(
        'transition-opacity duration-100 flex gap-1',
        {
          'absolute mt-5 right-2': message.role === 'user',
          'opacity-0 group-hover:opacity-100': !isMobile && shouldShowControls,
          'opacity-100': isMobile && shouldShowControls,
          'opacity-0': isMobile && !shouldShowControls,
        }
      )}
    >
      <Button variant="ghost" size="icon" onClick={handleCopy}>
        {copied ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
      </Button>
      {setMode && canChat && (
        <Button variant="ghost" size="icon" onClick={() => setMode('edit')}>
          <SquarePen className="w-4 h-4" />
        </Button>
      )}
      {canChat && (
        <Button
          variant="ghost"
          size="icon"
          onClick={async () => {
            if (!isConvexId(threadId)) return;
            const title = thread?.title ?? message.content.slice(0, 30);
            const newId = await cloneThread({
              threadId: threadId as Id<'threads'>,
              title,
            });
            router.push(`/chat/${newId}`);
            onToggleVisibility?.();
          }}
        >
          <GitBranch className="w-4 h-4" />
        </Button>
      )}
      {canChat && (
        <Button variant="ghost" size="icon" onClick={handleRegenerate}>
          <RefreshCcw className="w-4 h-4" />
        </Button>
      )}
    </div>
  );
}


--- FILE: ./frontend/components/WithTooltip.tsx ---
import { Tooltip, TooltipContent, TooltipTrigger } from './ui/tooltip';
import React from 'react';

interface WithTooltipProps {
  label: string;
  children: React.ReactElement;
  side?: React.ComponentProps<typeof TooltipContent>['side'];
}

export function WithTooltip({ label, children, side = 'top' }: WithTooltipProps) {
  return (
    <Tooltip>
      <TooltipTrigger asChild>{children}</TooltipTrigger>
      <TooltipContent side={side}>{label}</TooltipContent>
    </Tooltip>
  );
}


--- FILE: ./frontend/components/MessageReasoning.tsx ---
import { memo, useState } from 'react';
import MemoizedMarkdown from './MemoizedMarkdown';
import { ChevronDownIcon, ChevronUpIcon } from 'lucide-react';

function PureMessageReasoning({
  reasoning,
  id,
}: {
  reasoning: string;
  id: string;
}) {
  const [isExpanded, setIsExpanded] = useState(false);

  return (
    <div className="flex flex-col gap-2 pb-2 max-w-3xl w-full">
      <button
        onClick={() => setIsExpanded(!isExpanded)}
        className="flex items-center gap-2 text-muted-foreground cursor-pointer"
      >
        {isExpanded ? (
          <span>
            <ChevronUpIcon className="w-4 h-4" />
          </span>
        ) : (
          <span>
            <ChevronDownIcon className="w-4 h-4" />
          </span>
        )}
        <span>Reasoning</span>
      </button>
      {isExpanded && (
        <div className="p-4 rounded-md bg-secondary/10 text-xs border">
          <MemoizedMarkdown content={reasoning} id={id} size="small" />
        </div>
      )}
    </div>
  );
}

export default memo(PureMessageReasoning, (prev, next) => {
  return prev.reasoning === next.reasoning && prev.id === next.id;
});


--- FILE: ./frontend/components/SelectableText.tsx ---
import { memo, useCallback, useRef } from 'react';
import { useTextSelection } from '@/frontend/hooks/useTextSelection';
import { useQuoteStore } from '@/frontend/stores/QuoteStore';
import QuoteButton from './QuoteButton';
import { v4 as uuidv4 } from 'uuid';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';

interface SelectableTextProps {
  children: React.ReactNode;
  messageId: string;
  className?: string;
  disabled?: boolean;
}

function PureSelectableText({ 
  children, 
  messageId, 
  className, 
  disabled = false 
}: SelectableTextProps) {
  const containerRef = useRef<HTMLDivElement>(null);
  const { selection, clearSelection } = useTextSelection();
  const { setQuote } = useQuoteStore();
  const { isMobile } = useIsMobile();

  const handleQuote = useCallback(() => {
    if (!selection?.text) return;

    const quote = {
      id: uuidv4(),
      text: selection.text,
      messageId,
      createdAt: new Date(),
    };

    setQuote(quote);
    clearSelection();
  }, [selection, messageId, setQuote, clearSelection]);

  // Проверяем, что выделение находится внутри нашего контейнера
  const isSelectionInContainer = useCallback(() => {
    if (!selection?.range || !containerRef.current) return false;
    
    return containerRef.current.contains(selection.range.commonAncestorContainer);
  }, [selection]);

  const shouldShowQuoteButton = 
    !disabled && 
    selection && 
    selection.text.length > 0 && 
    selection.rect && 
    isSelectionInContainer();

  return (
    <div ref={containerRef} className={className}>
      {children}
      
      {shouldShowQuoteButton && (
        <QuoteButton
          onQuote={handleQuote}
          position={(function() {
            const { left, top, width, bottom } = selection.rect!;
            const buttonHeight = 32; // приблизительная высота кнопки
            const buttonWidth = 80; // приблизительная ширина кнопки

            let posX = left + width / 2 - buttonWidth / 2;
            
            // Горизонтальное ограничение с учетом мобильных устройств
            const margin = isMobile ? 16 : 8;
            posX = Math.max(margin, Math.min(posX, window.innerWidth - buttonWidth - margin));

            // Вертикальное позиционирование
            let posY = top - buttonHeight - 8;
            
            // Если не помещается сверху, показываем снизу
            if (posY < margin) {
              posY = bottom + 8;
            }
            
            // Последняя проверка для нижнего края
            posY = Math.min(posY, window.innerHeight - buttonHeight - margin);

            // На мобильных устройствах добавляем дополнительный отступ снизу
            if (isMobile && posY > window.innerHeight - buttonHeight - 60) {
              posY = top - buttonHeight - 8;
            }

            return { x: posX, y: posY };
          })()}
        />
      )}
    </div>
  );
}

const SelectableText = memo(PureSelectableText);
SelectableText.displayName = 'SelectableText';

export default SelectableText; 

--- FILE: ./frontend/components/QuoteButton.tsx ---
import { memo } from 'react';
import { Quote as QuoteIcon } from 'lucide-react';
import { Button } from './ui/button';
import { cn } from '@/lib/utils';

interface QuoteButtonProps {
  onQuote: () => void;
  position: { x: number; y: number };
  className?: string;
}

function PureQuoteButton({ onQuote, position, className }: QuoteButtonProps) {
  return (
    <div
      className={cn(
        'fixed animate-in fade-in-0 zoom-in-95 duration-200',
        className
      )}
      style={{
        left: position.x,
        top: position.y,
        zIndex: 9999,
      }}
    >
      <Button
        size="sm"
        onClick={onQuote}
        className="shadow-lg border border-border/50 bg-popover text-popover-foreground hover:bg-accent hover:text-accent-foreground transition-all duration-200 hover:scale-105"
      >
        <QuoteIcon className="w-4 h-4" />
        Quote
      </Button>
    </div>
  );
}

const QuoteButton = memo(PureQuoteButton);
QuoteButton.displayName = 'QuoteButton';

export default QuoteButton; 

--- FILE: ./frontend/components/MessageEditor.tsx ---
// Dexie imports removed; operations will be handled via Convex
import { UseChatHelpers, useCompletion } from '@ai-sdk/react';
import { useState } from 'react';
import { UIMessage } from 'ai';
import { Dispatch, SetStateAction } from 'react';
import { Textarea } from './ui/textarea';
import { Button } from './ui/button';
import { useAPIKeyStore } from '@/frontend/stores/APIKeyStore';
import { toast } from 'sonner';
import { useMutation } from 'convex/react';
import { api } from '@/convex/_generated/api';
import type { Id } from '@/convex/_generated/dataModel';
import { isConvexId } from '@/lib/ids';

export default function MessageEditor({
  threadId,
  message,
  content,
  setMessages,
  reload,
  setMode,
  stop,
}: {
  threadId: string;
  message: UIMessage;
  content: string;
  setMessages: UseChatHelpers['setMessages'];
  setMode: Dispatch<SetStateAction<'view' | 'edit'>>;
  reload: UseChatHelpers['reload'];
  stop: UseChatHelpers['stop'];
}) {
  const [draftContent, setDraftContent] = useState(content);
  const { getKey } = useAPIKeyStore();

  const { complete } = useCompletion({
    api: '/api/completion',
    ...(getKey('google') && {
      headers: { 'X-Google-API-Key': getKey('google')! },
    }),
    onResponse: async (response) => {
      try {
        const payload = await response.json();

        if (response.ok) {
          const { title } = payload;
          // TODO: save summary via Convex
        } else {
          toast.error(
            payload.error || 'Failed to generate a summary for the message'
          );
        }
      } catch {
        /* ignore errors */
      }
    },
  });

  const removeAfter = useMutation(api.messages.removeAfter);
  const editMessage = useMutation(api.messages.edit);

  const handleSave = async () => {
    if (!isConvexId(threadId)) return;
    try {
      await removeAfter({
        threadId: threadId as Id<'threads'>,
        afterMessageId: message.id as Id<'messages'>,
      });

      await editMessage({
        messageId: message.id as Id<'messages'>,
        content: draftContent,
      });

      const updatedMessage = {
        ...message,
        content: draftContent,
        parts: [
          {
            type: 'text' as const,
            text: draftContent,
          },
        ],
        createdAt: new Date(),
      };

      setMessages((messages) => {
        const index = messages.findIndex((m) => m.id === message.id);

        if (index !== -1) {
          return [...messages.slice(0, index), updatedMessage];
        }

        return messages;
      });

      complete(draftContent, {
        body: {
          messageId: updatedMessage.id,
          threadId,
        },
      });
      setMode('view');

      // stop the current stream if any
      stop();

      setTimeout(() => {
        reload();
      }, 0);
    } catch {
      toast.error('Failed to save changes');
    }
  };

  return (
    <div>
      <Textarea
        value={draftContent}
        onChange={(e) => setDraftContent(e.target.value)}
        onKeyDown={(e) => {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSave();
          }
        }}
      />
      <div className="flex gap-2 mt-2">
        <Button onClick={handleSave}>Save</Button>
        <Button onClick={() => setMode('view')}>Cancel</Button>
      </div>
    </div>
  );
}


--- FILE: ./frontend/components/Error.tsx ---
import { CircleAlert } from 'lucide-react';

export default function Error({ message }: { message: string }) {
  return (
    <div className="rounded-md border border-red-500/50 px-4 py-3 text-red-600 flex items-center gap-4">
      <CircleAlert size={24} aria-hidden="true" />
      <p className="text-sm">{message}</p>
    </div>
  );
}


--- FILE: ./frontend/components/QuotedMessage.tsx ---
import { memo } from 'react';
import { cn } from '@/lib/utils';

interface QuotedMessageProps {
  content: string;
  className?: string;
}

function PureQuotedMessage({ content, className }: QuotedMessageProps) {
  // Разделяем сообщение на цитату и основной текст
  const lines = content.split('\n');
  const quoteLines: string[] = [];
  const messageLines: string[] = [];
  
  let isQuote = false;
  let foundEmptyLine = false;

  for (const line of lines) {
    if (line.startsWith('> ')) {
      isQuote = true;
      quoteLines.push(line.substring(2)); // Убираем "> "
    } else if (isQuote && line.trim() === '') {
      foundEmptyLine = true;
    } else if (foundEmptyLine || !isQuote) {
      messageLines.push(line);
    }
  }

  const hasQuote = quoteLines.length > 0;
  const quoteText = quoteLines.join('\n');
  const messageText = messageLines.join('\n').trim();

  if (!hasQuote) {
    return <p className={className}>{content}</p>;
  }

  return (
    <div className={cn('space-y-3', className)}>
      {/* Цитата */}
      <div className={cn(
        'relative bg-accent/20 border-l-4 border-accent-foreground/50 rounded-r-lg p-3 ml-2',
        'before:content-["""] before:absolute before:-left-1 before:top-0 before:text-lg before:text-muted-foreground/60 before:font-serif',
        'after:content-["""] after:absolute after:right-1 after:bottom-0 after:text-lg after:text-muted-foreground/60 after:font-serif'
      )}>
        <div className="text-sm text-foreground/70 italic pl-2 pr-2 whitespace-pre-wrap leading-relaxed">
          {quoteText}
        </div>
      </div>
      
      {/* Основное сообщение */}
      {messageText && (
        <div className="text-foreground whitespace-pre-wrap leading-relaxed">
          {messageText}
        </div>
      )}
    </div>
  );
}

const QuotedMessage = memo(PureQuotedMessage);
QuotedMessage.displayName = 'QuotedMessage';

export default QuotedMessage; 

--- FILE: ./frontend/components/SettingsButton.tsx ---
"use client"

import { useState } from 'react';
import { Button } from './ui/button';
import { Settings } from 'lucide-react';
import { WithTooltip } from './WithTooltip';
import SettingsDrawer from './SettingsDrawer';
import { cn } from '@/lib/utils';

interface SettingsButtonProps {
  className?: string;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
  size?: "default" | "sm" | "lg" | "icon";
}

export default function SettingsButton({ 
  className, 
  variant = "outline", 
  size = "icon" 
}: SettingsButtonProps) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <SettingsDrawer isOpen={isOpen} setIsOpen={setIsOpen}>
      <WithTooltip label="Settings" side="bottom">
        <Button
          variant={variant}
          size={size}
          className={cn('bg-background/80 backdrop-blur-sm border-border/50', className)}
          aria-label="Open settings"
          onClick={() => setIsOpen(true)}
        >
          <Settings className="h-5 w-5" />
        </Button>
      </WithTooltip>
    </SettingsDrawer>
  );
} 

--- FILE: ./frontend/components/Message.tsx ---
import { memo, useState, useEffect } from 'react';
import MarkdownRenderer from '@/frontend/components/MemoizedMarkdown';
import { cn } from '@/lib/utils';
import { UIMessage } from 'ai';
import equal from 'fast-deep-equal';
import MessageControls from './MessageControls';
import { UseChatHelpers } from '@ai-sdk/react';
import dynamic from 'next/dynamic';
const MessageEditor = dynamic(() => import('./MessageEditor'), { ssr: false, loading: () => null });
import ErrorBoundary from './ErrorBoundary';
import MessageReasoning from './MessageReasoning';
import SelectableText from './SelectableText';
import QuotedMessage from './QuotedMessage';
import ImageModal from './ImageModal';
import { Input } from '@/frontend/components/ui/input';
import { Button } from '@/frontend/components/ui/button';
import { Label } from '@/components/ui/label';
import { Badge } from '@/frontend/components/ui/badge';
import { useAPIKeyStore, type APIKeys } from '@/frontend/stores/APIKeyStore';
import { toast } from 'sonner';
import { useRouter } from 'next/navigation';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';

const StreamingText = memo(({ content }: { content: string }) => {
  const proseClasses = 'prose prose-base dark:prose-invert break-words max-w-none w-full';
  return (
    <div className={proseClasses}>
      <div style={{ whiteSpace: 'pre-wrap' }}>{content}</div>
    </div>
  );
});
StreamingText.displayName = 'StreamingText';

function PureMessage({
  threadId,
  message,
  setMessages,
  reload,
  isStreaming,
  stop,
}: {
  threadId: string;
  message: UIMessage;
  setMessages: UseChatHelpers['setMessages'];
  reload: UseChatHelpers['reload'];
  isStreaming: boolean;
  stop: UseChatHelpers['stop'];
}) {
  const [mode, setMode] = useState<'view' | 'edit'>('view');
  const [mobileControlsVisible, setMobileControlsVisible] = useState(false);
  const isWelcome = message.id === 'welcome';
  const attachments = (message as any).attachments as { id: string; url: string; name: string; type: string; ext?: string; size?: number }[] | undefined;
  const [lightbox, setLightbox] = useState<{
    url: string;
    name: string;
    type: string;
    size?: number;
  } | null>(null);
  const { keys, setKeys } = useAPIKeyStore();
  const [localKeys, setLocalKeys] = useState<APIKeys>(keys);
  const { isMobile } = useIsMobile();
  
  useEffect(() => { setLocalKeys(keys); }, [keys]);
  
  const saveKeys = () => { setKeys(localKeys); toast.success('API keys saved'); };
  const router = useRouter();
  const { hasRequiredKeys } = useAPIKeyStore();
  const canChat = hasRequiredKeys();

  const handleNewChat = () => {
    router.push(`/chat`);
  };

  const handleMobileMessageClick = () => {
    if (isMobile && !isWelcome) {
      setMobileControlsVisible(!mobileControlsVisible);
    }
  };

  return (
    <>
    <div
      id={`message-${message.id}`}
      role="article"
      className={cn(
        'flex flex-col',
        message.role === 'user' ? 'items-end' : 'items-start'
      )}
    >
      {message.parts.map((part, index) => {
        const { type } = part;
        const key = `message-${message.id}-part-${index}`;

        if (type === 'reasoning') {
          return (
            <MessageReasoning
              key={key}
              reasoning={part.reasoning}
              id={message.id}
            />
          );
        }

        if (type === 'text') {
          if (isWelcome && message.role === 'assistant') {
            return (
              <div key={key} className="w-full px-2 sm:px-0 space-y-4">
                <h3 className="text-base font-semibold">Welcome to Pak.Chat</h3>
                <SelectableText messageId={message.id} disabled>
                  <MarkdownRenderer content={part.text} id={message.id} />
                </SelectableText>
                <div className="space-y-6 mt-4">
                  {(['google','openrouter','openai'] as const).map(provider => (
                    <div key={provider} className="flex flex-col gap-2">
                      <Label htmlFor={provider} className="flex gap-1 text-sm">
                        <span>{provider.charAt(0).toUpperCase()+provider.slice(1)} API Key</span>
                        {provider === 'google' && <span className="text-muted-foreground">(Required)</span>}
                      </Label>
                      <Input id={provider}
                        placeholder={provider === 'google' ? 'AIza...' : provider === 'openrouter' ? 'sk-or-...' : 'sk-...'}
                        value={localKeys[provider]||''}
                        onChange={e =>
                            setLocalKeys((prev: APIKeys) => ({
                              ...prev,
                              [provider]: e.target.value,
                            }))
                        }
                      />
                      <a href={provider === 'google' ? 'https://aistudio.google.com/apikey' : provider === 'openrouter' ? 'https://openrouter.ai/settings/keys' : 'https://platform.openai.com/settings/organization/api-keys'}
                         target="_blank" rel="noopener noreferrer"
                         className="text-xs text-blue-500 hover:underline inline w-fit">
                        Create {provider.charAt(0).toUpperCase()+provider.slice(1)} API Key
                      </a>
                    </div>
                  ))}
                </div>
                <div className="flex gap-2 mt-2">
                  <Button size="sm" variant="outline" className="bg-gray-50 text-gray-600 dark:bg-secondary dark:text-secondary-foreground" onClick={saveKeys}>
                    Save
                  </Button>
                  {canChat && (
                    <Button size="sm" variant="outline" onClick={handleNewChat}>
                      New Chat
                    </Button>
                  )}
                </div>
              </div>
            );
          }
          return message.role === 'user' ? (
            <div
              key={key}
              className={cn(
                'relative group px-4 py-3 rounded-xl bg-secondary border border-secondary-foreground/2 max-w-[90%] sm:max-w-[80%] mx-2 sm:mx-0',
                isMobile && 'cursor-pointer'
              )}
              onClick={handleMobileMessageClick}
            >
              {attachments && attachments.length > 0 && (
                <div className="flex gap-2 flex-wrap mb-3">
                  {attachments.map((a) =>
                    a.type.startsWith('image') ? (
                      <img
                        key={a.id}
                        src={a.url}
                        className="h-32 w-32 rounded cursor-pointer hover:scale-105 transition object-cover"
                        onClick={() => setLightbox({
                          url: a.url,
                          name: a.name,
                          type: a.type,
                          size: a.size,
                        })}
                        alt={a.name}
                        loading="eager"
                        decoding="async"
                      />
                    ) : (
                      <a
                        key={a.id}
                        href={a.url}
                        target="_blank"
                        className="h-10 w-28 bg-muted rounded flex flex-col items-center justify-center text-[10px] px-1 hover:bg-accent"
                      >
                        <span className="line-clamp-1">{a.name}</span>
                        <span className="text-muted-foreground">{a.ext}</span>
                      </a>
                    )
                  )}
                </div>
              )}

              {mode === 'edit' && (
                <ErrorBoundary>
                  <MessageEditor
                    threadId={threadId}
                    message={message}
                    content={part.text}
                    setMessages={setMessages}
                    reload={reload}
                    setMode={setMode}
                    stop={stop}
                  />
                </ErrorBoundary>
              )}
              {mode === 'view' && <QuotedMessage content={part.text} />}

              {mode === 'view' && (
                <MessageControls
                  threadId={threadId}
                  content={part.text}
                  message={message}
                  setMode={setMode}
                  setMessages={setMessages}
                  reload={reload}
                  stop={stop}
                  isVisible={mobileControlsVisible}
                  onToggleVisibility={() => setMobileControlsVisible(!mobileControlsVisible)}
                />
              )}
            </div>
          ) : (
            <div 
              key={key} 
              className={cn(
                'group flex flex-col gap-2 w-full px-2 sm:px-0',
                isMobile && 'cursor-pointer'
              )}
              onClick={handleMobileMessageClick}
            >
              <SelectableText messageId={message.id} disabled={isStreaming}>
                {isStreaming ? (
                  <StreamingText content={part.text} />
                ) : (
                  <MarkdownRenderer content={part.text} id={message.id} />
                )}
              </SelectableText>
              {attachments && attachments.length > 0 && (
                <div className="flex gap-2 flex-wrap mt-2">
                  {attachments.map((a) =>
                    a.type.startsWith('image') ? (
                      <img
                        key={a.id}
                        src={a.url}
                        className="h-24 w-24 rounded cursor-pointer hover:scale-105 transition"
                        onClick={() => setLightbox({
                          url: a.url,
                          name: a.name,
                          type: a.type,
                          size: a.size,
                        })}
                        loading="eager"
                        decoding="async"
                        alt={a.name}
                      />
                    ) : (
                      <a
                        key={a.id}
                        href={a.url}
                        target="_blank"
                        className="h-10 w-28 bg-muted rounded flex flex-col items-center justify-center text-[10px] px-1 hover:bg-accent"
                      >
                        <span className="line-clamp-1">{a.name}</span>
                        <span className="text-muted-foreground">{a.ext}</span>
                      </a>
                    )
                  )}
                </div>
              )}
              {!isStreaming && (
                <MessageControls
                  threadId={threadId}
                  content={part.text}
                  message={message}
                  setMessages={setMessages}
                  reload={reload}
                  stop={stop}
                  isVisible={mobileControlsVisible}
                  onToggleVisibility={() => setMobileControlsVisible(!mobileControlsVisible)}
                />
              )}
            </div>
          );
        }
      })}
    </div>
    {lightbox && (
      <ImageModal
        isOpen={Boolean(lightbox)}
        onClose={() => setLightbox(null)}
        imageUrl={lightbox.url}
        fileName={lightbox.name}
        fileType={lightbox.type}
        fileSize={lightbox.size}
      />
    )}
    </>
  );
}

const PreviewMessage = memo(PureMessage, (prevProps, nextProps) => {
  if (prevProps.isStreaming !== nextProps.isStreaming) return false;
  if (prevProps.message.id !== nextProps.message.id) return false;
  if (nextProps.isStreaming && prevProps.message.content !== nextProps.message.content) return false;
  if (!nextProps.isStreaming && !equal(prevProps.message, nextProps.message)) return false;
  return true;
});

PreviewMessage.displayName = 'PreviewMessage';

export default PreviewMessage;


--- FILE: ./frontend/components/Messages.tsx ---
import { memo } from 'react';
import PreviewMessage from './Message';
import VirtualMessages from './VirtualMessages';
import { UIMessage } from 'ai';
import { UseChatHelpers } from '@ai-sdk/react';
import equal from 'fast-deep-equal';
import MessageLoading from './ui/MessageLoading';
import Error from './Error';

function PureMessages({
  threadId,
  messages,
  status,
  setMessages,
  reload,
  error,
  stop,
}: {
  threadId: string;
  messages: UIMessage[];
  setMessages: UseChatHelpers['setMessages'];
  reload: UseChatHelpers['reload'];
  status: UseChatHelpers['status'];
  error: UseChatHelpers['error'];
  stop: UseChatHelpers['stop'];
}) {
  // Показываем прыгающие точки только когда сообщение отправлено но ответ не начался
  const lastMessage = messages[messages.length - 1];
  const shouldShowLoading = status === 'submitted' && lastMessage?.role === 'user';

  return (
    <section className="flex flex-col space-y-12">
      {messages.map((message) => (
        <PreviewMessage
          key={message.id}
          threadId={threadId}
          message={message}
          isStreaming={
            status === 'streaming' && messages[messages.length - 1]?.id === message.id
          }
          setMessages={setMessages}
          reload={reload}
          stop={stop}
        />
      ))}
      {shouldShowLoading && <MessageLoading />}
      {error && <Error message={error.message} />}
    </section>
  );
}

const PureMessagesMemo = memo(PureMessages, (prevProps, nextProps) => {
  if (prevProps.status !== nextProps.status) return false;
  if (prevProps.error !== nextProps.error) return false;
  if (prevProps.messages.length !== nextProps.messages.length) return false;
  if (!equal(prevProps.messages, nextProps.messages)) return false;
  return true;
});

PureMessagesMemo.displayName = 'Messages';

// Enable virtualization once the chat grows to 20 messages.
const LargeListBoundary = 20;

export default function Messages(props: React.ComponentProps<typeof PureMessages>) {
  return props.messages.length > LargeListBoundary ? (
    <div className="h-full flex-1">
      <VirtualMessages {...props} />
    </div>
  ) : (
    <PureMessagesMemo {...props} />
  );
}


--- FILE: ./frontend/components/Chat.tsx ---
"use client";

import { useChat } from '@ai-sdk/react';
import Messages from './Messages';
import ChatInput from './ChatInput';
import ChatHistoryButton from './ChatHistoryButton';
import NewChatButton from './NewChatButton';
import ChatNavigationBars from './ChatNavigationBars';
import { UIMessage } from 'ai';
import { useAPIKeyStore } from '@/frontend/stores/APIKeyStore';
import { useModelStore } from '@/frontend/stores/ModelStore';
import SettingsButton from './SettingsButton';
import { useRouter } from 'next/navigation';
import { useQuoteShortcuts } from '@/frontend/hooks/useQuoteShortcuts';
import { useScrollHide } from '@/frontend/hooks/useScrollHide';
import { useIsMobile } from '@/frontend/hooks/useIsMobile';
import { useKeyboardInsets } from '../hooks/useKeyboardInsets';
import { cn } from '@/lib/utils';
import React, { useEffect, useState, useMemo, useRef } from 'react';
import { useDebouncedCallback } from 'use-debounce';
import { useMutation, useQuery } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { isConvexId } from '@/lib/ids';
import { toast } from 'sonner';
import { Id } from '@/convex/_generated/dataModel';
import { useQuoteStore } from '@/frontend/stores/QuoteStore';
import { useAttachmentsStore } from '@/frontend/stores/AttachmentsStore';
import { create } from 'zustand'; // Импортируем Zustand
import { useChatStore } from '@/frontend/stores/ChatStore';

// --- НАЧАЛО: Код для Zustand Store ---
// Мы определяем store прямо в этом файле, так как нельзя создать новый.
interface MessageVersionState {
  versions: Record<string, number>;
  updateVersion: (messageId: string, version: number) => void;
  reset: () => void;
}

export const useMessageVersionStore = create<MessageVersionState>((set) => ({
  versions: {},
  updateVersion: (messageId, version) =>
    set((state) => ({
      versions: { ...state.versions, [messageId]: version },
    })),
  reset: () => set({ versions: {} }),
}));
// --- КОНЕЦ: Код для Zustand Store ---


interface ChatProps {
  threadId: string;
  initialMessages: UIMessage[];
}

function Chat({ threadId, initialMessages }: ChatProps) {
  const { keys, hasRequiredKeys, keysLoading } = useAPIKeyStore();
  const { selectedModel } = useModelStore();
  const { isMobile } = useIsMobile();
  const router = useRouter();
  const panelRef = useRef<HTMLDivElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const isHeaderVisible = useScrollHide<HTMLDivElement>({ threshold: 15, panelRef });
  const { clearQuote } = useQuoteStore();
  const { clear: clearAttachments } = useAttachmentsStore();
  
  useKeyboardInsets((h) => {
    document.documentElement.style.setProperty('--keyboard-inset-height', `${h}px`);
  });
  
  const [currentThreadId, setCurrentThreadId] = useState(threadId);
  const [hasInitialized, setHasInitialized] = useState(false);
  const [isKeyboardVisible, setIsKeyboardVisible] = useState(false);
  // Перенос навигации осуществляется из ChatInput
  
  // Используем наш store, определенный выше
  const updateVersion = useMessageVersionStore((s) => s.updateVersion);

  const sendMessage = useMutation<typeof api.messages.send>(api.messages.send);
  const patchContent = useMutation(api.messages.patchContent);
  const finalizeMessage = useMutation(api.messages.finalize);
  const hasKeys = useMemo(() => hasRequiredKeys(), [hasRequiredKeys]);

  const debouncedPatch = useDebouncedCallback(
    (id: Id<'messages'>, content: string, version: number) => {
      patchContent({ messageId: id, content, version }).catch((err) => {
        console.error('patchContent failed', err);
      });
    },
    1000
  );

  useQuoteShortcuts();

  // Отслеживание видимости клавиатуры на мобильных устройствах
  useEffect(() => {
    if (!isMobile) return;
    const handleResize = () => {
      const viewportHeight = window.visualViewport?.height || window.innerHeight;
      const windowHeight = window.innerHeight;
      const heightDifference = windowHeight - viewportHeight;
      setIsKeyboardVisible(heightDifference > 150);
    };
    if (window.visualViewport) {
      window.visualViewport.addEventListener('resize', handleResize);
      return () => window.visualViewport?.removeEventListener('resize', handleResize);
    } else {
      window.addEventListener('resize', handleResize);
      return () => window.removeEventListener('resize', handleResize);
    }
  }, [isMobile]);

  // Функция для скролла к сообщению
  const scrollToMessage = (messageId: string) => {
    const element = document.getElementById(`message-${messageId}`);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  };

  const scrollToBottom = (behavior: ScrollBehavior = 'smooth') => {
    messagesEndRef.current?.scrollIntoView({ behavior });
  };

  const {
    messages,
    input,
    setInput,
    setMessages,
    reload,
    stop,
    status,
    error,
  } = useChat({
    api: '/api/llm', // Обновленный путь к API для устранения конфликта маршрутизации
    id: currentThreadId,
    initialMessages,
    body: {
      apiKeys: keys,
      model: selectedModel,
      threadId: currentThreadId,
    },
    experimental_prepareRequestBody: ({ messages }) => {
      const messagesWithIds = messages.map(msg => ({ ...msg, id: msg.id }));
      return {
        messages: messagesWithIds,
        model: selectedModel,
        apiKeys: keys,
        threadId: currentThreadId,
      };
    },
    onFinish: async (finalMsg) => {
      // Persist assistant message once generation is finished
      if (
        finalMsg.role === 'assistant' &&
        !isConvexId(finalMsg.id) &&
        isConvexId(currentThreadId)
      ) {
        const realId = await sendMessage({
          threadId: currentThreadId as Id<'threads'>,
          role: 'assistant',
          content: finalMsg.content,
        });
        setMessages((prev) =>
          prev.map((m) => (m.id === finalMsg.id ? { ...m, id: realId } : m))
        );
      }
    },
  });

  const registerInputSetter = useChatStore((s) => s.registerInputSetter);
  useEffect(() => {
    registerInputSetter(setInput);
  }, [setInput, registerInputSetter]);
  
  // Синхронизация и сброс состояний
  useEffect(() => {
    // Этот эффект выполняется только при смене чата
    setCurrentThreadId(threadId);
    setHasInitialized(true);
    
    // Сбрасываем все, только если это НОВЫЙ чат (у которого нет threadId)
    if (!threadId) {
      setInput('');
      clearQuote();
      clearAttachments();
      useMessageVersionStore.getState().reset();
    }

    setMessages(initialMessages);
  }, [threadId, setInput, clearQuote, clearAttachments, setMessages, initialMessages]);

  // Автозапуск генерации для любого сообщения пользователя без ответа
  useEffect(() => {
    const lastMessage = messages[messages.length - 1];
    if (
      status === 'ready' &&
      lastMessage?.role === 'user' &&
      isConvexId(currentThreadId)
    ) {
      // Проверяем, есть ли ответ ассистента после последнего сообщения пользователя
      const hasResponse = messages.some((msg, index) => 
        index > messages.length - 1 && msg.role === 'assistant'
      );
      
      if (!hasResponse) {
        reload();
      }
    }
  }, [messages, status, reload, currentThreadId]);



  // Persist final assistant content to DB once generation is complete
  // Versions are incrementally patched while streaming.

  // Инкрементальное сохранение с защитой от лишних вызовов
  useEffect(() => {
    const last = messages[messages.length - 1];
    if (last?.role === 'assistant' && status === 'streaming' && isConvexId(last.id)) {
      const currentVersion = useMessageVersionStore.getState().versions[last.id] ?? 0;
      const newVersion = currentVersion + 1;
      debouncedPatch(last.id as Id<'messages'>, last.content, newVersion);
      updateVersion(last.id, newVersion);
    }
  }, [messages, status, debouncedPatch, updateVersion]);

  // After generation ends, flush pending patches
  useEffect(() => {
    // Status 'ready' means the assistant finished responding
    if (status === 'ready') {
      const last = messages[messages.length - 1];
      if (last?.role === 'assistant' && isConvexId(last.id)) {
        const currentVersion =
          useMessageVersionStore.getState().versions[last.id] ?? 0;
        patchContent({
          messageId: last.id as Id<'messages'>,
          content: last.content,
          version: currentVersion + 1,
        });
        finalizeMessage({ messageId: last.id as Id<'messages'> });
        // Закомментируем сброс, который может вызывать перерендер
        // useMessageVersionStore.getState().reset();
      }
    }
  }, [status, messages, patchContent, finalizeMessage]);

  return (
    <div className="w-full min-h-screen flex flex-col overflow-y-auto chat-smooth">
        {/* Верхние кнопки, навигация, логотип */}
        <div
          ref={panelRef}
          className={cn(
            "fixed right-4 top-4 z-20 flex gap-2 p-1 bg-background/60 backdrop-blur-md rounded-lg border border-border/20 transition-transform duration-300 ease-in-out",
            isMobile && (!isHeaderVisible || isKeyboardVisible) && "transform translate-x-[calc(100%-3rem)]"
          )}
        >
          {!keysLoading && hasKeys && <NewChatButton className="backdrop-blur-sm" />}
          <ChatHistoryButton className="backdrop-blur-sm" />
          <SettingsButton
            className={cn(
              "backdrop-blur-sm transition-opacity duration-300",
              isMobile && (!isHeaderVisible || isKeyboardVisible) && "opacity-0 pointer-events-none"
            )}
          />
        </div>
        {messages.length > 0 && <ChatNavigationBars messages={messages} scrollToMessage={scrollToMessage} />}
        <div className={cn("fixed left-4 top-4 z-20 transition-all duration-300 ease-in-out", isMobile && (!isHeaderVisible || isKeyboardVisible) && "transform -translate-x-full opacity-0")}>
            <div className="relative">
                {isMobile && <div className="absolute inset-0 -m-2 bg-background/60 backdrop-blur-md rounded-lg" />}
                <span
                  className="relative text-xl font-bold text-foreground hover:text-primary transition-colors cursor-pointer"
                  onClick={() => router.push('/chat')}
                >
                    Pak.Chat
                </span>
            </div>
        </div>
        
        {/* Основная область */}
        <div className="flex-1 flex flex-col relative">
            <div className="flex-1 overflow-y-auto" id="messages-scroll-area">
                <main className="w-full max-w-3xl mx-auto pt-24 pb-44 px-4 min-h-full flex-1">
                    {messages.length > 0 && (
                      <Messages
                        threadId={currentThreadId}
                        messages={messages}
                        status={status}
                        setMessages={setMessages}
                        reload={reload}
                        error={error}
                        stop={stop}
                      />
                    )}
                    <div ref={messagesEndRef} />
                </main>
            </div>

            <div
              className={cn(
                "fixed left-1/2 -translate-x-1/2 w-full max-w-3xl px-4 transition-all duration-300",
                messages.length > 0 ? "bottom-0" : "top-1/2 -translate-y-1/2"
              )}
            >
                <ChatInput
                  threadId={currentThreadId}
                  input={input}
                  status={status}
                  reload={reload}
                  setInput={setInput}
                  setMessages={setMessages}
                  stop={stop}
                  messageCount={messages.length}
                  error={error}
                  onThreadCreated={setCurrentThreadId}
                />
            </div>
        </div>
    </div>
  );
}

export default React.memo(Chat);


--- FILE: ./frontend/components/ConvexClientProvider.tsx ---
"use client";
import { ReactNode, useEffect, useState, useMemo, useCallback, useRef } from "react";
import { ConvexProviderWithAuth, ConvexReactClient } from "convex/react";
import { useAuthStore } from "@/frontend/stores/AuthStore";
import { auth } from "@/firebase";
import { onIdTokenChanged } from "firebase/auth";

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export default function ConvexClientProvider({ children }: { children: ReactNode }) {
  const { user, loading } = useAuthStore();
  const [idToken, setIdToken] = useState<string | null | undefined>(undefined);
  const cachedToken = useRef<string | undefined>(undefined);
  const cachedExp = useRef<number>(0); // ms timestamp when cached token expires

  useEffect(() => {
    if (!user) {
      setIdToken(null);
      cachedToken.current = undefined;
      cachedExp.current = 0;
      return;
    }

    // Reactively update token when Firebase refreshes it
    const unsub = onIdTokenChanged(auth, async (u) => {
      if (!u) {
        setIdToken(null);
        cachedToken.current = undefined;
        cachedExp.current = 0;
        return;
      }

      const token = await u.getIdToken();
      setIdToken(token);
      cachedToken.current = token;
      const res = await u.getIdTokenResult();
      cachedExp.current = Date.parse(res.expirationTime);
    });

    return unsub;
  }, [user]);

  // Get ID token, refreshing only when requested or expired
  const getFreshToken = useCallback(
    async (force = false) => {
      if (!user) return "";
      if (!force && cachedToken.current && Date.now() < cachedExp.current - 60_000) {
        // token is still valid for at least a minute
        return cachedToken.current;
      }

      const t = await user.getIdToken(force);
      cachedToken.current = t;
      const res = await user.getIdTokenResult();
      cachedExp.current = Date.parse(res.expirationTime);
      return t;
    },
    [user]
  );

  const authState = useMemo(
    () => ({
      isLoading: idToken === undefined || loading,
      isAuthenticated: !!idToken,
      fetchAccessToken: async ({ forceRefreshToken }: { forceRefreshToken: boolean }) =>
        getFreshToken(forceRefreshToken),
    }),
    [idToken, loading, getFreshToken]
  );

  const useAuth = useCallback(() => authState, [authState]);

  return (
    <ConvexProviderWithAuth client={convex} useAuth={useAuth}>
      {children}
    </ConvexProviderWithAuth>
  );
}


--- FILE: ./frontend/components/ChatInput.tsx ---
"use client";

import { ChevronDown, Check, ArrowUpIcon } from 'lucide-react';
import { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { Textarea } from '@/frontend/components/ui/textarea';
import ScrollToBottomButton from './ScrollToBottomButton';
import { cn } from '@/lib/utils';
import { Button } from '@/frontend/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/frontend/components/ui/dropdown-menu';
import useAutoResizeTextarea from '@/hooks/useAutoResizeTextArea';
import { UseChatHelpers, useCompletion } from '@ai-sdk/react';
import { useMutation } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { Id } from '@/convex/_generated/dataModel';
import { useAPIKeyStore, APIKeys } from '@/frontend/stores/APIKeyStore';
import { useModelStore } from '@/frontend/stores/ModelStore';
import { useQuoteStore } from '@/frontend/stores/QuoteStore';
import { AI_MODELS, AIModel, getModelConfig } from '@/lib/models';
import { UIMessage } from 'ai';
import AttachmentsBar from './AttachmentsBar';
import { useAttachmentsStore } from '../stores/AttachmentsStore';
import { v4 as uuidv4 } from 'uuid';
import { isConvexId } from '@/lib/ids';
import { StopIcon } from './ui/icons';
import { toast } from 'sonner';
import { useMessageSummary } from '../hooks/useMessageSummary';
import QuoteDisplay from './QuoteDisplay';
import { Input } from '@/frontend/components/ui/input';
import { useRouter } from 'next/navigation';

// Helper to convert File objects to Base64 data URLs
const fileToDataUrl = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = (error) => reject(error);
  });
};

interface ChatInputProps {
  threadId: string;
  input: UseChatHelpers['input'];
  status: UseChatHelpers['status'];
  error: UseChatHelpers['error'];
  setInput: UseChatHelpers['setInput'];
  /** Reload chat with current messages without appending */
  reload: UseChatHelpers['reload'];
  setMessages: UseChatHelpers['setMessages'];
  stop: UseChatHelpers['stop'];
  messageCount: number;
  onThreadCreated?: (id: Id<'threads'>) => void;
}

interface StopButtonProps {
  stop: UseChatHelpers['stop'];
}

interface SendButtonProps {
  onSubmit: () => void;
  disabled: boolean;
}

const createUserMessage = (id: string, text: string, attachments?: any[]): UIMessage & { attachments?: any[] } => {
  return {
    id,
    parts: [{ type: 'text', text }],
    role: 'user',
    content: text,
    createdAt: new Date(),
    attachments,
  };
};

function PureChatInput({
  threadId,
  input,
  status,
  error,
  setInput,
  reload,
  setMessages,
  stop,
  messageCount,
  onThreadCreated,
}: ChatInputProps) {
  // Все хуки должны быть вызваны до любых условных возвратов
  const { hasRequiredKeys, keys, setKeys } = useAPIKeyStore();
  const canChat = hasRequiredKeys();
  const { currentQuote, clearQuote } = useQuoteStore();
  const [localKeys, setLocalKeys] = useState(keys);
  const router = useRouter();
  const containerRef = useRef<HTMLDivElement>(null);
  const { textareaRef, adjustHeight } = useAutoResizeTextarea({
    minHeight: 72,
    maxHeight: 200,
  });
  const createThread = useMutation(api.threads.create);
  const sendMessage = useMutation<typeof api.messages.send>(api.messages.send);
  const generateUploadUrl = useMutation(api.attachments.generateUploadUrl);
  const saveAttachments = useMutation(api.attachments.save as any);
  const updateAttachmentMessageId = useMutation(api.attachments.updateMessageId);
  const { complete } = useMessageSummary();
  const { attachments, clear } = useAttachmentsStore();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const isDisabled = useMemo(
    () => !input.trim() || status === 'streaming' || status === 'submitted' || isSubmitting,
    [input, status, isSubmitting]
  );
  
  // Синхронизируем localKeys с основным состоянием
  useEffect(() => {
    setLocalKeys(keys);
  }, [keys]);
  
  const saveKeys = useCallback(async () => {
    await setKeys(localKeys);
    toast.success('API keys saved');
  }, [setKeys, localKeys]);

  const handleSubmit = useCallback(async () => {
    if (isDisabled) return;
    setIsSubmitting(true);

    const currentInput = textareaRef.current?.value || input;
    let finalMessage = currentInput.trim();
    if (currentQuote) {
      finalMessage = `> ${currentQuote.text.replace(/\n/g, '\n> ')}\n\n${currentInput.trim()}`;
    }

    // Reset UI early
    setInput('');
    clearQuote();
    adjustHeight(true);

    try {
      // 1. Если это черновик, создаем тред заранее и сразу приводим тип
      const ensuredThreadId: Id<'threads'> = isConvexId(threadId)
        ? (threadId as Id<'threads'>)
        : await createThread({
            title: finalMessage.slice(0, 30) || 'New Chat',
          });

      // 2. Если тред новый, обновляем состояние без редиректа
      if (!isConvexId(threadId)) {
        onThreadCreated?.(ensuredThreadId);
        // Обновляем URL плавно без перезагрузки страницы (только на клиенте)
        if (typeof window !== 'undefined') {
          window.history.replaceState(null, '', `/chat/${ensuredThreadId}`);
        }
      }

      // 3. Оптимистично добавляем сообщение в UI
      const attachmentsToUpload = [...attachments];
      const attachmentsForMessage = await Promise.all(
        attachmentsToUpload.map(async (att) => ({
          ...att,
          url: await fileToDataUrl(att.file),
        }))
      );
      const clientMsgId = uuidv4();
      const userMessage = createUserMessage(
        clientMsgId,
        finalMessage,
        attachmentsForMessage,
      );
      setMessages((prev) => [...prev, userMessage]);
      clear();

      // 4. Сохраняем сообщение в БД
      let savedAttachments: any[] = [];
      if (attachmentsToUpload.length > 0) {
        try {
          const uploadedFiles = await Promise.all(
            attachmentsToUpload.map(async (attachment) => {
              const uploadUrl = await generateUploadUrl();
              const result = await fetch(uploadUrl, {
                method: 'POST',
                headers: { 'Content-Type': attachment.file.type },
                body: attachment.file,
              });
              if (!result.ok) throw new Error(`Failed to upload ${attachment.name}`);
              const { storageId } = await result.json();
              return {
                storageId,
                name: attachment.name,
                type: attachment.type,
                messageId: clientMsgId,
              };
            })
          );
          savedAttachments = await saveAttachments({
            threadId: ensuredThreadId,
            attachments: uploadedFiles,
          });
        } catch (err) {
          toast.error('Failed to upload attachments');
          console.error(err);
        }
      }

      const dbMsgId = await sendMessage({
        threadId: ensuredThreadId,
        content: finalMessage,
        role: 'user',
      });

      if (savedAttachments.length > 0) {
        await updateAttachmentMessageId({
          attachmentIds: savedAttachments.map((a) => a.id),
          messageId: dbMsgId,
        });
      }

      // 5. Обновляем UI с реальным ID
      setMessages((prev) => prev.map((m) => (m.id === clientMsgId ? { ...m, id: dbMsgId } : m)));

      // 6. Генерация заголовка только для новых тредов
      // if (!isConvexId(threadId)) {
      //   complete(finalMessage, {
      //     body: { threadId: ensuredThreadId, messageId: dbMsgId, isTitle: true },
      //   });
      // }

    } catch (error) {
      toast.error('Failed to send message.');
      setInput(currentInput);
    } finally {
      setIsSubmitting(false);
    }
  }, [
    isDisabled,
    input,
    threadId,
    attachments,
    currentQuote,
    setInput,
    clearQuote,
    adjustHeight,
    clear,
    createThread,
    sendMessage,
    generateUploadUrl,
    saveAttachments,
    updateAttachmentMessageId,
    setMessages,
    complete,
    router,
    onThreadCreated,
  ]);

  const handleKeyDown = useCallback(
    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        handleSubmit();
      }
    },
    [handleSubmit]
  );

  const handleInputChange = useCallback(
    (e: React.ChangeEvent<HTMLTextAreaElement>) => {
      setInput(e.target.value);
      adjustHeight();
    },
    [setInput, adjustHeight]
  );

  const handleFocus = useCallback(() => {
    if (window.innerWidth <= 768) {
      setTimeout(() => {
        textareaRef.current?.scrollIntoView({
          behavior: 'smooth',
          block: 'center',
        });
      }, 300);
    }
  }, []);

  // Если есть ошибка и нельзя отправлять сообщения, показываем форму для ввода API ключей
  if (error && !canChat) {
    return (
      <div className="w-full flex justify-center pb-safe mobile-keyboard-fix">
        <div className={cn('backdrop-blur-md bg-secondary p-4 pb-2 border-t border-border/50 max-w-3xl w-full', messageCount === 0 ? 'rounded-[20px]' : 'rounded-t-[20px]')}>
          <div className="space-y-2">
            {(['google','openrouter','openai'] as const).map(provider => (
              <Input key={provider}
                value={localKeys[provider]||''}
                onChange={e => setLocalKeys((prev: APIKeys) => ({ ...prev, [provider]: e.target.value }))}
                placeholder={`${provider.charAt(0).toUpperCase()+provider.slice(1)} API Key`} />
            ))}
          </div>
          <Button className="mt-2 w-full" onClick={saveKeys}>Save API Keys</Button>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="w-full flex justify-center pb-safe mobile-keyboard-fix">
        <div ref={containerRef} className={cn('backdrop-blur-md bg-secondary p-2 pb-0 border-t border-border/50 max-w-3xl w-full', messageCount === 0 ? 'rounded-[20px]' : 'rounded-t-[20px]')}>
          {/* Scroll to bottom button */}
          {messageCount > 0 && (
            <div className="absolute right-4 -top-12 z-50">
              <ScrollToBottomButton />
            </div>
          )}
          <div className="relative">
            {/* Provider links when no API keys */}
            {!canChat && messageCount > 1 && (
              <div className="flex flex-wrap justify-around gap-4 px-4 py-2 bg-secondary">
                <a href="https://aistudio.google.com/apikey" target="_blank" rel="noopener noreferrer" className="text-xs text-blue-500 hover:underline">
                  Create Google API Key
                </a>
                <a href="https://openrouter.ai/settings/keys" target="_blank" rel="noopener noreferrer" className="text-xs text-blue-500 hover:underline">
                  Create OpenRouter API Key
                </a>
                <a href="https://platform.openai.com/settings/organization/api-keys" target="_blank" rel="noopener noreferrer" className="text-xs text-blue-500 hover:underline">
                  Create OpenAI API Key
                </a>
              </div>
            )}

            <div className="flex flex-col">
              {/* Attachments at the top */}
              {attachments.length > 0 && (
                <div className="bg-secondary px-4 pt-3">
                  <AttachmentsBar mode="full" />
                </div>
              )}
              
              {/* Quote display */}
              {currentQuote && (
                <div className="bg-secondary px-4 pt-3">
                  <QuoteDisplay quote={currentQuote} onRemove={clearQuote} />
                </div>
              )}
              
              {/* Text input */}
              <div className="bg-secondary overflow-y-auto max-h-[300px]">
                <Textarea
                  id="chat-input"
                  value={input}
                  placeholder={!canChat ? "Enter API key to enable chat" : "What can I do for you?"}
                  className={cn(
                    'w-full px-4 py-3 border-none shadow-none dark:bg-transparent',
                    'placeholder:text-muted-foreground resize-none',
                    'focus-visible:ring-0 focus-visible:ring-offset-0',
                    'scrollbar-thin scrollbar-track-transparent scrollbar-thumb-muted-foreground/30',
                    'scrollbar-thumb-rounded-full',
                    'min-h-[72px]'
                  )}
                  ref={textareaRef}
                  onKeyDown={handleKeyDown}
                  onChange={handleInputChange}
                  onFocus={handleFocus}
                  aria-label="Chat message input"
                  aria-describedby="chat-input-description"
                  disabled={!canChat}
                />
                <span id="chat-input-description" className="sr-only">
                  {canChat ? 'Press Enter to send, Shift+Enter for new line' : 'Enter API key to enable chat'}
                </span>
              </div>
            </div>
            
            {/* Bottom controls */}
            <div className="h-14 flex items-center px-2">
              <div className="flex items-center justify-between w-full gap-2 overflow-x-auto">
                {/* Add file button only when no attachments */}
                {attachments.length === 0 && (
                  <div className="flex items-center">
                    <AttachmentsBar mode="compact" />
                  </div>
                )}
                
                <div className="flex items-center gap-2 ml-auto">
                  <ChatModelDropdown />

                  {status === 'submitted' || status === 'streaming' ? (
                    <StopButton stop={stop} />
                  ) : (
                    <SendButton onSubmit={handleSubmit} disabled={isDisabled || !canChat} />
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

const ChatInput = memo(PureChatInput, (prevProps, nextProps) => {
  return (
    prevProps.input === nextProps.input &&
    prevProps.status === nextProps.status &&
    prevProps.messageCount === nextProps.messageCount
  );
});

const PureChatModelDropdown = () => {
  const { getKey } = useAPIKeyStore();
  const { selectedModel, setModel } = useModelStore();

  const isModelEnabled = useCallback(
    (model: AIModel) => {
      const modelConfig = getModelConfig(model);
      const apiKey = getKey(modelConfig.provider);
      return !!apiKey;
    },
    [getKey]
  );

  return (
    <div className="flex items-center gap-2">
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            className="flex items-center gap-1 h-8 pl-2 pr-2 text-xs rounded-md text-foreground hover:bg-primary/10 focus-visible:ring-1 focus-visible:ring-offset-0 focus-visible:ring-blue-500"
            aria-label={`Selected model: ${selectedModel}`}
          >
            <div className="flex items-center gap-1">
              {selectedModel}
              <ChevronDown className="w-3 h-3 opacity-50" />
            </div>
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent
          className={cn('min-w-[10rem]', 'border-border', 'bg-popover')}
        >
          {AI_MODELS.map((model) => {
            const isEnabled = isModelEnabled(model);
            return (
              <DropdownMenuItem
                key={model}
                onSelect={() => isEnabled && setModel(model)}
                disabled={!isEnabled}
                className={cn(
                  'flex items-center justify-between gap-2',
                  'cursor-pointer'
                )}
              >
                <span>{model}</span>
                {selectedModel === model && (
                  <Check
                    className="w-4 h-4 text-blue-500"
                    aria-label="Selected"
                  />
                )}
              </DropdownMenuItem>
            );
          })}
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
};

const ChatModelDropdown = memo(PureChatModelDropdown);

const PureStopButton = ({ stop }: StopButtonProps) => {
  return (
    <Button
      variant="outline"
      size="icon"
      onClick={stop}
      aria-label="Stop generating response"
      className="rounded-full"
    >
      <StopIcon size={20} />
    </Button>
  );
};

const StopButton = memo(PureStopButton);

const PureSendButton = ({ onSubmit, disabled }: SendButtonProps) => {
  return (
    <Button
      onClick={onSubmit}
      variant="default"
      size="icon"
      disabled={disabled}
      aria-label="Send message"
      className="rounded-full"
    >
      <ArrowUpIcon size={18} />
    </Button>
  );
};

const SendButton = memo(PureSendButton, (prevProps, nextProps) => {
  return prevProps.disabled === nextProps.disabled;
});

// Обёртка для решения проблемы с Rules of Hooks
function ChatInputWrapper(props: ChatInputProps) {
  const { keysLoading } = useAPIKeyStore();
  if (keysLoading) {
    // Показать скелетон, чтобы сохранить высоту и не дёргать разметку
    const ChatInputSkeleton = require('./ChatInputSkeleton').default;
    return <ChatInputSkeleton />;
  }
  return <ChatInput {...props} />;
}

export default ChatInputWrapper;


--- FILE: ./frontend/components/ErrorBoundary.tsx ---
import React from 'react';
import Error from './Error';

type Props = { children: React.ReactNode };

type State = { error: Error | null };

export default class ErrorBoundary extends React.Component<Props, State> {
  // Track any rendering errors encountered in child components
  state: State = { error: null };

  // Update state so the next render shows the fallback UI
  static getDerivedStateFromError(error: Error): State {
    return { error };
  }

  // Log error details for debugging purposes
  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {
    console.error('Uncaught error:', error, errorInfo);
  }

  render() {
    if (this.state.error) {
      return (
        <Error message={`Something went wrong: ${this.state.error.message}`} />
      );
    }
    return this.props.children;
  }
}


--- FILE: ./frontend/components/VirtualMessages.tsx ---
import { VariableSizeList as List } from 'react-window';
import AutoSizer from 'react-virtualized-auto-sizer';
import PreviewMessage from './Message';
import { UIMessage } from 'ai';
import { UseChatHelpers } from '@ai-sdk/react';

interface Props {
  messages: UIMessage[];
  threadId: string;
  setMessages: UseChatHelpers['setMessages'];
  reload: UseChatHelpers['reload'];
  status: UseChatHelpers['status'];
  error: UseChatHelpers['error'];
  stop: UseChatHelpers['stop'];
}

export default function VirtualMessages({ messages, ...rest }: Props) {
  const getItemSize = (index: number) => {
    const msg = messages[index];
    const textLength = msg.parts
      .map((p) => (p.type === 'text' ? p.text.length : 0))
      .reduce((a, b) => a + b, 0);
    const lines = Math.max(1, Math.ceil(textLength / 80));
    return 80 + lines * 24;
  };
  return (
    <AutoSizer>
      {({ height, width }) => (
        <List
          height={height}
          itemCount={messages.length}
          itemSize={getItemSize}
          width={width}
          overscanCount={4}
        >
          {({ index, style }) => (
            <div style={style}>
              <PreviewMessage
                {...rest}
                message={messages[index]}
                isStreaming={
                  rest.status === 'streaming' && index === messages.length - 1
                }
              />
            </div>
          )}
        </List>
      )}
    </AutoSizer>
  );
}


--- FILE: ./frontend/components/Providers.tsx ---
"use client";

import React from 'react';
import { useSettings } from '@/frontend/hooks/useSettings';
import { useSettingsSync } from '@/frontend/stores/SettingsStore';
import { ThemeProvider } from '@/frontend/components/ui/ThemeProvider';

export default function Providers({ children }: { children: React.ReactNode }) {
  useSettings();
  useSettingsSync();
  return (
    <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
      {children}
    </ThemeProvider>
  );
}


--- FILE: ./frontend/components/ui/card.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}


--- FILE: ./frontend/components/ui/sheet.tsx ---
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


--- FILE: ./frontend/components/ui/sonner.tsx ---
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  )
}

export { Toaster }


--- FILE: ./frontend/components/ui/tooltip.tsx ---
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 700,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  delayDuration = 700,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root> & { delayDuration?: number }) {
  return (
    <TooltipPrimitive.Provider delayDuration={delayDuration}>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipPrimitive.Provider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 4,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground border border-border animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance shadow-md",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-popover border-l border-t border-border fill-popover z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


--- FILE: ./frontend/components/ui/ThemeProvider.tsx ---
'use client';

import * as React from 'react';
import { ThemeProvider as NextThemesProvider } from 'next-themes';

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}


--- FILE: ./frontend/components/ui/icons.tsx ---
export const StopIcon = ({ size = 16 }: { size?: number }) => {
  return (
    <svg
      height={size}
      viewBox="0 0 16 16"
      width={size}
      style={{ color: 'currentcolor' }}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M3 3H13V13H3V3Z"
        fill="currentColor"
      />
    </svg>
  );
};


--- FILE: ./frontend/components/ui/dialog.tsx ---
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}


--- FILE: ./frontend/components/ui/badge.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }


--- FILE: ./frontend/components/ui/sidebar.tsx ---
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { VariantProps, cva } from 'class-variance-authority';
import { PanelLeftIcon } from 'lucide-react';

import { useIsMobile } from '@/frontend/hooks/useIsMobile';
import { cn } from '@/lib/utils';
import { Button } from '@/frontend/components/ui/button';
import { Input } from '@/frontend/components/ui/input';
import { Separator } from '@/frontend/components/ui/separator';
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from '@/frontend/components/ui/sheet';
import { Skeleton } from '@/frontend/components/ui/skeleton';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/frontend/components/ui/tooltip';

const SIDEBAR_COOKIE_NAME = 'sidebar_state';
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = '19rem';
const SIDEBAR_WIDTH_MOBILE = '18rem';
const SIDEBAR_WIDTH_ICON = '3rem';
const SIDEBAR_KEYBOARD_SHORTCUT = 'b';

type SidebarContextProps = {
  state: 'expanded' | 'collapsed';
  open: boolean;
  setOpen: (open: boolean) => void;
  openMobile: boolean;
  setOpenMobile: (open: boolean) => void;
  isMobile: boolean;
  toggleSidebar: () => void;
};

const SidebarContext = React.createContext<SidebarContextProps | null>(null);

function useSidebar() {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error('useSidebar must be used within a SidebarProvider.');
  }

  return context;
}

function SidebarProvider({
  defaultOpen = true,
  open: openProp,
  onOpenChange: setOpenProp,
  className,
  style,
  children,
  ...props
}: React.ComponentProps<'div'> & {
  defaultOpen?: boolean;
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
}) {
  const { isMobile, mounted } = useIsMobile();
  const [openMobile, setOpenMobile] = React.useState(false);

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen);
  const open = openProp ?? _open;
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === 'function' ? value(open) : value;
      if (setOpenProp) {
        setOpenProp(openState);
      } else {
        _setOpen(openState);
      }

      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
    },
    [setOpenProp, open]
  );

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);
  }, [isMobile, setOpen, setOpenMobile]);

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (
        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
        (event.metaKey || event.ctrlKey)
      ) {
        event.preventDefault();
        toggleSidebar();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [toggleSidebar]);

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? 'expanded' : 'collapsed';

  const contextValue = React.useMemo<SidebarContextProps>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
  );

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          data-slot="sidebar-wrapper"
          style={
            {
              '--sidebar-width': SIDEBAR_WIDTH,
              '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn(
            'group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full',
            className
          )}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  );
}

function Sidebar({
  side = 'left',
  variant = 'sidebar',
  collapsible = 'offcanvas',
  className,
  children,
  ...props
}: React.ComponentProps<'div'> & {
  side?: 'left' | 'right';
  variant?: 'sidebar' | 'floating' | 'inset';
  collapsible?: 'offcanvas' | 'icon' | 'none';
}) {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

  if (collapsible === 'none') {
    return (
      <div
        data-slot="sidebar"
        className={cn(
          'bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col',
          className
        )}
        {...props}
      >
        {children}
      </div>
    );
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-slot="sidebar"
          data-mobile="true"
          className="bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden"
          style={
            {
              '--sidebar-width': SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <div
      className="group peer text-sidebar-foreground hidden md:block"
      data-state={state}
      data-collapsible={state === 'collapsed' ? collapsible : ''}
      data-variant={variant}
      data-side={side}
      data-slot="sidebar"
    >
      {/* This is what handles the sidebar gap on desktop */}
      <div
        data-slot="sidebar-gap"
        className={cn(
          'relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear',
          'group-data-[collapsible=offcanvas]:w-0',
          'group-data-[side=right]:rotate-180',
          variant === 'floating' || variant === 'inset'
            ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]'
            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon)'
        )}
      />
      <div
        data-slot="sidebar-container"
        className={cn(
          'fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex',
          side === 'left'
            ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'
            : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',
          // Adjust the padding for floating and inset variants.
          variant === 'floating' || variant === 'inset'
            ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]'
            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l',
          className
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          data-slot="sidebar-inner"
          className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm"
        >
          {children}
        </div>
      </div>
    </div>
  );
}

function SidebarTrigger({
  className,
  onClick,
  ...props
}: React.ComponentProps<typeof Button>) {
  const { toggleSidebar } = useSidebar();

  return (
    <Button
      data-sidebar="trigger"
      data-slot="sidebar-trigger"
      variant="ghost"
      size="icon"
      className={cn('size-7', className)}
      onClick={(event) => {
        onClick?.(event);
        toggleSidebar();
      }}
      {...props}
    >
      <PanelLeftIcon className="size-4" />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
}

function SidebarRail({ className, ...props }: React.ComponentProps<'button'>) {
  const { toggleSidebar } = useSidebar();

  return (
    <button
      data-sidebar="rail"
      data-slot="sidebar-rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        'hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex',
        'in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize',
        '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',
        'hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full',
        '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',
        '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',
        className
      )}
      {...props}
    />
  );
}

function SidebarInset({ className, ...props }: React.ComponentProps<'main'>) {
  return (
    <main
      data-slot="sidebar-inset"
      className={cn(
        'bg-background relative flex w-full flex-1 flex-col',
        'md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2',
        className
      )}
      {...props}
    />
  );
}

function SidebarInput({
  className,
  ...props
}: React.ComponentProps<typeof Input>) {
  return (
    <Input
      data-slot="sidebar-input"
      data-sidebar="input"
      className={cn('bg-background h-8 w-full shadow-none', className)}
      {...props}
    />
  );
}

function SidebarHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-header"
      data-sidebar="header"
      className={cn('flex flex-col gap-2 p-2', className)}
      {...props}
    />
  );
}

function SidebarFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-footer"
      data-sidebar="footer"
      className={cn('flex flex-col gap-2 p-2', className)}
      {...props}
    />
  );
}

function SidebarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof Separator>) {
  return (
    <Separator
      data-slot="sidebar-separator"
      data-sidebar="separator"
      className={cn('bg-sidebar-border mx-2 w-auto', className)}
      {...props}
    />
  );
}

function SidebarContent({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-content"
      data-sidebar="content"
      className={cn(
        'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',
        className
      )}
      {...props}
    />
  );
}

function SidebarGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-group"
      data-sidebar="group"
      className={cn('relative flex w-full min-w-0 flex-col p-2', className)}
      {...props}
    />
  );
}

function SidebarGroupLabel({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<'div'> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : 'div';

  return (
    <Comp
      data-slot="sidebar-group-label"
      data-sidebar="group-label"
      className={cn(
        'text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',
        className
      )}
      {...props}
    />
  );
}

function SidebarGroupAction({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<'button'> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : 'button';

  return (
    <Comp
      data-slot="sidebar-group-action"
      data-sidebar="group-action"
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        // Increases the hit area of the button on mobile.
        'after:absolute after:-inset-2 md:after:hidden',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  );
}

function SidebarGroupContent({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-group-content"
      data-sidebar="group-content"
      className={cn('w-full text-sm', className)}
      {...props}
    />
  );
}

function SidebarMenu({ className, ...props }: React.ComponentProps<'ul'>) {
  return (
    <ul
      data-slot="sidebar-menu"
      data-sidebar="menu"
      className={cn('flex w-full min-w-0 flex-col gap-1', className)}
      {...props}
    />
  );
}

function SidebarMenuItem({ className, ...props }: React.ComponentProps<'li'>) {
  return (
    <li
      data-slot="sidebar-menu-item"
      data-sidebar="menu-item"
      className={cn('group/menu-item relative', className)}
      {...props}
    />
  );
}

const sidebarMenuButtonVariants = cva(
  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',
        outline:
          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',
      },
      size: {
        default: 'h-8 text-sm',
        sm: 'h-7 text-xs',
        lg: 'h-12 text-sm group-data-[collapsible=icon]:p-0!',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

function SidebarMenuButton({
  asChild = false,
  isActive = false,
  variant = 'default',
  size = 'default',
  tooltip,
  className,
  ...props
}: React.ComponentProps<'button'> & {
  asChild?: boolean;
  isActive?: boolean;
  tooltip?: string | React.ComponentProps<typeof TooltipContent>;
} & VariantProps<typeof sidebarMenuButtonVariants>) {
  const Comp = asChild ? Slot : 'button';
  const { isMobile, state } = useSidebar();

  const button = (
    <Comp
      data-slot="sidebar-menu-button"
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props}
    />
  );

  if (!tooltip) {
    return button;
  }

  if (typeof tooltip === 'string') {
    tooltip = {
      children: tooltip,
    };
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side="right"
        align="center"
        hidden={state !== 'collapsed' || isMobile}
        {...tooltip}
      />
    </Tooltip>
  );
}

function SidebarMenuAction({
  className,
  asChild = false,
  showOnHover = false,
  ...props
}: React.ComponentProps<'button'> & {
  asChild?: boolean;
  showOnHover?: boolean;
}) {
  const Comp = asChild ? Slot : 'button';

  return (
    <Comp
      data-slot="sidebar-menu-action"
      data-sidebar="menu-action"
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        // Increases the hit area of the button on mobile.
        'after:absolute after:-inset-2 md:after:hidden',
        'peer-data-[size=sm]/menu-button:top-1',
        'peer-data-[size=default]/menu-button:top-1.5',
        'peer-data-[size=lg]/menu-button:top-2.5',
        'group-data-[collapsible=icon]:hidden',
        showOnHover &&
          'peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0',
        className
      )}
      {...props}
    />
  );
}

function SidebarMenuBadge({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-menu-badge"
      data-sidebar="menu-badge"
      className={cn(
        'text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none',
        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',
        'peer-data-[size=sm]/menu-button:top-1',
        'peer-data-[size=default]/menu-button:top-1.5',
        'peer-data-[size=lg]/menu-button:top-2.5',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  );
}

function SidebarMenuSkeleton({
  className,
  showIcon = false,
  ...props
}: React.ComponentProps<'div'> & {
  showIcon?: boolean;
}) {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);

  return (
    <div
      data-slot="sidebar-menu-skeleton"
      data-sidebar="menu-skeleton"
      className={cn('flex h-8 items-center gap-2 rounded-md px-2', className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-(--skeleton-width) flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            '--skeleton-width': width,
          } as React.CSSProperties
        }
      />
    </div>
  );
}

function SidebarMenuSub({ className, ...props }: React.ComponentProps<'ul'>) {
  return (
    <ul
      data-slot="sidebar-menu-sub"
      data-sidebar="menu-sub"
      className={cn(
        'border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  );
}

function SidebarMenuSubItem({
  className,
  ...props
}: React.ComponentProps<'li'>) {
  return (
    <li
      data-slot="sidebar-menu-sub-item"
      data-sidebar="menu-sub-item"
      className={cn('group/menu-sub-item relative', className)}
      {...props}
    />
  );
}

function SidebarMenuSubButton({
  asChild = false,
  size = 'md',
  isActive = false,
  className,
  ...props
}: React.ComponentProps<'a'> & {
  asChild?: boolean;
  size?: 'sm' | 'md';
  isActive?: boolean;
}) {
  const Comp = asChild ? Slot : 'a';

  return (
    <Comp
      data-slot="sidebar-menu-sub-button"
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',
        size === 'sm' && 'text-xs',
        size === 'md' && 'text-sm',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  );
}

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};


--- FILE: ./frontend/components/ui/separator.tsx ---
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }


--- FILE: ./frontend/components/ui/button.tsx ---
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const buttonVariants = cva(
  'cursor-pointer inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:opacity-50 disabled:cursor-not-allowed [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',
  {
    variants: {
      variant: {
        default:
          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90 disabled:hover:bg-primary',
        destructive:
          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60 disabled:hover:bg-destructive dark:disabled:hover:bg-destructive/60',
        outline:
          'border border-white bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 disabled:hover:bg-background disabled:hover:text-foreground dark:disabled:hover:bg-input/30',
        secondary:
          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80 disabled:hover:bg-secondary',
        ghost:
          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50 disabled:hover:bg-transparent disabled:hover:text-foreground',
        link: 'text-primary underline-offset-4 hover:underline disabled:hover:no-underline',
      },
      size: {
        default: 'h-9 px-4 py-2 has-[>svg]:px-3',
        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',
        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',
        icon: 'size-9',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

const Button = React.forwardRef<
  HTMLButtonElement,
  React.ComponentPropsWithoutRef<'button'> &
    VariantProps<typeof buttonVariants> & {
      asChild?: boolean;
    }
>(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : 'button';

  return (
    <Comp
      ref={ref}
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
});

Button.displayName = 'Button';

export { Button, buttonVariants };


--- FILE: ./frontend/components/ui/dropdown-menu.tsx ---
'use client';

import * as React from 'react';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />;
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  );
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  );
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  );
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  );
}

function DropdownMenuItem({
  className,
  inset,
  variant = 'default',
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean;
  variant?: 'default' | 'destructive';
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  );
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  );
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  );
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  );
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',
        className
      )}
      {...props}
    />
  );
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn('bg-border -mx-1 my-1 h-px', className)}
      {...props}
    />
  );
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        'text-muted-foreground ml-auto text-xs tracking-widest',
        className
      )}
      {...props}
    />
  );
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />;
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  );
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',
        className
      )}
      {...props}
    />
  );
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
};


--- FILE: ./frontend/components/ui/textarea.tsx ---
import * as React from 'react';

import { cn } from '@/lib/utils';

function Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    />
  );
}

export { Textarea };


--- FILE: ./frontend/components/ui/input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }


--- FILE: ./frontend/components/ui/skeleton.tsx ---
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }


--- FILE: ./frontend/components/ui/ThemeToggler.tsx ---
'use client';

import * as React from 'react';
import { Moon, Sun } from 'lucide-react';
import { useTheme } from 'next-themes';

import { Button } from '@/frontend/components/ui/button';

export default function ThemeToggler() {
  const { setTheme, theme } = useTheme();

  return (
    <Button
      variant="outline"
      size="icon"
      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
      className="fixed top-4 right-4"
    >
      <Sun className="h-[1.2rem] w-[1.2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  );
}


--- FILE: ./frontend/components/ui/MessageLoading.tsx ---
export default function MessageLoading() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      className="text-foreground"
    >
      <circle cx="4" cy="12" r="2" fill="currentColor">
        <animate
          id="spinner_qFRN"
          begin="0;spinner_OcgL.end+0.25s"
          attributeName="cy"
          calcMode="spline"
          dur="0.6s"
          values="12;6;12"
          keySplines=".33,.66,.66,1;.33,0,.66,.33"
        />
      </circle>
      <circle cx="12" cy="12" r="2" fill="currentColor">
        <animate
          begin="spinner_qFRN.begin+0.1s"
          attributeName="cy"
          calcMode="spline"
          dur="0.6s"
          values="12;6;12"
          keySplines=".33,.66,.66,1;.33,0,.66,.33"
        />
      </circle>
      <circle cx="20" cy="12" r="2" fill="currentColor">
        <animate
          id="spinner_OcgL"
          begin="spinner_qFRN.begin+0.2s"
          attributeName="cy"
          calcMode="spline"
          dur="0.6s"
          values="12;6;12"
          keySplines=".33,.66,.66,1;.33,0,.66,.33"
        />
      </circle>
    </svg>
  );
}


--- FILE: ./frontend/hooks/useQuoteShortcuts.ts ---
import { useEffect } from 'react';
import { useQuoteStore } from '@/frontend/stores/QuoteStore';

export function useQuoteShortcuts() {
  const { clearQuote } = useQuoteStore();

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      // Escape - очистить цитату
      if (event.key === 'Escape') {
        clearQuote();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [clearQuote]);
} 

--- FILE: ./frontend/hooks/useUserSync.ts ---
import { useEffect } from 'react';
import { useMutation, useConvexAuth } from 'convex/react';
import { api } from '@/convex/_generated/api';

export function useUserSync() {
  const { isAuthenticated, isLoading } = useConvexAuth();
  const syncUser = useMutation(api.users.sync);

  useEffect(() => {
    if (!isLoading && isAuthenticated) {
      syncUser().catch(() => {
        /* error ignored */
      });
    }
  }, [isAuthenticated, isLoading, syncUser]);
}


--- FILE: ./frontend/hooks/useConvexMessages.ts ---
import { useQuery, useMutation } from "convex/react";
import { api } from "@/convex/_generated/api";
import { Id } from "@/convex/_generated/dataModel";

export function useConvexMessages(threadId: Id<"threads"> | null) {
  // Получение сообщений треда
  const messages = useQuery(
    api.messages.get,
    threadId ? { threadId } : "skip"
  );

  // Мутации
  const addMessage = useMutation<typeof api.messages.send>(api.messages.send);
  const updateMessage = useMutation(api.messages.edit);
  const deleteMessage = useMutation(api.messages.remove);
  const deleteMessagesAfter = useMutation(api.messages.removeAfter);

  // Обертки для удобства использования
  const handleAddMessage = async (
    role: "user" | "assistant",
    content: string
  ) => {
    if (!threadId) return null;
    return await addMessage({
      threadId,
      role,
      content,
    });
  };

  const handleUpdateMessage = async (
    messageId: Id<"messages">,
    content: string
  ) => {
    await updateMessage({ messageId, content });
  };

  const handleDeleteMessage = async (messageId: Id<"messages">) => {
    await deleteMessage({ messageId });
  };

  const handleDeleteMessagesAfter = async (afterMessageId: Id<"messages">) => {
    if (!threadId) return;
    await deleteMessagesAfter({ threadId, afterMessageId });
  };

  return {
    messages: messages || [],
    isLoading: messages === undefined,
    addMessage: handleAddMessage,
    updateMessage: handleUpdateMessage,
    deleteMessage: handleDeleteMessage,
    deleteMessagesAfter: handleDeleteMessagesAfter,
  };
} 

--- FILE: ./frontend/hooks/useConvexThreads.ts ---
import { useQuery, useMutation } from "convex/react";
import { api } from "@/convex/_generated/api";
import { useAuthStore } from "@/frontend/stores/AuthStore";
import { Id } from "@/convex/_generated/dataModel";

export function useConvexThreads() {
  const { user } = useAuthStore();
  
  // Получение тредов пользователя
  const threads = useQuery(
    api.threads.list,
    user ? {} : "skip"
  );

  // Мутации
  const createThread = useMutation(api.threads.create);
  const updateThreadTitle = useMutation(api.threads.rename);
  const deleteThread = useMutation(api.threads.remove);

  // Обертки для удобства использования
  const handleCreateThread = async (title: string) => {
    if (!user) return null;
    return await createThread({
      title,
    });
  };

  const handleUpdateThreadTitle = async (threadId: Id<"threads">, title: string) => {
    await updateThreadTitle({ threadId, title });
  };

  const handleDeleteThread = async (threadId: Id<"threads">) => {
    await deleteThread({ threadId });
  };

  return {
    threads: threads || [],
    isLoading: threads === undefined,
    createThread: handleCreateThread,
    updateThreadTitle: handleUpdateThreadTitle,
    deleteThread: handleDeleteThread,
  };
} 

--- FILE: ./frontend/hooks/useMessageSummary.ts ---
import { useCompletion } from '@ai-sdk/react';
import { useAPIKeyStore } from '@/frontend/stores/APIKeyStore';
import { toast } from 'sonner';

import { useMutation } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { Id } from '@/convex/_generated/dataModel';

interface MessageSummaryPayload {
  title: string;
  isTitle?: boolean;
  messageId: string;
  threadId: Id<'threads'>;
}

export const useMessageSummary = () => {
  const { getKey } = useAPIKeyStore();
  const renameThread = useMutation(api.threads.rename);

  const googleApiKey = getKey('google');

  const { complete, isLoading } = useCompletion({
    api: '/api/completion',
    headers: googleApiKey ? { 'X-Google-API-Key': googleApiKey } : undefined,
    onResponse: async (response) => {
      try {
        const payload: MessageSummaryPayload = await response.json();

        if (response.ok) {
          const { title, isTitle, threadId } = payload;

          if (isTitle) {
            await renameThread({ threadId, title });
          }
        } else {
          toast.error('Failed to generate a summary for the message');
        }
      } catch {
        /* ignore errors */
      }
    },
  });

  return {
    complete,
    isLoading,
  };
};


--- FILE: ./frontend/hooks/useScrollHide.ts ---
import { useState, useEffect, useCallback, RefObject } from 'react';

/**
 * Options for {@link useScrollHide}.
 *
 * @template T Element type for the panel reference.
 */
interface UseScrollHideOptions<T extends HTMLElement = HTMLElement> {
  /** Minimum scroll difference before the panel reacts. */
  threshold?: number;
  /** Hides the panel when scrolling down if `true`. */
  hideOnScrollDown?: boolean;
  /** Shows the panel when scrolling up if `true`. */
  showOnScrollUp?: boolean;
  /** Optional ref to the panel element that moves with the scroll. */
  panelRef?: RefObject<T | null>;
}

export function useScrollHide<T extends HTMLElement = HTMLElement>({
  threshold = 10,
  hideOnScrollDown = true,
  showOnScrollUp = true,
  panelRef,
}: UseScrollHideOptions<T> = {}) {
  const [isVisible, setIsVisible] = useState(true);
  const [lastScrollY, setLastScrollY] = useState(0);

  const handleScroll = useCallback(() => {
    const currentScrollY = window.scrollY;
    const scrollDifference = Math.abs(currentScrollY - lastScrollY);

    // Если прокрутка слишком мала, игнорируем
    if (scrollDifference < threshold) {
      return;
    }

    // Если мы в самом верху страницы, всегда показываем элементы
    if (currentScrollY <= 50) {
      setIsVisible(true);
      setLastScrollY(currentScrollY);
      return;
    }

    // Проверяем, мобильное ли устройство
    const isMobile = window.innerWidth <= 768;

    if (currentScrollY > lastScrollY && hideOnScrollDown) {
      // Прокрутка вниз - скрываем
      setIsVisible(false);
      // Применяем трансформацию только на мобильных устройствах
      if (panelRef?.current && isMobile) {
        const max = panelRef.current.offsetWidth - 48;
        const delta = Math.min(currentScrollY - lastScrollY, max);
        panelRef.current.style.transform = `translateX(${delta}px)`;
      }
    } else if (currentScrollY < lastScrollY && showOnScrollUp) {
      // Прокрутка вверх - показываем
      setIsVisible(true);
      if (panelRef?.current && isMobile) {
        panelRef.current.style.transform = 'translateX(0)';
      }
    }

    setLastScrollY(currentScrollY);
  }, [lastScrollY, threshold, hideOnScrollDown, showOnScrollUp, panelRef]);

  useEffect(() => {
    // Инициализируем начальную позицию
    setLastScrollY(window.scrollY);
    
    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, [handleScroll]);

  return isVisible;
} 

--- FILE: ./frontend/hooks/useStreamBuffer.ts ---
import { useRef } from 'react';

export function useStreamBuffer(onFlush: (text: string) => void) {
  const buffer = useRef('');
  const raf = useRef<number | undefined>(undefined);

  const push = (chunk: string) => {
    buffer.current += chunk;
    if (!raf.current) {
      raf.current = requestAnimationFrame(() => {
        onFlush(buffer.current);
        buffer.current = '';
        raf.current = undefined;
      });
    }
  };
  return push;
}


--- FILE: ./frontend/hooks/useWelcomeThread.ts ---
import { useEffect } from 'react';
import { useMutation, useQuery } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { useAPIKeyStore } from '@/frontend/stores/APIKeyStore';
import { useRouter } from 'next/navigation';

export default function useWelcomeThread() {
  const router = useRouter();
  const { hasRequiredKeys } = useAPIKeyStore();

  const welcome = useQuery(api.threads.listSystem, {});
  const createThread = useMutation(api.threads.create);
  const sendMessage = useMutation(api.messages.send);

  useEffect(() => {
    if (hasRequiredKeys()) return;
    (async () => {
      let id = welcome?.[0]?._id;
      if (!id) {
        id = await createThread({ title: 'API Keys', system: true });
        await sendMessage({
          threadId: id,
          role: 'assistant',
          content: 'To use Pak.chat you need to enter your API keys.',
        });
      }
      router.replace(`/chat/${id}`);
    })();
  }, [welcome, hasRequiredKeys, createThread, sendMessage, router]);
}


--- FILE: ./frontend/hooks/useKeyboardInsets.ts ---
import { useEffect } from 'react';

export function useKeyboardInsets(onChange: (height: number) => void) {
  useEffect(() => {
    const handle = () => {
      const height = window.visualViewport
        ? window.innerHeight - window.visualViewport.height
        : 0;
      onChange(height);
    };
    window.visualViewport?.addEventListener('resize', handle);
    return () => window.visualViewport?.removeEventListener('resize', handle);
  }, [onChange]);
}


--- FILE: ./frontend/hooks/useSettings.ts ---
import { useEffect } from 'react';
import { useSettingsStore } from '@/frontend/stores/SettingsStore';
import { useAuthStore } from '@/frontend/stores/AuthStore';

export function useSettings() {
  const { settings } = useSettingsStore();
  const setBlur = useAuthStore((s) => s.toggleBlur);
  const blurPersonalData = useAuthStore((s) => s.blurPersonalData);

  useEffect(() => {
    const applyFontSettings = () => {
      const root = document.documentElement;
      
      // Apply general font
      if (settings.generalFont === 'Proxima Vara') {
        root.style.setProperty('--font-sans', 'Proxima Vara, sans-serif');
      } else {
        root.style.setProperty('--font-sans', 'system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif');
      }

      // Apply code font
      if (settings.codeFont === 'Berkeley Mono') {
        root.style.setProperty('--font-mono', 'Berkeley Mono, "JetBrains Mono", "Fira Code", "Cascadia Code", Consolas, monospace');
      } else {
        root.style.setProperty('--font-mono', 'ui-monospace, "SF Mono", Monaco, "Cascadia Code", "Roboto Mono", Consolas, "Courier New", monospace');
      }
    };

    applyFontSettings();
    if (blurPersonalData !== settings.hidePersonal) {
      setBlur();
    }
  }, [settings.generalFont, settings.codeFont, settings.hidePersonal]);

  return settings;
} 

--- FILE: ./frontend/hooks/useTextSelection.ts ---
import { useCallback, useEffect, useState } from 'react';

export interface TextSelection {
  text: string;
  range: Range | null;
  rect: DOMRect | null;
}

export function useTextSelection() {
  const [selection, setSelection] = useState<TextSelection | null>(null);

  const handleSelectionChange = useCallback(() => {
    const sel = window.getSelection();
    
    if (!sel || sel.rangeCount === 0) {
      setSelection(null);
      return;
    }

    const range = sel.getRangeAt(0);
    const text = sel.toString().trim();

    if (!text) {
      setSelection(null);
      return;
    }

    // Получаем позицию выделенного текста
    const rect = range.getBoundingClientRect();

    // Проверяем, что выделение видимо на экране
    if (rect.width === 0 || rect.height === 0) {
      setSelection(null);
      return;
    }

    setSelection({
      text,
      range,
      rect,
    });
  }, []);

  const clearSelection = useCallback(() => {
    const sel = window.getSelection();
    if (sel) {
      sel.removeAllRanges();
    }
    setSelection(null);
  }, []);

  useEffect(() => {
    document.addEventListener('selectionchange', handleSelectionChange);
    
    return () => {
      document.removeEventListener('selectionchange', handleSelectionChange);
    };
  }, [handleSelectionChange]);

  return {
    selection,
    clearSelection,
  };
} 

--- FILE: ./frontend/hooks/useIsMobile.ts ---
import { useState, useEffect } from 'react';

export function useIsMobile(breakpoint: number = 768) {
  const [isMobile, setIsMobile] = useState(false);
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
    
    const checkMobile = () => {
      setIsMobile(window.innerWidth < breakpoint);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    
    return () => window.removeEventListener('resize', checkMobile);
  }, [breakpoint]);

  return { isMobile: mounted ? isMobile : false, mounted };
} 

--- FILE: ./frontend/lib/crypto.ts ---
import CryptoJS from 'crypto-js';

/**
 * Encrypt arbitrary data with a passphrase.
 */
export function encryptData<T>(data: T, passphrase: string): string {
  const json = JSON.stringify(data);
  return CryptoJS.AES.encrypt(json, passphrase).toString();
}

/**
 * Decrypt data using the same passphrase used for encryption.
 */
export function decryptData<T>(cipher: string, passphrase: string): T {
  const bytes = CryptoJS.AES.decrypt(cipher, passphrase);
  const json = bytes.toString(CryptoJS.enc.Utf8);
  return JSON.parse(json) as T;
}


--- FILE: ./frontend/worker/shikiWorker.ts ---
import { getSingletonHighlighter } from 'shiki/bundle/web';

interface Msg {
  code: string;
  lang: string;
  theme: string;
}

const cache = new Map<string, any>();

self.onmessage = async (ev: MessageEvent<Msg>) => {
  const { code, lang, theme } = ev.data;
  const key = `${theme}:${lang}`;
  let highlighter = cache.get(key);
  if (!highlighter) {
    highlighter = await getSingletonHighlighter({ themes: [theme], langs: [lang] });
    cache.set(key, highlighter);
  }
  const html = highlighter.codeToHtml(code, { lang, theme });
  self.postMessage(html);
};


--- FILE: ./cloudflare/worker.ts ---
export default {
  async fetch(req: Request, env: {}, ctx: ExecutionContext) {
    const url = new URL(req.url);
    const upstream = 'https://pak.chat.pages.dev' + url.pathname + url.search;
    const resp = await fetch(upstream, {
      headers: { ...Object.fromEntries(req.headers) },
      cf: { brotli: true, cacheTtl: 0, cacheEverything: false }
    });
    return resp;
  }
};


--- FILE: ./convex/schema.ts ---
// convex/schema.ts
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  // Users table synchronized with Firebase
  users: defineTable({
    name: v.string(),
    email: v.optional(v.string()),
    avatarUrl: v.optional(v.string()),
    tokenIdentifier: v.string(),
  }).index("by_token", ["tokenIdentifier"]),

  // User settings including encrypted API keys
  userSettings: defineTable({
    userId: v.id("users"),
    encryptedApiKeys: v.string(),
    uiFont: v.optional(v.string()),
    codeFont: v.optional(v.string()),
    hidePersonal: v.optional(v.boolean()),
  }).index("by_user", ["userId"]),

  // Chat threads
  threads: defineTable({
    userId: v.id("users"),
    title: v.string(),
    system: v.optional(v.boolean()),
    createdAt: v.number(),
    pinned: v.optional(v.boolean()),
    clonedFrom: v.optional(v.id("threads")),
    forkedFromMessageId: v.optional(v.id("messages")),
  }).index("by_user_and_time", ["userId", "createdAt"]),

  // Messages
  messages: defineTable({
    threadId: v.id("threads"),
    authorId: v.id("users"),
    role: v.union(v.literal("user"), v.literal("assistant")),
    content: v.string(),
    createdAt: v.number(),
    // Optional version for concurrent-safe updates
    version: v.optional(v.number()),
  }).index("by_thread_and_time", ["threadId", "createdAt"]),

  // Attachments for messages
  attachments: defineTable({
    threadId: v.id("threads"),
    fileId: v.string(),
    name: v.string(),
    type: v.string(),
    messageId: v.optional(v.id("messages")),
  })
    .index("by_thread", ["threadId"])
    .index("by_message", ["messageId"]),

  // Message edit history
  messageVersions: defineTable({
    messageId: v.id("messages"),
    content: v.string(),
    editedAt: v.number(),
  }).index("by_message", ["messageId"]),
});


--- FILE: ./convex/messages.ts ---
// convex/messages.ts
import { query, mutation } from "./_generated/server";
import { v } from "convex/values";
import { Id } from "./_generated/dataModel";
import { currentUserId } from "./utils";

/** Get messages for a thread */
export const get = query({
  args: {
    threadId: v.id("threads"),
    cursor: v.optional(v.string()),
    limit: v.optional(v.number()),
  },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (uid === null) {
      // No user record yet, so no messages to return
      return [];
    }
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    const q = ctx.db
      .query("messages")
      .withIndex("by_thread_and_time", (q) => q.eq("threadId", args.threadId))
      .order("asc");
      return await q.paginate({
        cursor: args.cursor ?? null,
        numItems: args.limit ?? 50,
      });
  },
});

/** Send a message */
export const send = mutation({
  args: {
    threadId: v.id("threads"),
    role: v.union(v.literal("user"), v.literal("assistant")),
    content: v.string(),
  },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    if (!args.content.trim()) throw new Error("Empty message");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    const id = await ctx.db.insert("messages", {
      threadId: args.threadId,
      authorId: uid,
      role: args.role,
      content: args.content,
      createdAt: Date.now(),
      version: 0,
    });
    return id as Id<"messages">;
  },
});

/** Edit an existing message */
export const edit = mutation({
  args: { messageId: v.id("messages"), content: v.string() },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const message = await ctx.db.get(args.messageId);
    if (!message) throw new Error("Message not found");
    const thread = await ctx.db.get(message.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Permission denied");
    await ctx.db.insert("messageVersions", {
      messageId: args.messageId,
      content: message.content,
      editedAt: Date.now(),
    });
    await ctx.db.patch(args.messageId, { content: args.content });
  },
});

/** Delete a message */
export const remove = mutation({
  args: { messageId: v.id("messages") },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const msg = await ctx.db.get(args.messageId);
    if (!msg) return;
    const thread = await ctx.db.get(msg.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Permission denied");
    await ctx.db.delete(args.messageId);
  },
});

/** Remove all messages after a given one */
export const removeAfter = mutation({
  args: { threadId: v.id("threads"), afterMessageId: v.id("messages") },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Permission denied");
    const after = await ctx.db.get(args.afterMessageId);
    if (!after || after.threadId !== args.threadId)
      throw new Error("Message mismatch");
    const msgs = await ctx.db
      .query("messages")
      .withIndex("by_thread_and_time", (q) =>
        q
          .eq("threadId", args.threadId)
          .gt("createdAt", after.createdAt)
      )
      .collect();
    await Promise.all(msgs.map((m) => ctx.db.delete(m._id)));
  },
});

/** Partially update message content with version check */
export const patchContent = mutation({
  args: {
    messageId: v.id("messages"),
    content: v.string(),
    // Client-provided version number for optimistic concurrency
    version: v.number(),
  },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");

    const message = await ctx.db.get(args.messageId);
    if (!message) throw new Error("Message not found");

    const thread = await ctx.db.get(message.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Permission denied");

    const currentVersion = message.version ?? 0;

    // Avoid overwriting newer content from another tab
    if (args.version >= currentVersion) {
      await ctx.db.patch(args.messageId, {
        content: args.content,
        version: args.version,
      });
    }
  },
});

/** Finalize message after streaming ends and clean versions */
export const finalize = mutation({
  args: { messageId: v.id("messages") },
  async handler(ctx, { messageId }) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const msg = await ctx.db.get(messageId);
    if (!msg) return;
    const thread = await ctx.db.get(msg.threadId);
    if (!thread || thread.userId !== uid) throw new Error("Permission denied");

    await ctx.db.patch(messageId, { version: 0 });

    const versions = await ctx.db
      .query("messageVersions")
      .withIndex("by_message", (q) => q.eq("messageId", messageId))
      .collect();
    await Promise.all(versions.map((v) => ctx.db.delete(v._id)));
  },
});

--- FILE: ./convex/http.ts ---
// convex/http.ts
import { httpRouter } from "convex/server";
import { internal } from "./_generated/api";
import { httpAction } from "./_generated/server";

const http = httpRouter();

http.route({
  path: "/syncUser",
  method: "POST",
  handler: httpAction(async (ctx) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      return new Response("Not authenticated", { status: 401 });
    }

    const existingUser = await ctx.runQuery(internal.users.findByToken, {
      tokenIdentifier: identity.subject,
    });

    if (existingUser) {
      if (
        existingUser.name !== identity.name ||
        existingUser.avatarUrl !== identity.pictureUrl
      ) {
        await ctx.runMutation(internal.users.update, {
          userId: existingUser._id,
          name: identity.name!,
          avatarUrl: identity.pictureUrl,
        });
      }
    } else {
      await ctx.runMutation(internal.users.create, {
        name: identity.name!,
        email: identity.email,
        avatarUrl: identity.pictureUrl,
        tokenIdentifier: identity.subject,
      });
    }
    return new Response(null, { status: 200 });
  }),
});

export default http;


--- FILE: ./convex/utils.ts ---
// Import explicit contexts to support both query and mutation usage
import type { QueryCtx, MutationCtx } from "./_generated/server";
import { Id } from "./_generated/dataModel";

/**
 * Return the Convex user ID for the currently authenticated Firebase user.
 * Throws if the user is not authenticated or not synchronized in the DB.
 */
export async function currentUserId(
  ctx: QueryCtx | MutationCtx,
): Promise<Id<"users"> | null> {
  // Firebase identity may not be attached immediately after login
  const identity = await ctx.auth.getUserIdentity();
  if (!identity) return null;

  const user = await ctx.db
    .query("users")
    .withIndex("by_token", (q) => q.eq("tokenIdentifier", identity.subject))
    .unique();

  if (!user) return null;

  return user._id;
}


--- FILE: ./convex/threads.ts ---
// convex/threads.ts
import { mutation, query } from "./_generated/server";
import { v } from "convex/values";
import { Id } from "./_generated/dataModel";
import { currentUserId } from "./utils";

/** Get a single thread by ID */
export const get = query({
  args: { threadId: v.id("threads") },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (uid === null) {
      return null;
    }
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid) {
      return null;
    }
    return thread;
  },
});

/** List threads for the authenticated user ordered by creation time */
export const list = query({
  args: {},
  async handler(ctx) {
    const uid = await currentUserId(ctx);
    if (uid === null) {
      // No user record yet means no threads to return
      return [];
    }
    return ctx.db
      .query("threads")
      .withIndex("by_user_and_time", (q) => q.eq("userId", uid))
      .order("desc")
      .collect();
  },
});

/** List system threads for the authenticated user */
export const listSystem = query({
  args: {},
  async handler(ctx) {
    const uid = await currentUserId(ctx);
    if (uid === null) {
      return [];
    }
    const all = await ctx.db
      .query("threads")
      .withIndex("by_user_and_time", (q) => q.eq("userId", uid))
      .collect();
    return all.filter((t) => t.system === true);
  },
});

/** Create a new thread */
export const create = mutation({
  args: { title: v.string(), system: v.optional(v.boolean()) },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    return ctx.db.insert("threads", {
      userId: uid,
      title: args.title,
      createdAt: Date.now(),
      pinned: false,
      system: args.system ?? false,
    });
  },
});

/** Rename a thread */
export const rename = mutation({
  args: { threadId: v.id("threads"), title: v.string() },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    await ctx.db.patch(args.threadId, { title: args.title });
  },
});

/** Remove a thread and all its messages */
export const remove = mutation({
  args: { threadId: v.id("threads") },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    const messages = await ctx.db
      .query("messages")
      .withIndex("by_thread_and_time", (q) => q.eq("threadId", args.threadId))
      .collect();
    await Promise.all(messages.map((m) => ctx.db.delete(m._id)));
    await ctx.db.delete(args.threadId);
  },
});

/** Clone a thread by copying its messages */
export const clone = mutation({
  args: { threadId: v.id("threads"), title: v.string() },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    const newThreadId = await ctx.db.insert("threads", {
      userId: uid,
      title: args.title,
      createdAt: Date.now(),
      clonedFrom: args.threadId,
      pinned: false,
    });
    const messages = await ctx.db
      .query("messages")
      .withIndex("by_thread_and_time", (q) => q.eq("threadId", args.threadId))
      .collect();

    const idMap = new Map<Id<"messages">, Id<"messages">>();

    await Promise.all(
      messages.map(async (m) => {
        const newId = await ctx.db.insert("messages", {
          threadId: newThreadId,
          authorId: m.authorId,
          role: m.role,
          content: m.content,
          createdAt: m.createdAt,
        });
        idMap.set(m._id, newId as Id<"messages">);
      })
    );

    const attachments = await ctx.db
      .query("attachments")
      .withIndex("by_thread", (q) => q.eq("threadId", args.threadId))
      .collect();

    await Promise.all(
      attachments.map((a) =>
        ctx.db.insert("attachments", {
          threadId: newThreadId,
          fileId: a.fileId,
          name: a.name,
          type: a.type,
          messageId: a.messageId ? idMap.get(a.messageId) : undefined,
        })
      )
    );
    return newThreadId;
  },
});

/** Toggle the pinned status of a thread */
export const togglePin = mutation({
  args: { threadId: v.id("threads"), pinned: v.boolean() },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    await ctx.db.patch(args.threadId, { pinned: args.pinned });
  },
});

/** Set the parent thread of an existing thread (used for clones) */
export const setParent = mutation({
  args: { threadId: v.id("threads"), parentId: v.id("threads") },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const thread = await ctx.db.get(args.threadId);
    if (!thread || thread.userId !== uid)
      throw new Error("Thread not found or permission denied");
    await ctx.db.patch(args.threadId, { clonedFrom: args.parentId });
  },
});




--- FILE: ./convex/attachments.ts ---
import { mutation, query } from './_generated/server';
import { Id } from './_generated/dataModel';
import { v } from 'convex/values';

export const generateUploadUrl = mutation(async (ctx) => {
  return await ctx.storage.generateUploadUrl();
});

export const save = mutation({
  args: {
    threadId: v.id('threads'),
    attachments: v.array(
      v.object({
        storageId: v.string(),
        name: v.string(),
        type: v.string(),
        messageId: v.union(v.string(), v.null()),
      })
    ),
  },
  async handler(ctx, args) {
    const saved = await Promise.all(
      args.attachments.map(async (a) => {
        const attachmentId = await ctx.db.insert('attachments', {
          threadId: args.threadId,
          fileId: a.storageId,
          name: a.name,
          type: a.type,
          // Временные ID от клиента игнорируем, messageId будет обновлен позже
          messageId: undefined,
        });
        
        // Возвращаем URL для немедленного использования
        const url = await ctx.storage.getUrl(a.storageId);
        return {
          id: attachmentId,
          url,
          name: a.name,
          type: a.type,
        };
      })
    );
    return saved;
  },
});

export const byThread = query({
  args: { threadId: v.id('threads') },
  async handler(ctx, { threadId }) {
    const attachments = await ctx.db
      .query('attachments')
      .withIndex('by_thread', (q) => q.eq('threadId', threadId))
      .collect();
    
    // Получаем URL параллельно для ускорения
    const attachmentsWithUrls = await Promise.all(
      attachments.map(async (a) => {
        const url = await ctx.storage.getUrl(a.fileId);
        return {
          id: a._id,
          messageId: a.messageId,
          name: a.name,
          type: a.type,
          url,
        };
      })
    );
    
    return attachmentsWithUrls;
  },
});

// Новая mutation для обновления messageId у вложений
export const updateMessageId = mutation({
  args: {
    attachmentIds: v.array(v.id('attachments')),
    messageId: v.id('messages'),
  },
  async handler(ctx, args) {
    await Promise.all(
      args.attachmentIds.map(id =>
        ctx.db.patch(id, { messageId: args.messageId })
      )
    );
  },
});


--- FILE: ./convex/auth.config.js ---
export default {
  providers: [
    {
      domain: `https://securetoken.google.com/pak-chat-75beb`,
      applicationID: "pak-chat-75beb", 
    },
  ]
}; 

--- FILE: ./convex/users.ts ---
// convex/users.ts
import { internalMutation, internalQuery, mutation, query } from "./_generated/server";
import { v } from "convex/values";

export const findByToken = internalQuery({
  args: { tokenIdentifier: v.string() },
  handler: (ctx, args) => {
    return ctx.db
      .query("users")
      .withIndex("by_token", (q) => q.eq("tokenIdentifier", args.tokenIdentifier))
      .unique();
  },
});

export const create = internalMutation({
  args: {
    name: v.string(),
    email: v.optional(v.string()),
    avatarUrl: v.optional(v.string()),
    tokenIdentifier: v.string(),
  },
  handler: (ctx, args) => {
    return ctx.db.insert("users", args);
  },
});

export const update = internalMutation({
  args: {
    userId: v.id("users"),
    name: v.string(),
    avatarUrl: v.optional(v.string()),
  },
  handler: (ctx, args) => {
    return ctx.db.patch(args.userId, {
      name: args.name,
      avatarUrl: args.avatarUrl,
    });
  },
});

/** Fetch the currently authenticated user if present. */
export const getCurrent = query({
  args: {},
  async handler(ctx) {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      return null;
    }
    return await ctx.db
      .query("users")
      .withIndex("by_token", (q) => q.eq("tokenIdentifier", identity.subject))
      .unique();
  },
});

/** Sync user data from Firebase Auth */
export const sync = mutation({
  args: {},
  async handler(ctx) {
    const identity = await ctx.auth.getUserIdentity();
    // When a user signs in, the token may take a moment to attach. In that case
    // we exit quietly so the client can retry.
    if (!identity) {
      return null;
    }

    const existingUser = await ctx.db
      .query("users")
      .withIndex("by_token", (q) => q.eq("tokenIdentifier", identity.subject))
      .unique();

    if (existingUser) {
      if (
        existingUser.name !== identity.name ||
        existingUser.avatarUrl !== identity.pictureUrl
      ) {
        await ctx.db.patch(existingUser._id, {
          name: identity.name!,
          avatarUrl: identity.pictureUrl,
        });
      }
      return existingUser._id;
    } else {
      return await ctx.db.insert("users", {
        name: identity.name!,
        email: identity.email,
        avatarUrl: identity.pictureUrl,
        tokenIdentifier: identity.subject,
      });
    }
  },
});


--- FILE: ./convex/userSettings.ts ---
// convex/userSettings.ts
import { query, mutation } from "./_generated/server";
import { v } from "convex/values";
import { Id } from "./_generated/dataModel";
import { currentUserId } from "./utils";

/** Get encrypted API keys for the current user */
export const get = query({
  args: {},
  async handler(ctx) {
    const uid = await currentUserId(ctx);
    if (uid === null) {
      // User record not yet created
      return null;
    }
    return ctx.db
      .query("userSettings")
      .withIndex("by_user", (q) => q.eq("userId", uid))
      .unique();
  },
});

/** Save encrypted API keys */
export const saveApiKeys = mutation({
  args: { encryptedApiKeys: v.string() },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error("Unauthenticated");
    const existing = await ctx.db
      .query("userSettings")
      .withIndex("by_user", (q) => q.eq("userId", uid))
      .unique();
    if (existing) {
      await ctx.db.patch(existing._id, {
        encryptedApiKeys: args.encryptedApiKeys,
      });
    } else {
      await ctx.db.insert("userSettings", {
        userId: uid,
        encryptedApiKeys: args.encryptedApiKeys,
      });
    }
  },
});

/** Save UI settings such as fonts and personal data flag */
export const saveSettings = mutation({
  args: {
    uiFont: v.string(),
    codeFont: v.string(),
    hidePersonal: v.boolean(),
  },
  async handler(ctx, args) {
    const uid = await currentUserId(ctx);
    if (!uid) throw new Error('Unauthenticated');
    const existing = await ctx.db
      .query('userSettings')
      .withIndex('by_user', (q) => q.eq('userId', uid))
      .unique();
    if (existing) {
      await ctx.db.patch(existing._id, {
        uiFont: args.uiFont,
        codeFont: args.codeFont,
        hidePersonal: args.hidePersonal,
      });
    } else {
      await ctx.db.insert('userSettings', {
        userId: uid,
        encryptedApiKeys: '',
        uiFont: args.uiFont,
        codeFont: args.codeFont,
        hidePersonal: args.hidePersonal,
      });
    }
  },
});


--- FILE: ./convex/_generated/dataModel.d.ts ---
/* eslint-disable */
/**
 * Generated data model types.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type {
  DataModelFromSchemaDefinition,
  DocumentByName,
  TableNamesInDataModel,
  SystemTableNames,
} from "convex/server";
import type { GenericId } from "convex/values";
import schema from "../schema.js";

/**
 * The names of all of your Convex tables.
 */
export type TableNames = TableNamesInDataModel<DataModel>;

/**
 * The type of a document stored in Convex.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Doc<TableName extends TableNames> = DocumentByName<
  DataModel,
  TableName
>;

/**
 * An identifier for a document in Convex.
 *
 * Convex documents are uniquely identified by their `Id`, which is accessible
 * on the `_id` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).
 *
 * Documents can be loaded using `db.get(id)` in query and mutation functions.
 *
 * IDs are just strings at runtime, but this type can be used to distinguish them from other
 * strings when type checking.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Id<TableName extends TableNames | SystemTableNames> =
  GenericId<TableName>;

/**
 * A type describing your Convex data model.
 *
 * This type includes information about what tables you have, the type of
 * documents stored in those tables, and the indexes defined on them.
 *
 * This type is used to parameterize methods like `queryGeneric` and
 * `mutationGeneric` to make them type-safe.
 */
export type DataModel = DataModelFromSchemaDefinition<typeof schema>;


--- FILE: ./convex/_generated/api.d.ts ---
/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type {
  ApiFromModules,
  FilterApi,
  FunctionReference,
} from "convex/server";
import type * as attachments from "../attachments.js";
import type * as http from "../http.js";
import type * as messages from "../messages.js";
import type * as threads from "../threads.js";
import type * as userSettings from "../userSettings.js";
import type * as users from "../users.js";
import type * as utils from "../utils.js";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
declare const fullApi: ApiFromModules<{
  attachments: typeof attachments;
  http: typeof http;
  messages: typeof messages;
  threads: typeof threads;
  userSettings: typeof userSettings;
  users: typeof users;
  utils: typeof utils;
}>;
export declare const api: FilterApi<
  typeof fullApi,
  FunctionReference<any, "public">
>;
export declare const internal: FilterApi<
  typeof fullApi,
  FunctionReference<any, "internal">
>;


--- FILE: ./convex/_generated/server.d.ts ---
/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  ActionBuilder,
  HttpActionBuilder,
  MutationBuilder,
  QueryBuilder,
  GenericActionCtx,
  GenericMutationCtx,
  GenericQueryCtx,
  GenericDatabaseReader,
  GenericDatabaseWriter,
} from "convex/server";
import type { DataModel } from "./dataModel.js";

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const query: QueryBuilder<DataModel, "public">;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const internalQuery: QueryBuilder<DataModel, "internal">;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const mutation: MutationBuilder<DataModel, "public">;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const internalMutation: MutationBuilder<DataModel, "internal">;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export declare const action: ActionBuilder<DataModel, "public">;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export declare const internalAction: ActionBuilder<DataModel, "internal">;

/**
 * Define an HTTP action.
 *
 * This function will be used to respond to HTTP requests received by a Convex
 * deployment if the requests matches the path and method where this action
 * is routed. Be sure to route your action in `convex/http.js`.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Import this function from `convex/http.js` and route it to hook it up.
 */
export declare const httpAction: HttpActionBuilder;

/**
 * A set of services for use within Convex query functions.
 *
 * The query context is passed as the first argument to any Convex query
 * function run on the server.
 *
 * This differs from the {@link MutationCtx} because all of the services are
 * read-only.
 */
export type QueryCtx = GenericQueryCtx<DataModel>;

/**
 * A set of services for use within Convex mutation functions.
 *
 * The mutation context is passed as the first argument to any Convex mutation
 * function run on the server.
 */
export type MutationCtx = GenericMutationCtx<DataModel>;

/**
 * A set of services for use within Convex action functions.
 *
 * The action context is passed as the first argument to any Convex action
 * function run on the server.
 */
export type ActionCtx = GenericActionCtx<DataModel>;

/**
 * An interface to read from the database within Convex query functions.
 *
 * The two entry points are {@link DatabaseReader.get}, which fetches a single
 * document by its {@link Id}, or {@link DatabaseReader.query}, which starts
 * building a query.
 */
export type DatabaseReader = GenericDatabaseReader<DataModel>;

/**
 * An interface to read from and write to the database within Convex mutation
 * functions.
 *
 * Convex guarantees that all writes within a single mutation are
 * executed atomically, so you never have to worry about partial writes leaving
 * your data in an inconsistent state. See [the Convex Guide](https://docs.convex.dev/understanding/convex-fundamentals/functions#atomicity-and-optimistic-concurrency-control)
 * for the guarantees Convex provides your functions.
 */
export type DatabaseWriter = GenericDatabaseWriter<DataModel>;


--- FILE: ./convex/_generated/server.js ---
/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  actionGeneric,
  httpActionGeneric,
  queryGeneric,
  mutationGeneric,
  internalActionGeneric,
  internalMutationGeneric,
  internalQueryGeneric,
} from "convex/server";

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const query = queryGeneric;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const internalQuery = internalQueryGeneric;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const mutation = mutationGeneric;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const internalMutation = internalMutationGeneric;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export const action = actionGeneric;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export const internalAction = internalActionGeneric;

/**
 * Define a Convex HTTP action.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument, and a `Request` object
 * as its second.
 * @returns The wrapped endpoint function. Route a URL path to this function in `convex/http.js`.
 */
export const httpAction = httpActionGeneric;


--- FILE: ./convex/_generated/api.js ---
/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import { anyApi } from "convex/server";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
export const api = anyApi;
export const internal = anyApi;


--- FILE: ./components/ui/tabs.tsx ---
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }


--- FILE: ./components/ui/label.tsx ---
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }


--- FILE: ./components/ui/drawer.tsx ---
"use client"

import { cn } from "@/lib/utils"
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

function Drawer({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) {
  return <DrawerPrimitive.Root data-slot="drawer" {...props} />
}

function DrawerTrigger({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {
  return <DrawerPrimitive.Trigger data-slot="drawer-trigger" {...props} />
}

function DrawerPortal({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {
  return <DrawerPrimitive.Portal data-slot="drawer-portal" {...props} />
}

function DrawerClose({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Close>) {
  return <DrawerPrimitive.Close data-slot="drawer-close" {...props} />
}

function DrawerOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {
  return (
    <DrawerPrimitive.Overlay
      data-slot="drawer-overlay"
      className={cn(
        // при открытии задаёт полупрозрачный фон + blur-sm (легкое размытие)
        "data-[state=open]:animate-in data-[state=closed]:animate-out " +
        "data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 " +
        "bg-background/50 fixed inset-0 z-50 backdrop-blur-sm",
        className
      )}
      {...props}
    />
  )
}

function DrawerContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Content>) {
  return (
    <DrawerPortal>
      <DrawerOverlay />
      <DrawerPrimitive.Content
        data-slot="drawer-content"
        className={cn(
          "group/drawer-content bg-background fixed z-50 flex flex-col",
          // позиции для разных сторон (top/bottom/right/left)
          "data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 " +
            "data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b",
          "data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 " +
            "data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t",
          "data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 " +
            "data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l sm:max-w-sm",
          "data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 " +
            "data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r sm:max-w-sm",
          className
        )}
        {...props}
      >

        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  )
}

function DrawerHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div data-slot="drawer-header" className={cn("flex flex-col gap-1.5 p-4", className)} {...props} />
  )
}

function DrawerFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div data-slot="drawer-footer" className={cn("mt-auto flex flex-col gap-2 p-4", className)} {...props} />
  )
}

function DrawerTitle({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Title>) {
  return (
    <DrawerPrimitive.Title data-slot="drawer-title" className={cn("text-foreground font-semibold", className)} {...props} />
  )
}

function DrawerDescription({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Description>) {
  return (
    <DrawerPrimitive.Description
      data-slot="drawer-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
} 

--- FILE: ./stories/Button.stories.ts ---
import type { Meta, StoryObj } from '@storybook/nextjs-vite';

import { fn } from 'storybook/test';

import { Button } from './Button';

// More on how to set up stories at: https://storybook.js.org/docs/writing-stories#default-export
const meta = {
  title: 'Example/Button',
  component: Button,
  parameters: {
    // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/configure/story-layout
    layout: 'centered',
  },
  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs
  tags: ['autodocs'],
  // More on argTypes: https://storybook.js.org/docs/api/argtypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args
  args: { onClick: fn() },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

// More on writing stories with args: https://storybook.js.org/docs/writing-stories/args
export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    label: 'Button',
  },
};

export const Large: Story = {
  args: {
    size: 'large',
    label: 'Button',
  },
};

export const Small: Story = {
  args: {
    size: 'small',
    label: 'Button',
  },
};


--- FILE: ./stories/Page.stories.ts ---
import type { Meta, StoryObj } from '@storybook/nextjs-vite';

import { expect, userEvent, within } from 'storybook/test';

import { Page } from './Page';

const meta = {
  title: 'Example/Page',
  component: Page,
  parameters: {
    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout
    layout: 'fullscreen',
  },
} satisfies Meta<typeof Page>;

export default meta;
type Story = StoryObj<typeof meta>;

export const LoggedOut: Story = {};

// More on component testing: https://storybook.js.org/docs/writing-tests/interaction-testing
export const LoggedIn: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const loginButton = canvas.getByRole('button', { name: /Log in/i });
    await expect(loginButton).toBeInTheDocument();
    await userEvent.click(loginButton);
    await expect(loginButton).not.toBeInTheDocument();

    const logoutButton = canvas.getByRole('button', { name: /Log out/i });
    await expect(logoutButton).toBeInTheDocument();
  },
};


--- FILE: ./stories/page.css ---
.storybook-page {
  margin: 0 auto;
  padding: 48px 20px;
  max-width: 600px;
  color: #333;
  font-size: 14px;
  line-height: 24px;
  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}

.storybook-page h2 {
  display: inline-block;
  vertical-align: top;
  margin: 0 0 4px;
  font-weight: 700;
  font-size: 32px;
  line-height: 1;
}

.storybook-page p {
  margin: 1em 0;
}

.storybook-page a {
  color: inherit;
}

.storybook-page ul {
  margin: 1em 0;
  padding-left: 30px;
}

.storybook-page li {
  margin-bottom: 8px;
}

.storybook-page .tip {
  display: inline-block;
  vertical-align: top;
  margin-right: 10px;
  border-radius: 1em;
  background: #e7fdd8;
  padding: 4px 12px;
  color: #357a14;
  font-weight: 700;
  font-size: 11px;
  line-height: 12px;
}

.storybook-page .tip-wrapper {
  margin-top: 40px;
  margin-bottom: 40px;
  font-size: 13px;
  line-height: 20px;
}

.storybook-page .tip-wrapper svg {
  display: inline-block;
  vertical-align: top;
  margin-top: 3px;
  margin-right: 4px;
  width: 12px;
  height: 12px;
}

.storybook-page .tip-wrapper svg path {
  fill: #1ea7fd;
}


--- FILE: ./stories/Header.tsx ---
import { Button } from './Button';
import './header.css';

type User = {
  name: string;
};

export interface HeaderProps {
  user?: User;
  onLogin?: () => void;
  onLogout?: () => void;
  onCreateAccount?: () => void;
}

export const Header = ({ user, onLogin, onLogout, onCreateAccount }: HeaderProps) => (
  <header>
    <div className="storybook-header">
      <div>
        <svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
          <g fill="none" fillRule="evenodd">
            <path
              d="M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z"
              fill="#FFF"
            />
            <path
              d="M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z"
              fill="#555AB9"
            />
            <path
              d="M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z"
              fill="#91BAF8"
            />
          </g>
        </svg>
        <h1>Acme</h1>
      </div>
      <div>
        {user ? (
          <>
            <span className="welcome">
              Welcome, <b>{user.name}</b>!
            </span>
            <Button size="small" onClick={onLogout} label="Log out" />
          </>
        ) : (
          <>
            <Button size="small" onClick={onLogin} label="Log in" />
            <Button primary size="small" onClick={onCreateAccount} label="Sign up" />
          </>
        )}
      </div>
    </div>
  </header>
);


--- FILE: ./stories/button.css ---
.storybook-button {
  display: inline-block;
  cursor: pointer;
  border: 0;
  border-radius: 3em;
  font-weight: 700;
  line-height: 1;
  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}
.storybook-button--primary {
  background-color: #555ab9;
  color: white;
}
.storybook-button--secondary {
  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;
  background-color: transparent;
  color: #333;
}
.storybook-button--small {
  padding: 10px 16px;
  font-size: 12px;
}
.storybook-button--medium {
  padding: 11px 20px;
  font-size: 14px;
}
.storybook-button--large {
  padding: 12px 24px;
  font-size: 16px;
}


--- FILE: ./stories/header.css ---
.storybook-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  padding: 15px 20px;
  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}

.storybook-header svg {
  display: inline-block;
  vertical-align: top;
}

.storybook-header h1 {
  display: inline-block;
  vertical-align: top;
  margin: 6px 0 6px 10px;
  font-weight: 700;
  font-size: 20px;
  line-height: 1;
}

.storybook-header button + button {
  margin-left: 10px;
}

.storybook-header .welcome {
  margin-right: 10px;
  color: #333;
  font-size: 14px;
}


--- FILE: ./stories/Button.tsx ---
import './button.css';

export interface ButtonProps {
  /** Is this the principal call to action on the page? */
  primary?: boolean;
  /** What background color to use */
  backgroundColor?: string;
  /** How large should the button be? */
  size?: 'small' | 'medium' | 'large';
  /** Button contents */
  label: string;
  /** Optional click handler */
  onClick?: () => void;
}

/** Primary UI component for user interaction */
export const Button = ({
  primary = false,
  size = 'medium',
  backgroundColor,
  label,
  ...props
}: ButtonProps) => {
  const mode = primary ? 'storybook-button--primary' : 'storybook-button--secondary';
  return (
    <button
      type="button"
      className={['storybook-button', `storybook-button--${size}`, mode].join(' ')}
      {...props}
    >
      {label}
      <style jsx>{`
        button {
          background-color: ${backgroundColor};
        }
      `}</style>
    </button>
  );
};


--- FILE: ./stories/Page.tsx ---
import React from 'react';

import { Header } from './Header';
import './page.css';

type User = {
  name: string;
};

export const Page: React.FC = () => {
  const [user, setUser] = React.useState<User>();

  return (
    <article>
      <Header
        user={user}
        onLogin={() => setUser({ name: 'Jane Doe' })}
        onLogout={() => setUser(undefined)}
        onCreateAccount={() => setUser({ name: 'Jane Doe' })}
      />

      <section className="storybook-page">
        <h2>Pages in Storybook</h2>
        <p>
          We recommend building UIs with a{' '}
          <a href="https://componentdriven.org" target="_blank" rel="noopener noreferrer">
            <strong>component-driven</strong>
          </a>{' '}
          process starting with atomic components and ending with pages.
        </p>
        <p>
          Render pages with mock data. This makes it easy to build and review page states without
          needing to navigate to them in your app. Here are some handy patterns for managing page
          data in Storybook:
        </p>
        <ul>
          <li>
            Use a higher-level connected component. Storybook helps you compose such data from the
            "args" of child component stories
          </li>
          <li>
            Assemble data in the page component from your services. You can mock these services out
            using Storybook.
          </li>
        </ul>
        <p>
          Get a guided tutorial on component-driven development at{' '}
          <a href="https://storybook.js.org/tutorials/" target="_blank" rel="noopener noreferrer">
            Storybook tutorials
          </a>
          . Read more in the{' '}
          <a href="https://storybook.js.org/docs" target="_blank" rel="noopener noreferrer">
            docs
          </a>
          .
        </p>
        <div className="tip-wrapper">
          <span className="tip">Tip</span> Adjust the width of the canvas with the{' '}
          <svg width="10" height="10" viewBox="0 0 12 12" xmlns="http://www.w3.org/2000/svg">
            <g fill="none" fillRule="evenodd">
              <path
                d="M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z"
                id="a"
                fill="#999"
              />
            </g>
          </svg>
          Viewports addon in the toolbar
        </div>
      </section>
    </article>
  );
};


--- FILE: ./stories/Configure.mdx ---
import { Meta } from "@storybook/addon-docs/blocks";
import Image from "next/image";

import Github from "./assets/github.svg";
import Discord from "./assets/discord.svg";
import Youtube from "./assets/youtube.svg";
import Tutorials from "./assets/tutorials.svg";
import Styling from "./assets/styling.png";
import Context from "./assets/context.png";
import Assets from "./assets/assets.png";
import Docs from "./assets/docs.png";
import Share from "./assets/share.png";
import FigmaPlugin from "./assets/figma-plugin.png";
import Testing from "./assets/testing.png";
import Accessibility from "./assets/accessibility.png";
import Theming from "./assets/theming.png";
import AddonLibrary from "./assets/addon-library.png";

export const RightArrow = () => <svg 
    viewBox="0 0 14 14" 
    width="8px" 
    height="14px" 
    style={{ 
      marginLeft: '4px',
      display: 'inline-block',
      shapeRendering: 'inherit',
      verticalAlign: 'middle',
      fill: 'currentColor',
      'path fill': 'currentColor'
    }}
>
  <path d="m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z" />
</svg>

<Meta title="Configure your project" />

<div className="sb-container">
  <div className='sb-section-title'>
    # Configure your project

    Because Storybook works separately from your app, you'll need to configure it for your specific stack and setup. Below, explore guides for configuring Storybook with popular frameworks and tools. If you get stuck, learn how you can ask for help from our community.
  </div>
  <div className="sb-section">
    <div className="sb-section-item">
      <Image
        src={Styling}
        alt="A wall of logos representing different styling technologies"
        width={0}
        height={0}
        style={{ width: '100%', height: 'auto' }}
      />
      <h4 className="sb-section-item-heading">Add styling and CSS</h4>
      <p className="sb-section-item-paragraph">Like with web applications, there are many ways to include CSS within Storybook. Learn more about setting up styling within Storybook.</p>
      <a
        href="https://storybook.js.org/docs/configure/styling-and-css/?renderer=react"
        target="_blank"
      >Learn more<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <Image 
        width={0}
        height={0}
        style={{ width: '100%', height: 'auto' }}
        src={Context}
        alt="An abstraction representing the composition of data for a component"
      />
      <h4 className="sb-section-item-heading">Provide context and mocking</h4>
      <p className="sb-section-item-paragraph">Often when a story doesn't render, it's because your component is expecting a specific environment or context (like a theme provider) to be available.</p>
      <a
        href="https://storybook.js.org/docs/writing-stories/decorators/?renderer=react#context-for-mocking"
        target="_blank"
      >Learn more<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <Image 
        width={0}
        height={0}
        style={{ width: '100%', height: 'auto' }} 
        src={Assets} 
        alt="A representation of typography and image assets" 
      />
      <div>
        <h4 className="sb-section-item-heading">Load assets and resources</h4>
        <p className="sb-section-item-paragraph">To link static files (like fonts) to your projects and stories, use the
        `staticDirs` configuration option to specify folders to load when
        starting Storybook.</p>
        <a
          href="https://storybook.js.org/docs/configure/images-and-assets/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
    </div>
  </div>
</div>
<div className="sb-container">
  <div className='sb-section-title'>
    # Do more with Storybook

    Now that you know the basics, let's explore other parts of Storybook that will improve your experience. This list is just to get you started. You can customise Storybook in many ways to fit your needs.
  </div>

  <div className="sb-section">
    <div className="sb-features-grid">
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Docs} 
          alt="A screenshot showing the autodocs tag being set, pointing a docs page being generated" 
        />
        <h4 className="sb-section-item-heading">Autodocs</h4>
        <p className="sb-section-item-paragraph">Auto-generate living,
          interactive reference documentation from your components and stories.</p>
        <a
          href="https://storybook.js.org/docs/writing-docs/autodocs/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Share} 
          alt="A browser window showing a Storybook being published to a chromatic.com URL" 
        />
        <h4 className="sb-section-item-heading">Publish to Chromatic</h4>
        <p className="sb-section-item-paragraph">Publish your Storybook to review and collaborate with your entire team.</p>
        <a
          href="https://storybook.js.org/docs/sharing/publish-storybook/?renderer=react#publish-storybook-with-chromatic"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={FigmaPlugin} 
          alt="Windows showing the Storybook plugin in Figma" 
        />
        <h4 className="sb-section-item-heading">Figma Plugin</h4>
        <p className="sb-section-item-paragraph">Embed your stories into Figma to cross-reference the design and live
          implementation in one place.</p>
        <a
          href="https://storybook.js.org/docs/sharing/design-integrations/?renderer=react#embed-storybook-in-figma-with-the-plugin"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Testing} 
          alt="Screenshot of tests passing and failing" 
        />
        <h4 className="sb-section-item-heading">Testing</h4>
        <p className="sb-section-item-paragraph">Use stories to test a component in all its variations, no matter how
          complex.</p>
        <a
          href="https://storybook.js.org/docs/writing-tests/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Accessibility} 
          alt="Screenshot of accessibility tests passing and failing" 
        />
        <h4 className="sb-section-item-heading">Accessibility</h4>
        <p className="sb-section-item-paragraph">Automatically test your components for a11y issues as you develop.</p>
        <a
          href="https://storybook.js.org/docs/writing-tests/accessibility-testing/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Theming} 
          alt="Screenshot of Storybook in light and dark mode" 
        />
        <h4 className="sb-section-item-heading">Theming</h4>
        <p className="sb-section-item-paragraph">Theme Storybook's UI to personalize it to your project.</p>
        <a
          href="https://storybook.js.org/docs/configure/theming/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
    </div>
  </div>
</div>
<div className='sb-addon'>
  <div className='sb-addon-text'>
    <h4>Addons</h4>
    <p className="sb-section-item-paragraph">Integrate your tools with Storybook to connect workflows.</p>
    <a
        href="https://storybook.js.org/addons/"
        target="_blank"
      >Discover all addons<RightArrow /></a>
  </div>
  <div className='sb-addon-img'>
    <Image 
      width={650}
      height={347}
      src={AddonLibrary} 
      alt="Integrate your tools with Storybook to connect workflows." 
    />
  </div>
</div>

<div className="sb-section sb-socials">
    <div className="sb-section-item">
      <Image 
        width={32}
        height={32}
        layout="fixed"
        src={Github} 
        alt="Github logo" 
        className="sb-explore-image"
      />
      Join our contributors building the future of UI development.

      <a
        href="https://github.com/storybookjs/storybook"
        target="_blank"
      >Star on GitHub<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <Image 
        width={33}
        height={32}
        layout="fixed"
        src={Discord} 
        alt="Discord logo" 
        className="sb-explore-image"
      />
      <div>
        Get support and chat with frontend developers.

        <a
          href="https://discord.gg/storybook"
          target="_blank"
        >Join Discord server<RightArrow /></a>
      </div>
    </div>
    <div className="sb-section-item">
      <Image 
        width={32}
        height={32}
        layout="fixed"
        src={Youtube} 
        alt="Youtube logo" 
        className="sb-explore-image"
      />
      <div>
        Watch tutorials, feature previews and interviews.

        <a
          href="https://www.youtube.com/@chromaticui"
          target="_blank"
        >Watch on YouTube<RightArrow /></a>
      </div>
    </div>
    <div className="sb-section-item">
      <Image 
        width={33}
        height={32}
        layout="fixed"
        src={Tutorials} 
        alt="A book" 
        className="sb-explore-image"
      />
      <p>Follow guided walkthroughs on for key workflows.</p>

      <a
          href="https://storybook.js.org/tutorials/"
          target="_blank"
        >Discover tutorials<RightArrow /></a>
    </div>
</div>

<style>
  {`
  .sb-container {
    margin-bottom: 48px;
  }

  .sb-section {
    width: 100%;
    display: flex;
    flex-direction: row;
    gap: 20px;
  }

  img {
    object-fit: cover;
  }

  .sb-section-title {
    margin-bottom: 32px;
  }

  .sb-section a:not(h1 a, h2 a, h3 a) {
    font-size: 14px;
  }

  .sb-section-item, .sb-grid-item {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .sb-section-item-heading {
    padding-top: 20px !important;
    padding-bottom: 5px !important;
    margin: 0 !important;
  }
  .sb-section-item-paragraph {
    margin: 0;
    padding-bottom: 10px;
  }

  .sb-chevron {
    margin-left: 5px;
  }

  .sb-features-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 32px 20px;
  }

  .sb-socials {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
  }

  .sb-socials p {
    margin-bottom: 10px;
  }

  .sb-explore-image {
    max-height: 32px;
    align-self: flex-start;
  }

  .sb-addon {
    width: 100%;
    display: flex;
    align-items: center;
    position: relative;
    background-color: #EEF3F8;
    border-radius: 5px;
    border: 1px solid rgba(0, 0, 0, 0.05);
    background: #EEF3F8;
    height: 180px;
    margin-bottom: 48px;
    overflow: hidden;
  }

  .sb-addon-text {
    padding-left: 48px;
    max-width: 240px;
  }

  .sb-addon-text h4 {
    padding-top: 0px;
  }

  .sb-addon-img {
    position: absolute;
    left: 345px;
    top: 0;
    height: 100%;
    width: 200%;
    overflow: hidden;
  }

  .sb-addon-img img {
    width: 650px;
    transform: rotate(-15deg);
    margin-left: 40px;
    margin-top: -72px;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0);
    backface-visibility: hidden;
  }

  @media screen and (max-width: 800px) {
    .sb-addon-img {
      left: 300px;
    }
  }

  @media screen and (max-width: 600px) {
    .sb-section {
      flex-direction: column;
    }

    .sb-features-grid {
      grid-template-columns: repeat(1, 1fr);
    }

    .sb-socials {
      grid-template-columns: repeat(2, 1fr);
    }

    .sb-addon {
      height: 280px;
      align-items: flex-start;
      padding-top: 32px;
      overflow: hidden;
    }

    .sb-addon-text {
      padding-left: 24px;
    }

    .sb-addon-img {
      right: 0;
      left: 0;
      top: 130px;
      bottom: 0;
      overflow: hidden;
      height: auto;
      width: 124%;
    }

    .sb-addon-img img {
      width: 1200px;
      transform: rotate(-12deg);
      margin-left: 0;
      margin-top: 48px;
      margin-bottom: -40px;
      margin-left: -24px;
    }
  }
  `}
</style>


--- FILE: ./stories/Header.stories.ts ---
import type { Meta, StoryObj } from '@storybook/nextjs-vite';

import { fn } from 'storybook/test';

import { Header } from './Header';

const meta = {
  title: 'Example/Header',
  component: Header,
  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs
  tags: ['autodocs'],
  parameters: {
    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout
    layout: 'fullscreen',
  },
  args: {
    onLogin: fn(),
    onLogout: fn(),
    onCreateAccount: fn(),
  },
} satisfies Meta<typeof Header>;

export default meta;
type Story = StoryObj<typeof meta>;

export const LoggedIn: Story = {
  args: {
    user: {
      name: 'Jane Doe',
    },
  },
};

export const LoggedOut: Story = {};


--- FILE: ./firebase/index.ts ---
import { initializeApp, getApps, getApp } from 'firebase/app';
import { getAuth, setPersistence, indexedDBLocalPersistence } from 'firebase/auth';
import { firebaseConfig } from './config';

import type { Auth } from 'firebase/auth';

let auth: Auth;

try {
  if (
    process.env.NEXT_PUBLIC_FIREBASE_API_KEY &&
    process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN &&
    process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID &&
    process.env.NEXT_PUBLIC_FIREBASE_APP_ID
  ) {
    const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
    auth = getAuth(app);
    if (typeof window !== 'undefined') {
      setPersistence(auth, indexedDBLocalPersistence).catch(() => {});
    }
  } else {
    // Provide an empty object during build when env vars are missing
    auth = {} as Auth;
  }
} catch {
  auth = {} as Auth;
}

export { auth };


--- FILE: ./firebase/config.ts ---
// firebase/config.ts
export const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY ?? '',
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN ?? '',
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID ?? '',
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID ?? '',
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID ?? '',
} satisfies Record<string, string>;


--- FILE: ./hooks/useAutoResizeTextArea.ts ---
import { useCallback, useEffect, useRef } from 'react';

interface UseAutoResizeTextareaProps {
  minHeight: number;
  maxHeight?: number;
}

export default function useAutoResizeTextarea({
  minHeight,
  maxHeight,
}: UseAutoResizeTextareaProps) {
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const adjustHeight = useCallback(
    (reset?: boolean) => {
      const textarea = textareaRef.current;
      if (!textarea) return;

      if (reset) {
        textarea.style.height = `${minHeight}px`;
        return;
      }

      textarea.style.height = `${minHeight}px`;

      const newHeight = Math.max(
        minHeight,
        Math.min(textarea.scrollHeight, maxHeight ?? Number.POSITIVE_INFINITY)
      );

      textarea.style.height = `${newHeight}px`;
    },
    [minHeight, maxHeight]
  );

  useEffect(() => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = `${minHeight}px`;
    }
  }, [minHeight]);

  useEffect(() => {
    const handleResize = () => adjustHeight();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [adjustHeight]);

  return { textareaRef, adjustHeight };
}


--- FILE: ./scripts/make-sprite.mjs ---
import fs from 'fs';
import { globSync } from 'glob';
const icons = globSync('public/icons/*.svg');
const symbols = icons.map(f => {
  const id = 'i-' + f.split('/').pop().replace('.svg','');
  return fs.readFileSync(f,'utf8')
    .replace('<svg','<symbol id="'+id+'"')
    .replace('</svg>','</symbol>');
}).join('');
fs.writeFileSync('public/icons.svg',
  `<svg xmlns="http://www.w3.org/2000/svg" style="display:none">${symbols}</svg>`
);


--- FILE: ./lib/ids.ts ---
export const isConvexId = (id?: string) =>
  typeof id === 'string' && /^[a-z0-9]{24,32}$/i.test(id);


--- FILE: ./lib/utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


--- FILE: ./lib/models.ts ---
import { Provider } from '@/frontend/stores/APIKeyStore';

export const AI_MODELS = [
  'Deepseek R1 0528',
  'Deepseek V3',
  'Gemini 2.5 Pro',
  'Gemini 2.5 Flash',
  'GPT-4o',
  'GPT-4.1-mini',
] as const;

export type AIModel = (typeof AI_MODELS)[number];

export type ModelConfig = {
  modelId: string;
  provider: Provider;
};

export const MODEL_CONFIGS: Record<AIModel, ModelConfig> = {
  'Deepseek R1 0528': {
    modelId: 'deepseek/deepseek-r1-0528:free',
    provider: 'openrouter',
  },
  'Deepseek V3': {
    modelId: 'deepseek/deepseek-chat-v3-0324:free',
    provider: 'openrouter',
  },
  'Gemini 2.5 Pro': {
    modelId: 'gemini-2.5-pro-preview-05-06',
    provider: 'google',
  },
  'Gemini 2.5 Flash': {
    modelId: 'gemini-2.5-flash-preview-05-20',
    provider: 'google',
  },
  'GPT-4o': {
    modelId: 'gpt-4o',
    provider: 'openai',
  },
  'GPT-4.1-mini': {
    modelId: 'gpt-4.1-mini',
    provider: 'openai',
  },
} as const satisfies Record<AIModel, ModelConfig>;

export const getModelConfig = (modelName: AIModel): ModelConfig => {
  return MODEL_CONFIGS[modelName];
};


--- FILE: ./eslint-rules/no-nested-interactive.js ---
module.exports = {
  meta: {
    type: 'problem',
    docs: {
      description: 'disallow nesting interactive elements',
    },
    schema: [],
  },
  create(context) {
    function containsButton(children) {
      return children.some((child) => {
        if (child.type === 'JSXElement') {
          if (child.openingElement.name.name === 'button') {
            return true;
          }
          return containsButton(child.children);
        }
        return false;
      });
    }

    return {
      JSXElement(node) {
        if (node.openingElement.name.name !== 'button') return;
        if (containsButton(node.children)) {
          context.report({ node, message: 'Nested button elements are not allowed.' });
        }
      },
    };
  },
};


